
puzzle2.elf:     file format elf32-littlenios2
puzzle2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000e7c0 memsz 0x0000e7c0 flags r-x
    LOAD off    0x0000f7e0 vaddr 0x0001e7e0 paddr 0x0001f14c align 2**12
         filesz 0x0000096c memsz 0x0000096c flags rw-
    LOAD off    0x00010ab8 vaddr 0x0001fab8 paddr 0x0001fab8 align 2**12
         filesz 0x00000000 memsz 0x000004cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e0dc  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000584  0001e25c  0001e25c  0000f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000096c  0001e7e0  0001f14c  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004cc  0001fab8  0001fab8  00010ab8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001ff84  0001ff84  0001014c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001014c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a90  00000000  00000000  00010170  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000159f3  00000000  00000000  00010c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b2b  00000000  00000000  000265f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008362  00000000  00000000  0002c11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001598  00000000  00000000  00034480  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003581  00000000  00000000  00035a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786a  00000000  00000000  00038f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00050804  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001568  00000000  00000000  00050818  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000548c2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000548c5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000548c8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000548c9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000548ca  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000548ce  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000548d2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000548d6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000548df  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000548e8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  000548f1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000548fd  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a13  00000000  00000000  00054920  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000717fd  00000000  00000000  00059333  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
0001e25c l    d  .rodata	00000000 .rodata
0001e7e0 l    d  .rwdata	00000000 .rwdata
0001fab8 l    d  .bss	00000000 .bss
0001ff84 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../puzzle2_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 DE_seven_segment_display.c
0001e4b4 l     O .rodata	0000002b CSWTCH.57
0001fb48 l     O .bss	00000014 filter_x.3956
0001e4e0 l     O .rodata	00000028 h.3955
0001fb34 l     O .bss	00000014 filter_y.3957
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0001e7e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strstr.c
0001530c l     F .text	00000104 critical_factorization
00015410 l     F .text	000003b0 two_way_long_needle
00000000 l    df *ABS*	00000000 vfprintf.c
0001e652 l     O .rodata	00000010 zeroes.4389
0001e662 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
00017e2c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001f02c l     O .rwdata	00000020 lc_ctype_charset
0001f00c l     O .rwdata	00000020 lc_message_charset
0001f04c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0001e690 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001e7b4 l     O .rodata	00000010 zeroes.4333
0001e7c4 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001f12c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001f084 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001e0f4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0001fb30 g     O .bss	00000004 alt_instruction_exception_handler
0001add4 g     F .text	00000074 _mprec_log10
0001aec0 g     F .text	0000008c __any_on
0001e69c g     O .rodata	00000028 __mprec_tinytens
0001dc48 g     F .text	0000002c alt_main
000151e4 g     F .text	00000090 strcpy
00010594 g     F .text	00000014 led_write
0001fe84 g     O .bss	00000100 alt_irq
000112fc g     F .text	0000019c log
0001f14c g       *ABS*	00000000 __flash_rwdata_start
0001306c g     F .text	00000088 .hidden __eqdf2
0001fabc g     O .bss	00000004 pause
00010cd8 g     F .text	00000054 print
0001ff84 g       *ABS*	00000000 __alt_heap_start
0001fac0 g     O .bss	00000004 dancing
0001023c g     F .text	00000054 print_data
0001fac4 g     O .bss	00000004 disp_off
00019b10 g     F .text	0000007c _setlocale_r
0001dc78 g     F .text	00000004 __malloc_unlock
000106b4 g     F .text	000000a0 getActualText
0001fb28 g     O .bss	00000004 altera_avalon_timer_ts_freq
0001c674 g     F .text	0000015c memmove
00019e94 g     F .text	000000a8 _Balloc
0001f10c g     O .rwdata	00000004 timer
0001fac8 g     O .bss	00000004 reverse
000101bc g     F .text	00000080 sys_timer_isr
00010410 g     F .text	00000048 read_chars
0001de34 g     F .text	00000038 alt_putstr
000130f4 g     F .text	000000dc .hidden __gtdf2
0001f130 g     O .rwdata	00000004 jtag_uart
0001e1e0 g     F .text	00000008 altera_nios2_gen2_irq_init
000145fc g     F .text	00000010 __errno
00010000 g     F .entry	0000000c __reset
0001dfe8 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001fb08 g     O .bss	00000004 errno
0001b1f8 g     F .text	000013a0 ___svfiprintf_internal_r
0001fb20 g     O .bss	00000004 alt_argv
00027108 g       *ABS*	00000000 _gp
000102e0 g     F .text	000000b4 generate_text
0001f0b0 g     O .rwdata	00000030 alt_fd_list
0001e168 g     F .text	00000074 alt_find_dev
00019d4c g     F .text	00000148 memcpy
000143b8 g     F .text	000000dc .hidden __floatsidf
0001d8f4 g     F .text	000000f4 .hidden __ltdf2
0001facc g     O .bss	00000001 prevLetter
0001e1e8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00011bb4 g     F .text	00000074 __fpclassifyd
0001ad30 g     F .text	000000a4 __ratio
0001df00 g     F .text	0000005c altera_avalon_jtag_uart_read
0001460c g     F .text	00000014 malloc
00011d34 g     F .text	00000064 .hidden __udivsi3
00010bfc g     F .text	00000054 getBinLow
0001e6ec g     O .rodata	000000c8 __mprec_tens
00019b8c g     F .text	0000000c __locale_charset
0001fb04 g     O .bss	00000004 __malloc_top_pad
0001fad0 g     O .bss	00000004 flag
0001f124 g     O .rwdata	00000004 __mb_cur_max
00019bbc g     F .text	0000000c _localeconv_r
0001fad4 g     O .bss	00000004 length
0001a2c8 g     F .text	0000003c __i2b
00014f68 g     F .text	00000054 _sbrk_r
0001f134 g     O .rwdata	00000004 alt_max_fd
0001fb00 g     O .bss	00000004 __malloc_max_sbrked_mem
0001dad4 g     F .text	00000094 alt_irq_register
00011df0 g     F .text	000008ac .hidden __adddf3
0001aad8 g     F .text	0000010c __b2d
00010458 g     F .text	000000cc output_switch
0001d330 g     F .text	000005c4 .hidden __umoddi3
0001f110 g     O .rwdata	00000004 __fdlib_version
0001f114 g     O .rwdata	00000004 _global_impure_ptr
0001c7d0 g     F .text	00000564 _realloc_r
0001ff84 g       *ABS*	00000000 __bss_end
0001da90 g     F .text	00000044 alt_getchar
00010bc8 g     F .text	00000034 getBinLowLow
0001cd34 g     F .text	000005fc .hidden __udivdi3
0001e6c4 g     O .rodata	00000028 __mprec_bigtens
0001a0ac g     F .text	00000104 __s2b
0001d9e8 g     F .text	000000a8 .hidden __floatunsidf
0001a818 g     F .text	00000060 __mcmp
0001fb18 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001f0e0 g     O .rwdata	00000028 alt_dev_null
000107bc g     F .text	000000c8 initializeDisplay
0001e0f0 g     F .text	00000004 alt_dcache_flush_all
0001a1b0 g     F .text	00000068 __hi0bits
00014338 g     F .text	00000080 .hidden __fixdfsi
0001f14c g       *ABS*	00000000 __ram_rwdata_end
000105dc g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010d2c g     F .text	00000280 print_letters
0001f138 g     O .rwdata	00000008 alt_dev_list
0001fb84 g     O .bss	00000200 text
0001fad8 g     O .bss	00000004 dance_dir
0001e7e0 g       *ABS*	00000000 __ram_rodata_end
0001d8f4 g     F .text	000000f4 .hidden __ledf2
0001a590 g     F .text	00000140 __pow5mult
0001fadc g     O .bss	00000001 led
0001fb14 g     O .bss	00000004 __nlocale_changed
00011d98 g     F .text	00000058 .hidden __umodsi3
0001ff84 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014494 g     F .text	00000064 .hidden __clzsi2
0001df5c g     F .text	00000034 altera_avalon_jtag_uart_write
00010394 g     F .text	0000007c interpret_command
00014520 g     F .text	00000064 _asprintf_r
00019bec g     F .text	000000e4 memchr
00014fbc g     F .text	00000058 _sprintf_r
00019800 g     F .text	00000310 _free_r
0001dc7c g     F .text	00000170 alt_printf
00019b98 g     F .text	00000010 __locale_mb_cur_max
0001fb10 g     O .bss	00000004 __mlocale_changed
0001f11c g     O .rwdata	00000004 __malloc_sbrk_base
00010180 g     F .text	0000003c _start
0001fae0 g     O .bss	00000004 level
000157c0 g     F .text	000003b0 strstr
0001a6d0 g     F .text	00000148 __lshift
0001ded8 g     F .text	00000028 alt_sys_init
0001df98 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
0001b028 g     F .text	000001d0 __ssprint_r
0001064c g     F .text	00000068 getTxt
0001a304 g     F .text	0000028c __multiply
000144f8 g     F .text	00000028 .hidden __mulsi3
0001e7e0 g       *ABS*	00000000 __ram_rwdata_start
0001e25c g       *ABS*	00000000 __ram_rodata_start
0001fb5c g     O .bss	00000028 __malloc_current_mallinfo
0001abe4 g     F .text	0000014c __d2b
0001e040 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
0001fae4 g     O .bss	00000004 slowdown_toggle
00019cd0 g     F .text	0000007c memcmp
0001ff84 g       *ABS*	00000000 __alt_stack_base
00010b4c g     F .text	0000007c getBinaryLetter
0001269c g     F .text	000009d0 .hidden __divdf3
0001ae48 g     F .text	00000078 __copybits
0001ec04 g     O .rwdata	00000408 __malloc_av_
000131d0 g     F .text	0000086c .hidden __muldf3
0001e0fc g     F .text	0000006c alt_dev_llist_insert
0001dc74 g     F .text	00000004 __malloc_lock
0001de6c g     F .text	0000004c sbrk
00015b70 g     F .text	000022bc ___svfprintf_internal_r
0001fd84 g     O .bss	00000100 enteredText
0001c598 g     F .text	000000dc _calloc_r
0001fab8 g       *ABS*	00000000 __bss_start
00014e40 g     F .text	00000128 memset
00010fac g     F .text	00000350 main
0001fb1c g     O .bss	00000004 alt_envp
0001fafc g     O .bss	00000004 __malloc_max_total_mem
00010524 g     F .text	00000070 output_button
00011c28 g     F .text	00000008 matherr
00020000 g       *ABS*	00000000 __alt_heap_limit
00018054 g     F .text	00001688 _dtoa_r
00014634 g     F .text	0000080c _malloc_r
0001f108 g     O .rwdata	00000004 life
0001f148 g     O .rwdata	00000004 alt_errno
00011c3c g     F .text	00000084 .hidden __divsi3
000196dc g     F .text	00000124 _malloc_trim_r
000108ac g     F .text	00000028 updateTimer
0001af4c g     F .text	000000dc strcmp
0001e25c g       *ABS*	00000000 __flash_rodata_start
0001306c g     F .text	00000088 .hidden __nedf2
0001deb8 g     F .text	00000020 alt_irq_init
000108d4 g     F .text	000000bc updateLocation
00015014 g     F .text	0000006c sprintf
0001e50c g     O .rodata	00000100 .hidden __clz_tab
00014584 g     F .text	00000078 asprintf
0001fb0c g     O .bss	00000004 _PathLocale
00019bc8 g     F .text	00000018 setlocale
0001f118 g     O .rwdata	00000004 _impure_ptr
0001fb24 g     O .bss	00000004 alt_argc
0001fb2c g     O .bss	00000004 altera_avalon_timer_ts_base
00019bb4 g     F .text	00000008 __locale_cjk_lang
00011498 g     F .text	0000071c __ieee754_log
00010c50 g     F .text	00000054 getBinHigh
00010990 g     F .text	00000190 updatePBState
00010020 g       .exceptions	00000000 alt_irq_entry
0001aa74 g     F .text	00000064 __ulp
0001fab8 g     O .bss	00000001 pwm
0001fae8 g     O .bss	00000004 toggle
0001f140 g     O .rwdata	00000008 alt_fs_list
0001faec g     O .bss	00000004 speedup_toggle
00011c30 g     F .text	0000000c nan
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001df90 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00019be0 g     F .text	0000000c localeconv
0001faf0 g     O .bss	00000004 upsideDown
0001f14c g       *ABS*	00000000 _edata
0001faf4 g     O .bss	00000004 dance_state
0001ff84 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
0001f120 g     O .rwdata	00000004 __malloc_trim_threshold
00019ba8 g     F .text	0000000c __locale_msgcharset
0001a878 g     F .text	000001fc __mdiff
00011cc0 g     F .text	00000074 .hidden __modsi3
0001e098 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010ca4 g     F .text	00000034 getBinHighHigh
000105a8 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
0001dfac g     F .text	00000020 alt_up_accelerometer_spi_read
0001dfcc g     F .text	0000001c alt_up_accelerometer_spi_write
00010b20 g     F .text	0000002c getBin
00015274 g     F .text	00000098 strlen
000130f4 g     F .text	000000dc .hidden __gedf2
0001ddec g     F .text	00000048 alt_putchar
0001e1dc g     F .text	00000004 alt_icache_flush_all
00015080 g     F .text	00000164 strchr
00010754 g     F .text	00000068 updateText
0001f128 g     O .rwdata	00000004 alt_priority_mask
0001faf8 g     O .bss	00000004 re_enter
00013a3c g     F .text	000008fc .hidden __subdf3
0001a218 g     F .text	000000b0 __lo0bits
00010290 g     F .text	00000050 send_text
0001db68 g     F .text	000000e0 alt_load
00014620 g     F .text	00000014 free
00019f64 g     F .text	00000148 __multadd
00010884 g     F .text	00000028 clearActualText
00019f3c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	040000b4 	movhi	r16,2
   10110:	843fa104 	addi	r16,r16,-380

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <_gp+0xfffe900c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <_gp+0xfffe9014>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a28a17 	ldw	r2,-30168(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1018c:	d69c4214 	ori	gp,gp,28936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10beae14 	ori	r2,r2,64184

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18ffe114 	ori	r3,r3,65412

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <_gp+0xfffe909c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	001db680 	call	1db68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	001dc480 	call	1dc48 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <_gp+0xfffe90b0>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a27617 	ldw	r2,-30248(gp)
   101cc:	d1626c07 	ldb	r5,-30288(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c42004 	addi	r3,r3,4224
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a27503 	ldbu	r2,-30252(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a27503 	ldbu	r2,-30252(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a27503 	ldbu	r2,-30252(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a26c03 	ldbu	r2,-30288(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0226c05 	stb	zero,-30288(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a26c05 	stb	r2,-30288(gp)
   10238:	f800283a 	ret

0001023c <print_data>:
char text[2*CHARLIM];//The text that has been adjusted for the allowed letters
int pause, reverse, toggle, speedup_toggle, slowdown_toggle, dance_state, dancing, dance_dir, upsideDown, length, re_enter, disp_off, flag;
int timer = CLOCKINIT;  //Standard speed for movement
int life = 1023;

void print_data(char *accel_x, char *accel_y, char *switchdata, char *buttondata){
   1023c:	defffc04 	addi	sp,sp,-16
	char *printMsg;
	asprintf(&printMsg, "%s %s %s %s\n", accel_x, accel_y, switchdata, buttondata); 	// Print out the strings
   10240:	d9c00115 	stw	r7,4(sp)
   10244:	280f883a 	mov	r7,r5
   10248:	014000b4 	movhi	r5,2
   1024c:	29789704 	addi	r5,r5,-7588
   10250:	d9800015 	stw	r6,0(sp)
   10254:	200d883a 	mov	r6,r4
   10258:	d9000204 	addi	r4,sp,8
char text[2*CHARLIM];//The text that has been adjusted for the allowed letters
int pause, reverse, toggle, speedup_toggle, slowdown_toggle, dance_state, dancing, dance_dir, upsideDown, length, re_enter, disp_off, flag;
int timer = CLOCKINIT;  //Standard speed for movement
int life = 1023;

void print_data(char *accel_x, char *accel_y, char *switchdata, char *buttondata){
   1025c:	dfc00315 	stw	ra,12(sp)
	char *printMsg;
	asprintf(&printMsg, "%s %s %s %s\n", accel_x, accel_y, switchdata, buttondata); 	// Print out the strings
   10260:	00145840 	call	14584 <asprintf>
	alt_putstr(printMsg);
   10264:	d9000217 	ldw	r4,8(sp)
   10268:	001de340 	call	1de34 <alt_putstr>
	free(printMsg);
   1026c:	d9000217 	ldw	r4,8(sp)
   10270:	00146200 	call	14620 <free>
	memset(text, 0, 2*CHARLIM);
   10274:	010000b4 	movhi	r4,2
   10278:	01808004 	movi	r6,512
   1027c:	000b883a 	mov	r5,zero
   10280:	213ee104 	addi	r4,r4,-1148
}
   10284:	dfc00317 	ldw	ra,12(sp)
   10288:	dec00404 	addi	sp,sp,16
void print_data(char *accel_x, char *accel_y, char *switchdata, char *buttondata){
	char *printMsg;
	asprintf(&printMsg, "%s %s %s %s\n", accel_x, accel_y, switchdata, buttondata); 	// Print out the strings
	alt_putstr(printMsg);
	free(printMsg);
	memset(text, 0, 2*CHARLIM);
   1028c:	0014e401 	jmpi	14e40 <memset>

00010290 <send_text>:
}

void send_text(char *text) {
   10290:	defffd04 	addi	sp,sp,-12
	char *printMsg;
	asprintf(&printMsg, "<--> %s <--> \n", text); 	// Print out the strings
   10294:	014000b4 	movhi	r5,2
   10298:	200d883a 	mov	r6,r4
   1029c:	29789b04 	addi	r5,r5,-7572
	alt_putstr(printMsg);
	free(printMsg);
	memset(text, 0, 2*CHARLIM);
}

void send_text(char *text) {
   102a0:	dc000115 	stw	r16,4(sp)
   102a4:	2021883a 	mov	r16,r4
	char *printMsg;
	asprintf(&printMsg, "<--> %s <--> \n", text); 	// Print out the strings
   102a8:	d809883a 	mov	r4,sp
	alt_putstr(printMsg);
	free(printMsg);
	memset(text, 0, 2*CHARLIM);
}

void send_text(char *text) {
   102ac:	dfc00215 	stw	ra,8(sp)
	char *printMsg;
	asprintf(&printMsg, "<--> %s <--> \n", text); 	// Print out the strings
   102b0:	00145840 	call	14584 <asprintf>
	alt_putstr(printMsg);
   102b4:	d9000017 	ldw	r4,0(sp)
   102b8:	001de340 	call	1de34 <alt_putstr>
	free(printMsg);
   102bc:	d9000017 	ldw	r4,0(sp)
   102c0:	00146200 	call	14620 <free>
	memset(text, 0, 2*CHARLIM);								// Empty the text buffer for next input
   102c4:	01808004 	movi	r6,512
   102c8:	000b883a 	mov	r5,zero
   102cc:	8009883a 	mov	r4,r16
}
   102d0:	dfc00217 	ldw	ra,8(sp)
   102d4:	dc000117 	ldw	r16,4(sp)
   102d8:	dec00304 	addi	sp,sp,12
void send_text(char *text) {
	char *printMsg;
	asprintf(&printMsg, "<--> %s <--> \n", text); 	// Print out the strings
	alt_putstr(printMsg);
	free(printMsg);
	memset(text, 0, 2*CHARLIM);								// Empty the text buffer for next input
   102dc:	0014e401 	jmpi	14e40 <memset>

000102e0 <generate_text>:
}

char generate_text(char curr, int *length, char *text, int *running) {
   102e0:	2005883a 	mov	r2,r4
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
   102e4:	21003fcc 	andi	r4,r4,255
   102e8:	2100201c 	xori	r4,r4,128
   102ec:	213fe004 	addi	r4,r4,-128
   102f0:	00c00284 	movi	r3,10
   102f4:	20c02626 	beq	r4,r3,10390 <generate_text+0xb0>
	alt_putstr(printMsg);
	free(printMsg);
	memset(text, 0, 2*CHARLIM);								// Empty the text buffer for next input
}

char generate_text(char curr, int *length, char *text, int *running) {
   102f8:	defff804 	addi	sp,sp,-32
   102fc:	dd800615 	stw	r22,24(sp)
   10300:	dd400515 	stw	r21,20(sp)
   10304:	dd000415 	stw	r20,16(sp)
   10308:	dcc00315 	stw	r19,12(sp)
   1030c:	dc800215 	stw	r18,8(sp)
   10310:	dc400115 	stw	r17,4(sp)
   10314:	dc000015 	stw	r16,0(sp)
   10318:	dfc00715 	stw	ra,28(sp)
   1031c:	3829883a 	mov	r20,r7
   10320:	3025883a 	mov	r18,r6
   10324:	2827883a 	mov	r19,r5
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
   10328:	3023883a 	mov	r17,r6
	int idx = 0;										// Keep track of how many characters have been sent down for later printing
	char newCurr = curr;

	while (newCurr != EOF && newCurr != '\n'){						// Keep reading characters until we get to the end of the line
   1032c:	057fffc4 	movi	r21,-1
   10330:	1821883a 	mov	r16,r3
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
   10334:	05801f84 	movi	r22,126
char generate_text(char curr, int *length, char *text, int *running) {
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
	int idx = 0;										// Keep track of how many characters have been sent down for later printing
	char newCurr = curr;

	while (newCurr != EOF && newCurr != '\n'){						// Keep reading characters until we get to the end of the line
   10338:	10c03fcc 	andi	r3,r2,255
   1033c:	18c0201c 	xori	r3,r3,128
   10340:	18ffe004 	addi	r3,r3,-128
   10344:	8c89c83a 	sub	r4,r17,r18
   10348:	1d400726 	beq	r3,r21,10368 <generate_text+0x88>
   1034c:	1c000626 	beq	r3,r16,10368 <generate_text+0x88>
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
   10350:	1d80011e 	bne	r3,r22,10358 <generate_text+0x78>
   10354:	a0000015 	stw	zero,0(r20)
		text[idx] = newCurr;								// Add the next letter to the text buffer
   10358:	88800005 	stb	r2,0(r17)
		idx++;										// Keep track of the number of characters read
		newCurr = alt_getchar();							// Get the next character
   1035c:	001da900 	call	1da90 <alt_getchar>
   10360:	8c400044 	addi	r17,r17,1
   10364:	003ff406 	br	10338 <_gp+0xfffe9230>
	}
	*length = idx;
   10368:	99000015 	stw	r4,0(r19)

	return newCurr;
}
   1036c:	dfc00717 	ldw	ra,28(sp)
   10370:	dd800617 	ldw	r22,24(sp)
   10374:	dd400517 	ldw	r21,20(sp)
   10378:	dd000417 	ldw	r20,16(sp)
   1037c:	dcc00317 	ldw	r19,12(sp)
   10380:	dc800217 	ldw	r18,8(sp)
   10384:	dc400117 	ldw	r17,4(sp)
   10388:	dc000017 	ldw	r16,0(sp)
   1038c:	dec00804 	addi	sp,sp,32
   10390:	f800283a 	ret

00010394 <interpret_command>:

char * interpret_command(char* command)
{
	if ( strstr(command, "7SEG=") != 0 ) {
   10394:	014000b4 	movhi	r5,2

	return newCurr;
}

char * interpret_command(char* command)
{
   10398:	defffe04 	addi	sp,sp,-8
	if ( strstr(command, "7SEG=") != 0 ) {
   1039c:	29789f04 	addi	r5,r5,-7556

	return newCurr;
}

char * interpret_command(char* command)
{
   103a0:	dc000015 	stw	r16,0(sp)
   103a4:	dfc00115 	stw	ra,4(sp)
   103a8:	2021883a 	mov	r16,r4
	if ( strstr(command, "7SEG=") != 0 ) {
   103ac:	00157c00 	call	157c0 <strstr>
   103b0:	10000226 	beq	r2,zero,103bc <interpret_command+0x28>
		command += 5;
   103b4:	84000144 	addi	r16,r16,5
		return command;
   103b8:	00001006 	br	103fc <interpret_command+0x68>
	}
	if ( strstr(command, "LED=") != 0 ) {
   103bc:	014000b4 	movhi	r5,2
   103c0:	2978a104 	addi	r5,r5,-7548
   103c4:	8009883a 	mov	r4,r16
   103c8:	00157c00 	call	157c0 <strstr>
   103cc:	103ff91e 	bne	r2,zero,103b4 <_gp+0xfffe92ac>
			life = ((life + 1) / 2) - 1;
		}
		alt_putstr("gone into 4!");
		//command += 5;
	}*/
	if ( strstr(command, "r") != 0 ) {
   103d0:	01401c84 	movi	r5,114
   103d4:	8009883a 	mov	r4,r16
   103d8:	00150800 	call	15080 <strchr>
   103dc:	10000426 	beq	r2,zero,103f0 <interpret_command+0x5c>
		life = 1023;
   103e0:	0080ffc4 	movi	r2,1023
   103e4:	d0a00015 	stw	r2,-32768(gp)
		command += 1;
   103e8:	84000044 	addi	r16,r16,1
		return command;
   103ec:	00000306 	br	103fc <interpret_command+0x68>
	}
	if ( strcmp(command, "") != 0 ) {
   103f0:	80800003 	ldbu	r2,0(r16)
   103f4:	1000011e 	bne	r2,zero,103fc <interpret_command+0x68>
		return command;
	}
	//alt_putstr(command);
}
   103f8:	00000106 	br	10400 <interpret_command+0x6c>
   103fc:	8005883a 	mov	r2,r16
   10400:	dfc00117 	ldw	ra,4(sp)
   10404:	dc000017 	ldw	r16,0(sp)
   10408:	dec00204 	addi	sp,sp,8
   1040c:	f800283a 	ret

00010410 <read_chars>:

char * read_chars() {
   10410:	deff7d04 	addi	sp,sp,-524
	char data[2*CHARLIM];									// The buffer for the printing text
	char prevLetter = '!';
	int length = 0;
	int running = 1;
   10414:	00800044 	movi	r2,1
		return command;
	}
	//alt_putstr(command);
}

char * read_chars() {
   10418:	dfc08215 	stw	ra,520(sp)
	char data[2*CHARLIM];									// The buffer for the printing text
	char prevLetter = '!';
	int length = 0;
   1041c:	d8008115 	stw	zero,516(sp)
	int running = 1;
   10420:	d8808015 	stw	r2,512(sp)

	prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   10424:	001da900 	call	1da90 <alt_getchar>
	prevLetter = generate_text(prevLetter, &length, data, &running);		// Process input text
   10428:	11003fcc 	andi	r4,r2,255
   1042c:	2100201c 	xori	r4,r4,128
   10430:	d9c08004 	addi	r7,sp,512
   10434:	d80d883a 	mov	r6,sp
   10438:	d9408104 	addi	r5,sp,516
   1043c:	213fe004 	addi	r4,r4,-128
   10440:	00102e00 	call	102e0 <generate_text>
	//print_text(text, length);							// Print input text

	return interpret_command(data);
   10444:	d809883a 	mov	r4,sp
   10448:	00103940 	call	10394 <interpret_command>
	//return data;
}
   1044c:	dfc08217 	ldw	ra,520(sp)
   10450:	dec08304 	addi	sp,sp,524
   10454:	f800283a 	ret

00010458 <output_switch>:

void output_switch( int new, int old )
{
   10458:	deff7a04 	addi	sp,sp,-536
   1045c:	dd008415 	stw	r20,528(sp)
   10460:	dfc08515 	stw	ra,532(sp)
   10464:	dcc08315 	stw	r19,524(sp)
   10468:	dc808215 	stw	r18,520(sp)
   1046c:	dc408115 	stw	r17,516(sp)
   10470:	dc008015 	stw	r16,512(sp)
	char text[2*CHARLIM];

	int x = new^old;
   10474:	2168f03a 	xor	r20,r4,r5
	int switchnum;

	if ( x != 0 ){
   10478:	a0002226 	beq	r20,zero,10504 <output_switch+0xac>
   1047c:	2825883a 	mov	r18,r5
   10480:	2023883a 	mov	r17,r4
   10484:	04c00284 	movi	r19,10
   10488:	04000044 	movi	r16,1
		for (int i = 1; i < 513; i=i*2){
			if( x == i ){
   1048c:	a4001a1e 	bne	r20,r16,104f8 <output_switch+0xa0>
				switchnum = log2(i);
   10490:	a009883a 	mov	r4,r20
   10494:	00143b80 	call	143b8 <__floatsidf>
   10498:	1009883a 	mov	r4,r2
   1049c:	180b883a 	mov	r5,r3
   104a0:	00112fc0 	call	112fc <log>
   104a4:	01bfbeb4 	movhi	r6,65274
   104a8:	01cff9b4 	movhi	r7,16358
   104ac:	318e7bc4 	addi	r6,r6,14831
   104b0:	39cb9084 	addi	r7,r7,11842
   104b4:	1009883a 	mov	r4,r2
   104b8:	180b883a 	mov	r5,r3
   104bc:	001269c0 	call	1269c <__divdf3>
   104c0:	1009883a 	mov	r4,r2
   104c4:	180b883a 	mov	r5,r3
   104c8:	00143380 	call	14338 <__fixdfsi>
   104cc:	11800044 	addi	r6,r2,1
				if (new>old) 	{ sprintf(text, "SW%d ON\n", switchnum + 1); send_text(text); }
   104d0:	9440030e 	bge	r18,r17,104e0 <output_switch+0x88>
   104d4:	014000b4 	movhi	r5,2
   104d8:	2978a304 	addi	r5,r5,-7540
   104dc:	00000206 	br	104e8 <output_switch+0x90>
				else 			{ sprintf(text, "SW%d OFF\n", switchnum + 1); send_text(text); }
   104e0:	014000b4 	movhi	r5,2
   104e4:	2978a604 	addi	r5,r5,-7528
   104e8:	d809883a 	mov	r4,sp
   104ec:	00150140 	call	15014 <sprintf>
   104f0:	d809883a 	mov	r4,sp
   104f4:	00102900 	call	10290 <send_text>
   104f8:	9cffffc4 	addi	r19,r19,-1

	int x = new^old;
	int switchnum;

	if ( x != 0 ){
		for (int i = 1; i < 513; i=i*2){
   104fc:	8421883a 	add	r16,r16,r16
   10500:	983fe21e 	bne	r19,zero,1048c <_gp+0xfffe9384>
				if (new>old) 	{ sprintf(text, "SW%d ON\n", switchnum + 1); send_text(text); }
				else 			{ sprintf(text, "SW%d OFF\n", switchnum + 1); send_text(text); }
			}
		}
	}
}
   10504:	dfc08517 	ldw	ra,532(sp)
   10508:	dd008417 	ldw	r20,528(sp)
   1050c:	dcc08317 	ldw	r19,524(sp)
   10510:	dc808217 	ldw	r18,520(sp)
   10514:	dc408117 	ldw	r17,516(sp)
   10518:	dc008017 	ldw	r16,512(sp)
   1051c:	dec08604 	addi	sp,sp,536
   10520:	f800283a 	ret

00010524 <output_button>:

void output_button ( int new, int old)
{
   10524:	deff7f04 	addi	sp,sp,-516
   10528:	dfc08015 	stw	ra,512(sp)
	char text[2*CHARLIM];

	int x = new^old;
   1052c:	2144f03a 	xor	r2,r4,r5

	if ( x != 0 ){
   10530:	10001526 	beq	r2,zero,10588 <output_button+0x64>
		if( x == 1 ){
   10534:	01800044 	movi	r6,1
   10538:	1180021e 	bne	r2,r6,10544 <output_button+0x20>
			if (new<old) 	{ sprintf(text, "B1 pressed\n"); send_text(text); }
   1053c:	2140120e 	bge	r4,r5,10588 <output_button+0x64>
   10540:	00000706 	br	10560 <output_button+0x3c>
		}
		if( x == 2 ){
   10544:	00c00084 	movi	r3,2
   10548:	10c0021e 	bne	r2,r3,10554 <output_button+0x30>
			if (new<old) 	{ sprintf(text, "B2 pressed\n"); send_text(text); }
   1054c:	21400e0e 	bge	r4,r5,10588 <output_button+0x64>
   10550:	00000706 	br	10570 <output_button+0x4c>
		}
		if( x == 3 ){
   10554:	010000c4 	movi	r4,3
   10558:	11000b1e 	bne	r2,r4,10588 <output_button+0x64>
			if (old == 1) 		{ sprintf(text, "B1 pressed\n"); send_text(text); }
   1055c:	2980031e 	bne	r5,r6,1056c <output_button+0x48>
   10560:	014000b4 	movhi	r5,2
   10564:	2978a904 	addi	r5,r5,-7516
   10568:	00000306 	br	10578 <output_button+0x54>
			else if (old ==2 ) 	{ sprintf(text, "B2 pressed\n"); send_text(text); }
   1056c:	28c0061e 	bne	r5,r3,10588 <output_button+0x64>
   10570:	014000b4 	movhi	r5,2
   10574:	2978ac04 	addi	r5,r5,-7504
   10578:	d809883a 	mov	r4,sp
   1057c:	00151e40 	call	151e4 <strcpy>
   10580:	d809883a 	mov	r4,sp
   10584:	00102900 	call	10290 <send_text>
		}
	}
}
   10588:	dfc08017 	ldw	ra,512(sp)
   1058c:	dec08104 	addi	sp,sp,516
   10590:	f800283a 	ret

00010594 <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   10594:	008000b4 	movhi	r2,2
   10598:	21003fcc 	andi	r4,r4,255
   1059c:	10842004 	addi	r2,r2,4224
   105a0:	11000035 	stwio	r4,0(r2)
   105a4:	f800283a 	ret

000105a8 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   105a8:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   105ac:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   105b0:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   105b4:	10c001cc 	andi	r3,r2,7
   105b8:	00800204 	movi	r2,8
   105bc:	10cfc83a 	sub	r7,r2,r3
   105c0:	11ce983a 	sll	r7,r2,r7
   105c4:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   105c8:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   105cc:	3884b03a 	or	r2,r7,r2
   105d0:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   105d4:	29000015 	stw	r4,0(r5)
   105d8:	f800283a 	ret

000105dc <timer_init>:
    } else {
        pwm++;
    }
}

void timer_init(void * isr) {
   105dc:	defffe04 	addi	sp,sp,-8
   105e0:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   105e4:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }
}

void timer_init(void * isr) {
   105e8:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   105ec:	84040104 	addi	r16,r16,4100
   105f0:	008000c4 	movi	r2,3
   105f4:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   105f8:	00c000b4 	movhi	r3,2
   105fc:	0005883a 	mov	r2,zero
   10600:	18c40004 	addi	r3,r3,4096
   10604:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10608:	00c000b4 	movhi	r3,2
   1060c:	18c40204 	addi	r3,r3,4104
   10610:	01424004 	movi	r5,2304
   10614:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10618:	00c000b4 	movhi	r3,2
   1061c:	18c40304 	addi	r3,r3,4108
   10620:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10624:	200d883a 	mov	r6,r4
   10628:	000b883a 	mov	r5,zero
   1062c:	01000084 	movi	r4,2
   10630:	001dad40 	call	1dad4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10634:	008001c4 	movi	r2,7
   10638:	80800035 	stwio	r2,0(r16)
}
   1063c:	dfc00117 	ldw	ra,4(sp)
   10640:	dc000017 	ldw	r16,0(sp)
   10644:	dec00204 	addi	sp,sp,8
   10648:	f800283a 	ret

0001064c <getTxt>:
	}
	length = idx;
	return newCurr;
}*/

char getTxt(char curr){
   1064c:	defffd04 	addi	sp,sp,-12
   10650:	dc400115 	stw	r17,4(sp)
	char newCurr;
	strcpy(enteredText, "test");
   10654:	044000b4 	movhi	r17,2
   10658:	8c78af04 	addi	r17,r17,-7492
   1065c:	010000b4 	movhi	r4,2
   10660:	880b883a 	mov	r5,r17
   10664:	213f6104 	addi	r4,r4,-636
	}
	length = idx;
	return newCurr;
}*/

char getTxt(char curr){
   10668:	dfc00215 	stw	ra,8(sp)
   1066c:	dc000015 	stw	r16,0(sp)
	char newCurr;
	strcpy(enteredText, "test");
   10670:	00151e40 	call	151e4 <strcpy>
	strcpy(newCurr, "test");
   10674:	0021883a 	mov	r16,zero
   10678:	80c03fcc 	andi	r3,r16,255
   1067c:	18c0201c 	xori	r3,r3,128
   10680:	18ffe004 	addi	r3,r3,-128
   10684:	1809883a 	mov	r4,r3
   10688:	880b883a 	mov	r5,r17
   1068c:	00151e40 	call	151e4 <strcpy>
	length = strlen(newCurr);
   10690:	1009883a 	mov	r4,r2
   10694:	00152740 	call	15274 <strlen>
   10698:	d0a27315 	stw	r2,-30260(gp)
	return newCurr;
}
   1069c:	8005883a 	mov	r2,r16
   106a0:	dfc00217 	ldw	ra,8(sp)
   106a4:	dc400117 	ldw	r17,4(sp)
   106a8:	dc000017 	ldw	r16,0(sp)
   106ac:	dec00304 	addi	sp,sp,12
   106b0:	f800283a 	ret

000106b4 <getActualText>:
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   106b4:	d2627317 	ldw	r9,-30260(gp)
		currentLetter = enteredText[i];
   106b8:	028000b4 	movhi	r10,2
   106bc:	014000b4 	movhi	r5,2
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   106c0:	0009883a 	mov	r4,zero
	return newCurr;
}

//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
   106c4:	0005883a 	mov	r2,zero
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
		currentLetter = enteredText[i];
   106c8:	52bf6104 	addi	r10,r10,-636
		if (currentLetter > 96){
   106cc:	02c01804 	movi	r11,96
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   106d0:	03001344 	movi	r12,77
   106d4:	297ee104 	addi	r5,r5,-1148
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   106d8:	01801384 	movi	r6,78
		currentLetter = enteredText[i];
		if (currentLetter > 96){
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   106dc:	034015c4 	movi	r13,87
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   106e0:	01c01584 	movi	r7,86
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   106e4:	49001a16 	blt	r9,r4,10750 <getActualText+0x9c>
		currentLetter = enteredText[i];
   106e8:	2287883a 	add	r3,r4,r10
   106ec:	18c00003 	ldbu	r3,0(r3)
		if (currentLetter > 96){
   106f0:	1a003fcc 	andi	r8,r3,255
   106f4:	4200201c 	xori	r8,r8,128
   106f8:	423fe004 	addi	r8,r8,-128
   106fc:	5a00010e 	bge	r11,r8,10704 <getActualText+0x50>
			//Gets only the uppercase letter
			currentLetter -= 32;
   10700:	18fff804 	addi	r3,r3,-32
		}
		switch(currentLetter){
   10704:	1a003fcc 	andi	r8,r3,255
   10708:	4200201c 	xori	r8,r8,128
   1070c:	423fe004 	addi	r8,r8,-128
   10710:	43000526 	beq	r8,r12,10728 <getActualText+0x74>
   10714:	4340091e 	bne	r8,r13,1073c <getActualText+0x88>
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   10718:	2887883a 	add	r3,r5,r2
   1071c:	19c00005 	stb	r7,0(r3)
			text[idx + 1] = 'V';
   10720:	19c00045 	stb	r7,1(r3)
   10724:	00000306 	br	10734 <getActualText+0x80>
			currentLetter -= 32;
		}
		switch(currentLetter){
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   10728:	2887883a 	add	r3,r5,r2
   1072c:	19800005 	stb	r6,0(r3)
			text[idx + 1] = 'N';
   10730:	19800045 	stb	r6,1(r3)
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
			text[idx + 1] = 'V';
			idx += 2;
   10734:	10800084 	addi	r2,r2,2
			break;
   10738:	00000306 	br	10748 <getActualText+0x94>
		default:
			//Copy the new letter into the actual text
			text[idx] = currentLetter;
   1073c:	2891883a 	add	r8,r5,r2
   10740:	40c00005 	stb	r3,0(r8)
			idx++;
   10744:	10800044 	addi	r2,r2,1
//Takes the user's input and only uses the allowed letters.  Returns the length of the string entered
int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10748:	21000044 	addi	r4,r4,1
   1074c:	003fe506 	br	106e4 <_gp+0xfffe95dc>
		}


	}
	return idx;
}
   10750:	f800283a 	ret

00010754 <updateText>:
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
	alt_putstr("Got it!  If you want to change the text, press KEY1\n");
}
//Updates the text from the console once the program is running
void updateText(){
	if (re_enter){
   10754:	d0a27c17 	ldw	r2,-30224(gp)
   10758:	10001726 	beq	r2,zero,107b8 <updateText+0x64>
		  alt_putstr("Put your new text into the console and press ENTER\n");
   1075c:	010000b4 	movhi	r4,2
	prevLetter = getTxt(prevLetter);	//Snag what the user put in
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
	alt_putstr("Got it!  If you want to change the text, press KEY1\n");
}
//Updates the text from the console once the program is running
void updateText(){
   10760:	deffff04 	addi	sp,sp,-4
	if (re_enter){
		  alt_putstr("Put your new text into the console and press ENTER\n");
   10764:	2138b104 	addi	r4,r4,-7484
	prevLetter = getTxt(prevLetter);	//Snag what the user put in
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
	alt_putstr("Got it!  If you want to change the text, press KEY1\n");
}
//Updates the text from the console once the program is running
void updateText(){
   10768:	dfc00015 	stw	ra,0(sp)
	if (re_enter){
		  alt_putstr("Put your new text into the console and press ENTER\n");
   1076c:	001de340 	call	1de34 <alt_putstr>
		  prevLetter = '!';
   10770:	00800844 	movi	r2,33
		  prevLetter = getTxt(prevLetter);
   10774:	01000844 	movi	r4,33
}
//Updates the text from the console once the program is running
void updateText(){
	if (re_enter){
		  alt_putstr("Put your new text into the console and press ENTER\n");
		  prevLetter = '!';
   10778:	d0a27105 	stb	r2,-30268(gp)
		  prevLetter = getTxt(prevLetter);
   1077c:	001064c0 	call	1064c <getTxt>
   10780:	d0a27105 	stb	r2,-30268(gp)
		  length = getActualText();		//Adjust for special characters such as 'W' or 'M'
   10784:	00106b40 	call	106b4 <getActualText>
   10788:	d0a27315 	stw	r2,-30260(gp)
		  if(length > 0)
   1078c:	0080040e 	bge	zero,r2,107a0 <updateText+0x4c>
			  text[length-1] = '\0';		//Get rid of any extra stuff at the end
   10790:	00c000b4 	movhi	r3,2
   10794:	18fee0c4 	addi	r3,r3,-1149
   10798:	10c5883a 	add	r2,r2,r3
   1079c:	10000005 	stb	zero,0(r2)
		  alt_putstr("Got it!  If you want to change the text, press KEY1 \n");
   107a0:	010000b4 	movhi	r4,2
   107a4:	2138be04 	addi	r4,r4,-7432
   107a8:	001de340 	call	1de34 <alt_putstr>
		  re_enter = 0;	//We don't want to retrigger the entering process until the user does
   107ac:	d0227c15 	stw	zero,-30224(gp)
	}
	return;
}
   107b0:	dfc00017 	ldw	ra,0(sp)
   107b4:	dec00104 	addi	sp,sp,4
   107b8:	f800283a 	ret

000107bc <initializeDisplay>:
	}
	return 0;
}

//Does initial setup of display
void initializeDisplay(){
   107bc:	deffff04 	addi	sp,sp,-4
	toggle = 0;
	speedup_toggle = 0;
	slowdown_toggle = 0;
	dancing = 0;
	re_enter = 0;
	dance_state = 2; //Start with the letters in the middle
   107c0:	00800084 	movi	r2,2
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   107c4:	00c000b4 	movhi	r3,2
	toggle = 0;
	speedup_toggle = 0;
	slowdown_toggle = 0;
	dancing = 0;
	re_enter = 0;
	dance_state = 2; //Start with the letters in the middle
   107c8:	d0a27b15 	stw	r2,-30228(gp)
	}
	return 0;
}

//Does initial setup of display
void initializeDisplay(){
   107cc:	dfc00015 	stw	ra,0(sp)
	//These controls determine what functions the display is executing:
	flag = 0;
   107d0:	d0227215 	stw	zero,-30264(gp)
	pause = 0;
   107d4:	d0226d15 	stw	zero,-30284(gp)
	reverse = 0;
   107d8:	d0227015 	stw	zero,-30272(gp)
	upsideDown = 0;
   107dc:	d0227a15 	stw	zero,-30232(gp)
	//These controls handle the toggling of the switches; initially all of the toggled functions are off:
	toggle = 0;
   107e0:	d0227815 	stw	zero,-30240(gp)
	speedup_toggle = 0;
   107e4:	d0227915 	stw	zero,-30236(gp)
	slowdown_toggle = 0;
   107e8:	d0227715 	stw	zero,-30244(gp)
	dancing = 0;
   107ec:	d0226e15 	stw	zero,-30280(gp)
	re_enter = 0;
   107f0:	d0227c15 	stw	zero,-30224(gp)
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   107f4:	00801fc4 	movi	r2,127
   107f8:	18c40804 	addi	r3,r3,4128
   107fc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10800:	00c000b4 	movhi	r3,2
   10804:	18c40c04 	addi	r3,r3,4144
   10808:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   1080c:	00c000b4 	movhi	r3,2
   10810:	18c41004 	addi	r3,r3,4160
   10814:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10818:	00c000b4 	movhi	r3,2
   1081c:	18c41404 	addi	r3,r3,4176
   10820:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10824:	00c000b4 	movhi	r3,2
   10828:	18c41804 	addi	r3,r3,4192
   1082c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10830:	00c000b4 	movhi	r3,2
   10834:	18c41c04 	addi	r3,r3,4208
   10838:	18800035 	stwio	r2,0(r3)
	dance_state = 2; //Start with the letters in the middle
	//First Turn all six of the seven segment displays off
	print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
	prevLetter = '!';
	//Give the user instructions using the HAL commands
	alt_putstr("Hello from Nios II!\n");
   1083c:	010000b4 	movhi	r4,2
	dancing = 0;
	re_enter = 0;
	dance_state = 2; //Start with the letters in the middle
	//First Turn all six of the seven segment displays off
	print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
	prevLetter = '!';
   10840:	00800844 	movi	r2,33
	//Give the user instructions using the HAL commands
	alt_putstr("Hello from Nios II!\n");
   10844:	2138cc04 	addi	r4,r4,-7376
	dancing = 0;
	re_enter = 0;
	dance_state = 2; //Start with the letters in the middle
	//First Turn all six of the seven segment displays off
	print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
	prevLetter = '!';
   10848:	d0a27105 	stb	r2,-30268(gp)
	//Give the user instructions using the HAL commands
	alt_putstr("Hello from Nios II!\n");
   1084c:	001de340 	call	1de34 <alt_putstr>
	alt_putstr("Type what you would like to display and press ENTER\n");
   10850:	010000b4 	movhi	r4,2
   10854:	2138d204 	addi	r4,r4,-7352
   10858:	001de340 	call	1de34 <alt_putstr>
	prevLetter = getTxt(prevLetter);	//Snag what the user put in
   1085c:	d1227107 	ldb	r4,-30268(gp)
   10860:	001064c0 	call	1064c <getTxt>
   10864:	d0a27105 	stb	r2,-30268(gp)
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
   10868:	00106b40 	call	106b4 <getActualText>
	alt_putstr("Got it!  If you want to change the text, press KEY1\n");
   1086c:	010000b4 	movhi	r4,2
   10870:	2138e004 	addi	r4,r4,-7296
	prevLetter = '!';
	//Give the user instructions using the HAL commands
	alt_putstr("Hello from Nios II!\n");
	alt_putstr("Type what you would like to display and press ENTER\n");
	prevLetter = getTxt(prevLetter);	//Snag what the user put in
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
   10874:	d0a27315 	stw	r2,-30260(gp)
	alt_putstr("Got it!  If you want to change the text, press KEY1\n");
}
   10878:	dfc00017 	ldw	ra,0(sp)
   1087c:	dec00104 	addi	sp,sp,4
	//Give the user instructions using the HAL commands
	alt_putstr("Hello from Nios II!\n");
	alt_putstr("Type what you would like to display and press ENTER\n");
	prevLetter = getTxt(prevLetter);	//Snag what the user put in
	length = getActualText();		//Adjust for special characters such as 'W' or 'M'
	alt_putstr("Got it!  If you want to change the text, press KEY1\n");
   10880:	001de341 	jmpi	1de34 <alt_putstr>

00010884 <clearActualText>:
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   10884:	d0e27317 	ldw	r3,-30260(gp)
		text[i] = '\0';
   10888:	010000b4 	movhi	r4,2
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   1088c:	0005883a 	mov	r2,zero
		text[i] = '\0';
   10890:	213ee104 	addi	r4,r4,-1148
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   10894:	18800416 	blt	r3,r2,108a8 <clearActualText+0x24>
		text[i] = '\0';
   10898:	110b883a 	add	r5,r2,r4
   1089c:	28000005 	stb	zero,0(r5)
	}
	return idx;
}
//This function clears the text on the display:
void clearActualText(){
	for(int i = 0; i <= length; i++){
   108a0:	10800044 	addi	r2,r2,1
   108a4:	003ffb06 	br	10894 <_gp+0xfffe978c>
		text[i] = '\0';
	}
	return;
}
   108a8:	f800283a 	ret

000108ac <updateTimer>:
//This function updates the timer based on whether the user has toggled a speedup or slowdown
int updateTimer(int tmr, int speedup_tog, int slowdown_tog){
	if (speedup_tog){
   108ac:	28000426 	beq	r5,zero,108c0 <updateTimer+0x14>
		//If the user wishes to speed the display up by pressing KEY0
		if ((tmr - UPDATECLOCKAMT) > 0)//We don't want the timer to go negative
   108b0:	0087d004 	movi	r2,8000
   108b4:	1100050e 	bge	r2,r4,108cc <updateTimer+0x20>
			return tmr - UPDATECLOCKAMT;
   108b8:	20b83004 	addi	r2,r4,-8000
   108bc:	f800283a 	ret
	}
	else if (slowdown_tog)
   108c0:	30000226 	beq	r6,zero,108cc <updateTimer+0x20>
		//If the user wishes to slow the display down by pressing KEY1
		return tmr + UPDATECLOCKAMT;
   108c4:	2087d004 	addi	r2,r4,8000
   108c8:	f800283a 	ret
   108cc:	2005883a 	mov	r2,r4
	//Return the modified timer amount so we can update what is stored in the timer variable
	return tmr;
}
   108d0:	f800283a 	ret

000108d4 <updateLocation>:
//This function returns a new Location based on the previous one.
int updateLocation(int loc, int len){
	  //Move the display if we are unpaused
		  if (pause == 0){
   108d4:	d0a26d17 	ldw	r2,-30284(gp)
		return tmr + UPDATECLOCKAMT;
	//Return the modified timer amount so we can update what is stored in the timer variable
	return tmr;
}
//This function returns a new Location based on the previous one.
int updateLocation(int loc, int len){
   108d8:	defffd04 	addi	sp,sp,-12
   108dc:	dc400115 	stw	r17,4(sp)
   108e0:	dc000015 	stw	r16,0(sp)
   108e4:	dfc00215 	stw	ra,8(sp)
   108e8:	2021883a 	mov	r16,r4
   108ec:	2823883a 	mov	r17,r5
	  //Move the display if we are unpaused
		  if (pause == 0){
   108f0:	1000091e 	bne	r2,zero,10918 <updateLocation+0x44>
			  dancing = 0;
			  dance_state = 2;
   108f4:	00800084 	movi	r2,2
   108f8:	d0a27b15 	stw	r2,-30228(gp)
			  if (reverse == 0)
   108fc:	d0a27017 	ldw	r2,-30272(gp)
}
//This function returns a new Location based on the previous one.
int updateLocation(int loc, int len){
	  //Move the display if we are unpaused
		  if (pause == 0){
			  dancing = 0;
   10900:	d0226e15 	stw	zero,-30280(gp)
			  dance_state = 2;
			  if (reverse == 0)
   10904:	1000021e 	bne	r2,zero,10910 <updateLocation+0x3c>
				  loc++;   //Move the display forwards if the backwards button is NOT toggled (KEY2)
   10908:	24000044 	addi	r16,r4,1
   1090c:	00001206 	br	10958 <updateLocation+0x84>
			  else
				  loc--;  //Otherwise we go backwards if the user toggled the display to go backwards
   10910:	243fffc4 	addi	r16,r4,-1
   10914:	00001006 	br	10958 <updateLocation+0x84>
		  }
		  //If we are paused, check to see if dancing has been pressed
		  else{
			  reverse = 0;
			  if (dancing) {
   10918:	d0a26e17 	ldw	r2,-30280(gp)
			  else
				  loc--;  //Otherwise we go backwards if the user toggled the display to go backwards
		  }
		  //If we are paused, check to see if dancing has been pressed
		  else{
			  reverse = 0;
   1091c:	d0227015 	stw	zero,-30272(gp)
			  if (dancing) {
   10920:	10000d26 	beq	r2,zero,10958 <updateLocation+0x84>
				  if (dance_dir){
   10924:	d0a27417 	ldw	r2,-30256(gp)
   10928:	d1227b17 	ldw	r4,-30228(gp)
   1092c:	10000426 	beq	r2,zero,10940 <updateLocation+0x6c>
					  //If the Dancing Direction switch is down (SW8), cycle through the states so the letters move down
					  dance_state = (dance_state + 1) % 5;}
   10930:	01400144 	movi	r5,5
   10934:	21000044 	addi	r4,r4,1
   10938:	0011cc00 	call	11cc0 <__modsi3>
   1093c:	00000206 	br	10948 <updateLocation+0x74>
				  else{
					  //If the Dancing Direction switch is up (SW8), cycle through the states so the letters move up
					  dance_state = (dance_state - 1);
   10940:	20bfffc4 	addi	r2,r4,-1
					  if (dance_state < 0)
   10944:	10000216 	blt	r2,zero,10950 <updateLocation+0x7c>
				  if (dance_dir){
					  //If the Dancing Direction switch is down (SW8), cycle through the states so the letters move down
					  dance_state = (dance_state + 1) % 5;}
				  else{
					  //If the Dancing Direction switch is up (SW8), cycle through the states so the letters move up
					  dance_state = (dance_state - 1);
   10948:	d0a27b15 	stw	r2,-30228(gp)
   1094c:	00000206 	br	10958 <updateLocation+0x84>
					  if (dance_state < 0)
						  dance_state = dance_state + 5;
   10950:	21000104 	addi	r4,r4,4
   10954:	d1227b15 	stw	r4,-30228(gp)
				  }
			  }
		  }
		  if (loc >= len){ //If we have reached the end of the string, reset the locator back to the beginning
   10958:	84400416 	blt	r16,r17,1096c <updateLocation+0x98>
			  return loc % len;
   1095c:	880b883a 	mov	r5,r17
   10960:	8009883a 	mov	r4,r16
   10964:	0011cc00 	call	11cc0 <__modsi3>
   10968:	00000406 	br	1097c <updateLocation+0xa8>
		  }
		  else if (loc < 0){ //If we have reached the end of the string backwards, we need to jump back the other way
   1096c:	8000020e 	bge	r16,zero,10978 <updateLocation+0xa4>
			  return loc + len;
   10970:	8445883a 	add	r2,r16,r17
   10974:	00000106 	br	1097c <updateLocation+0xa8>
   10978:	8005883a 	mov	r2,r16
		  }
		  return loc;
}
   1097c:	dfc00217 	ldw	ra,8(sp)
   10980:	dc400117 	ldw	r17,4(sp)
   10984:	dc000017 	ldw	r16,0(sp)
   10988:	dec00304 	addi	sp,sp,12
   1098c:	f800283a 	ret

00010990 <updatePBState>:

//This function updates the logic based on the buttons pressed
void updatePBState(int button_datain){
   10990:	defffd04 	addi	sp,sp,-12
   10994:	dc400115 	stw	r17,4(sp)
   10998:	dfc00215 	stw	ra,8(sp)
   1099c:	dc000015 	stw	r16,0(sp)
        //Reverse Button/Dancing Button (if paused), KEY0 (toggle)
        if ((button_datain & 1) == 0 && toggle == 0){
   109a0:	2080004c 	andi	r2,r4,1
		  }
		  return loc;
}

//This function updates the logic based on the buttons pressed
void updatePBState(int button_datain){
   109a4:	2023883a 	mov	r17,r4
        //Reverse Button/Dancing Button (if paused), KEY0 (toggle)
        if ((button_datain & 1) == 0 && toggle == 0){
   109a8:	1000511e 	bne	r2,zero,10af0 <updatePBState+0x160>
   109ac:	d0a27817 	ldw	r2,-30240(gp)
   109b0:	1000511e 	bne	r2,zero,10af8 <updatePBState+0x168>
              switch(flag){
   109b4:	d0a27217 	ldw	r2,-30264(gp)
   109b8:	00c00244 	movi	r3,9
   109bc:	18804636 	bltu	r3,r2,10ad8 <updatePBState+0x148>
   109c0:	100490ba 	slli	r2,r2,2
   109c4:	00c00074 	movhi	r3,1
   109c8:	18c27704 	addi	r3,r3,2524
   109cc:	10c5883a 	add	r2,r2,r3
   109d0:	10800017 	ldw	r2,0(r2)
   109d4:	04000044 	movi	r16,1
   109d8:	1000683a 	jmp	r2
   109dc:	00010a04 	movi	zero,1064
   109e0:	00010a0c 	andi	zero,zero,1064
   109e4:	00010a1c 	xori	zero,zero,1064
   109e8:	00010a30 	cmpltui	zero,zero,1064
   109ec:	00010a40 	call	10a4 <__alt_mem_onchip_memory-0xef5c>
   109f0:	00010a54 	movui	zero,1065
   109f4:	00010a6c 	andhi	zero,zero,1065
   109f8:	00010a84 	movi	zero,1066
   109fc:	00010aa0 	cmpeqi	zero,zero,1066
   10a00:	00010abc 	xorhi	zero,zero,1066
                case 0:
                      disp_off=0;
   10a04:	d0226f15 	stw	zero,-30276(gp)
                    break;
   10a08:	00003306 	br	10ad8 <updatePBState+0x148>
            case 1:
                  speedup_toggle=1;
                  alt_putstr("Speeding up! (Hold down to speed up more)\n");
   10a0c:	010000b4 	movhi	r4,2
              switch(flag){
                case 0:
                      disp_off=0;
                    break;
            case 1:
                  speedup_toggle=1;
   10a10:	d4227915 	stw	r16,-30236(gp)
                  alt_putstr("Speeding up! (Hold down to speed up more)\n");
   10a14:	2138ee04 	addi	r4,r4,-7240
   10a18:	00000306 	br	10a28 <updatePBState+0x98>
                  break;
            case 2:
                  speedup_toggle=1;
                  alt_putstr("Even Faster (Hold down to speed up more)!!!\n");
   10a1c:	010000b4 	movhi	r4,2
            case 1:
                  speedup_toggle=1;
                  alt_putstr("Speeding up! (Hold down to speed up more)\n");
                  break;
            case 2:
                  speedup_toggle=1;
   10a20:	d4227915 	stw	r16,-30236(gp)
                  alt_putstr("Even Faster (Hold down to speed up more)!!!\n");
   10a24:	2138f904 	addi	r4,r4,-7196
   10a28:	001de340 	call	1de34 <alt_putstr>
                  break;
   10a2c:	00002a06 	br	10ad8 <updatePBState+0x148>
            case 3:
                  speedup_toggle=1;
                  alt_putstr("Faster Still!!!\n");
   10a30:	010000b4 	movhi	r4,2
            case 2:
                  speedup_toggle=1;
                  alt_putstr("Even Faster (Hold down to speed up more)!!!\n");
                  break;
            case 3:
                  speedup_toggle=1;
   10a34:	d4227915 	stw	r16,-30236(gp)
                  alt_putstr("Faster Still!!!\n");
   10a38:	21390504 	addi	r4,r4,-7148
   10a3c:	003ffa06 	br	10a28 <_gp+0xfffe9920>
                        break;
            case 4:
                  speedup_toggle=0;
                      slowdown_toggle=1;
                      alt_putstr("Slowing Down...\n");
   10a40:	010000b4 	movhi	r4,2
            case 3:
                  speedup_toggle=1;
                  alt_putstr("Faster Still!!!\n");
                        break;
            case 4:
                  speedup_toggle=0;
   10a44:	d0227915 	stw	zero,-30236(gp)
                      slowdown_toggle=1;
   10a48:	d4227715 	stw	r16,-30244(gp)
                      alt_putstr("Slowing Down...\n");
   10a4c:	21390a04 	addi	r4,r4,-7128
   10a50:	003ff506 	br	10a28 <_gp+0xfffe9920>
                      break;
            case 5:
                  slowdown_toggle=0;
                  alt_putstr("Backwards!\n");
   10a54:	010000b4 	movhi	r4,2
   10a58:	21390f04 	addi	r4,r4,-7108
                  speedup_toggle=0;
                      slowdown_toggle=1;
                      alt_putstr("Slowing Down...\n");
                      break;
            case 5:
                  slowdown_toggle=0;
   10a5c:	d0227715 	stw	zero,-30244(gp)
                  alt_putstr("Backwards!\n");
   10a60:	001de340 	call	1de34 <alt_putstr>
                  reverse = 1;
   10a64:	d4227015 	stw	r16,-30272(gp)
                  break;
   10a68:	00001b06 	br	10ad8 <updatePBState+0x148>
            case 6:
                  alt_putstr("Topsy-Turvey!\n");
   10a6c:	010000b4 	movhi	r4,2
   10a70:	21391204 	addi	r4,r4,-7096
   10a74:	001de340 	call	1de34 <alt_putstr>
                      upsideDown = 1;
   10a78:	d4227a15 	stw	r16,-30232(gp)
                      reverse = 0;
   10a7c:	d0227015 	stw	zero,-30272(gp)
                      break;
   10a80:	00001506 	br	10ad8 <updatePBState+0x148>
            case 7:
                  upsideDown = 0;
                        pause = 1;
                        dancing = 1;
                        dance_dir = 1;
                        alt_putstr("Let's Dance!\n");
   10a84:	010000b4 	movhi	r4,2
                  alt_putstr("Topsy-Turvey!\n");
                      upsideDown = 1;
                      reverse = 0;
                      break;
            case 7:
                  upsideDown = 0;
   10a88:	d0227a15 	stw	zero,-30232(gp)
                        pause = 1;
   10a8c:	d4226d15 	stw	r16,-30284(gp)
                        dancing = 1;
   10a90:	d4226e15 	stw	r16,-30280(gp)
                        dance_dir = 1;
   10a94:	d4227415 	stw	r16,-30256(gp)
                        alt_putstr("Let's Dance!\n");
   10a98:	21391604 	addi	r4,r4,-7080
   10a9c:	003fe206 	br	10a28 <_gp+0xfffe9920>
                        break;
            case 8:
                  pause = 1;
                      dancing = 1;
                      alt_putstr("Keep Dancing!\n");
   10aa0:	010000b4 	movhi	r4,2
   10aa4:	21391a04 	addi	r4,r4,-7064
                        dancing = 1;
                        dance_dir = 1;
                        alt_putstr("Let's Dance!\n");
                        break;
            case 8:
                  pause = 1;
   10aa8:	d4226d15 	stw	r16,-30284(gp)
                      dancing = 1;
   10aac:	d4226e15 	stw	r16,-30280(gp)
                      alt_putstr("Keep Dancing!\n");
   10ab0:	001de340 	call	1de34 <alt_putstr>
                      dance_dir = 0;
   10ab4:	d0227415 	stw	zero,-30256(gp)
                      break;
   10ab8:	00000706 	br	10ad8 <updatePBState+0x148>
            case 9:
                  pause = 0;
                      disp_off = 1;
                      alt_putstr("Taking a nap...zzzz....\n");
   10abc:	010000b4 	movhi	r4,2
   10ac0:	21391e04 	addi	r4,r4,-7048
                      dancing = 1;
                      alt_putstr("Keep Dancing!\n");
                      dance_dir = 0;
                      break;
            case 9:
                  pause = 0;
   10ac4:	d0226d15 	stw	zero,-30284(gp)
                      disp_off = 1;
   10ac8:	d4226f15 	stw	r16,-30276(gp)
                      alt_putstr("Taking a nap...zzzz....\n");
   10acc:	001de340 	call	1de34 <alt_putstr>
                      flag = -1;
   10ad0:	00bfffc4 	movi	r2,-1
   10ad4:	d0a27215 	stw	r2,-30264(gp)
                      break;
              }
              toggle = 1;
   10ad8:	00800044 	movi	r2,1
   10adc:	d0a27815 	stw	r2,-30240(gp)
              flag++;
   10ae0:	d0a27217 	ldw	r2,-30264(gp)
   10ae4:	10800044 	addi	r2,r2,1
   10ae8:	d0a27215 	stw	r2,-30264(gp)
   10aec:	00000206 	br	10af8 <updatePBState+0x168>
        } else if ((button_datain & 1) != 0) {
              toggle = 0; // So user doesn't continuously toggle
   10af0:	d0227815 	stw	zero,-30240(gp)
              speedup_toggle = 0;
   10af4:	d0227915 	stw	zero,-30236(gp)
        }

        //If the user wishes to re-enter text, KEY1
        if ((button_datain & 2) == 0){
   10af8:	8c40008c 	andi	r17,r17,2
   10afc:	8800031e 	bne	r17,zero,10b0c <updatePBState+0x17c>
              flag = 0;
              re_enter = 1;
   10b00:	00800044 	movi	r2,1
              speedup_toggle = 0;
        }

        //If the user wishes to re-enter text, KEY1
        if ((button_datain & 2) == 0){
              flag = 0;
   10b04:	d0227215 	stw	zero,-30264(gp)
              re_enter = 1;
   10b08:	d0a27c15 	stw	r2,-30224(gp)
        }
}
   10b0c:	dfc00217 	ldw	ra,8(sp)
   10b10:	dc400117 	ldw	r17,4(sp)
   10b14:	dc000017 	ldw	r16,0(sp)
   10b18:	dec00304 	addi	sp,sp,12
   10b1c:	f800283a 	ret

00010b20 <getBin>:
	int bit7 = (letter_inv & 0b1000000) >> 3;
	int res = (0b0000000) | bit0 | bit1 | bit5 | bit7;
	return ~res; //Uninvert the binary representation so the display knows which lights to turn on
}
//Gets the binary representation of the character
int getBin(char letter){
   10b20:	213ff404 	addi	r4,r4,-48
   10b24:	21003fcc 	andi	r4,r4,255
   10b28:	00800a84 	movi	r2,42
   10b2c:	11000536 	bltu	r2,r4,10b44 <getBin+0x24>
   10b30:	008000b4 	movhi	r2,2
   10b34:	10b92d04 	addi	r2,r2,-6988
   10b38:	1109883a 	add	r4,r2,r4
   10b3c:	20800007 	ldb	r2,0(r4)
   10b40:	f800283a 	ret
	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
	for the 7-segment is shown in the DE0_C5 User Manual*/
	switch(letter){
   10b44:	00801fc4 	movi	r2,127
	case 'Z':
		return 0b0100100;
	default:
		return 0b1111111;
	}
}
   10b48:	f800283a 	ret

00010b4c <getBinaryLetter>:
	int res = (0b0000000) | bit3;
	return ~res; //Uninvert the logic to get the correct representation
}
//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10b4c:	21003fcc 	andi	r4,r4,255
   10b50:	2100201c 	xori	r4,r4,128
	int bit3 = (letter_inv & 0b0001000) >> 3; //This logic deals with bit shifting so the letters appear higher on the display
	int res = (0b0000000) | bit3;
	return ~res; //Uninvert the logic to get the correct representation
}
//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
   10b54:	deffff04 	addi	sp,sp,-4
	int let = getBin(letter);
   10b58:	213fe004 	addi	r4,r4,-128
	int bit3 = (letter_inv & 0b0001000) >> 3; //This logic deals with bit shifting so the letters appear higher on the display
	int res = (0b0000000) | bit3;
	return ~res; //Uninvert the logic to get the correct representation
}
//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
   10b5c:	dfc00015 	stw	ra,0(sp)
	int let = getBin(letter);
   10b60:	0010b200 	call	10b20 <getBin>
	if (upsideDown){
   10b64:	d0e27a17 	ldw	r3,-30232(gp)
   10b68:	18001426 	beq	r3,zero,10bbc <getBinaryLetter+0x70>
		//If the user has toggled the upsideDown switch, (SW8), we can use bit shifting to invert the display
		int letter_inv = ~let; //Inverting the binary makes the logic easier to deal with.
   10b6c:	0086303a 	nor	r3,zero,r2
		int bit3 = (letter_inv & 0b0001000) >> 3;
		int bit4 = (letter_inv & 0b0010000) << 1;
		int bit5 = (letter_inv & 0b0100000) >> 1;
		int bit6 = (letter_inv & 0b1000000);
		int full_inv = (0b0000000) | bit0 | bit1 | bit2 | bit3 | bit4 | bit5 | bit6;
		return ~full_inv; //Invert the logic back again
   10b70:	1880004c 	andi	r2,r3,1
   10b74:	100890fa 	slli	r4,r2,3
   10b78:	1880008c 	andi	r2,r3,2
   10b7c:	1085883a 	add	r2,r2,r2
   10b80:	2084b03a 	or	r2,r4,r2
   10b84:	1900100c 	andi	r4,r3,64
   10b88:	1104b03a 	or	r2,r2,r4
   10b8c:	1900010c 	andi	r4,r3,4
   10b90:	2009d07a 	srai	r4,r4,1
   10b94:	1104b03a 	or	r2,r2,r4
   10b98:	1900020c 	andi	r4,r3,8
   10b9c:	2009d0fa 	srai	r4,r4,3
   10ba0:	1104b03a 	or	r2,r2,r4
   10ba4:	1900040c 	andi	r4,r3,16
   10ba8:	18c0080c 	andi	r3,r3,32
   10bac:	1807d07a 	srai	r3,r3,1
   10bb0:	2109883a 	add	r4,r4,r4
   10bb4:	1104b03a 	or	r2,r2,r4
   10bb8:	10c4303a 	nor	r2,r2,r3
	}
	//Otherwise, if the SW8 is in the rightside-up position, we can just display the letter
	return let;
}
   10bbc:	dfc00017 	ldw	ra,0(sp)
   10bc0:	dec00104 	addi	sp,sp,4
   10bc4:	f800283a 	ret

00010bc8 <getBinLowLow>:
        }
}

//Gets the lowest number representation of the given letter
int getBinLowLow(char letter){
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter; the inverting logic is easier to deal with
   10bc8:	21003fcc 	andi	r4,r4,255
   10bcc:	2100201c 	xori	r4,r4,128
              re_enter = 1;
        }
}

//Gets the lowest number representation of the given letter
int getBinLowLow(char letter){
   10bd0:	deffff04 	addi	sp,sp,-4
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter; the inverting logic is easier to deal with
   10bd4:	213fe004 	addi	r4,r4,-128
              re_enter = 1;
        }
}

//Gets the lowest number representation of the given letter
int getBinLowLow(char letter){
   10bd8:	dfc00015 	stw	ra,0(sp)
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter; the inverting logic is easier to deal with
   10bdc:	0010b4c0 	call	10b4c <getBinaryLetter>
	int bit0 = (letter_inv & 0b0000001) << 3; //This logic deals with bit shifting so the letters appear higher on the display
	int res = (0b0000000) | bit0;
	return ~res; //Reinvert the binary representation of the modified letter so the display reads the correct representation
   10be0:	0084303a 	nor	r2,zero,r2
   10be4:	1080004c 	andi	r2,r2,1
   10be8:	100490fa 	slli	r2,r2,3
}
   10bec:	0084303a 	nor	r2,zero,r2
   10bf0:	dfc00017 	ldw	ra,0(sp)
   10bf4:	dec00104 	addi	sp,sp,4
   10bf8:	f800283a 	ret

00010bfc <getBinLow>:
//Gets a lower integer representation of the given letter
int getBinLow(char letter){
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter; inverting the binary makes the logic easier
   10bfc:	21003fcc 	andi	r4,r4,255
   10c00:	2100201c 	xori	r4,r4,128
	int bit0 = (letter_inv & 0b0000001) << 3; //This logic deals with bit shifting so the letters appear higher on the display
	int res = (0b0000000) | bit0;
	return ~res; //Reinvert the binary representation of the modified letter so the display reads the correct representation
}
//Gets a lower integer representation of the given letter
int getBinLow(char letter){
   10c04:	deffff04 	addi	sp,sp,-4
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter; inverting the binary makes the logic easier
   10c08:	213fe004 	addi	r4,r4,-128
	int bit0 = (letter_inv & 0b0000001) << 3; //This logic deals with bit shifting so the letters appear higher on the display
	int res = (0b0000000) | bit0;
	return ~res; //Reinvert the binary representation of the modified letter so the display reads the correct representation
}
//Gets a lower integer representation of the given letter
int getBinLow(char letter){
   10c0c:	dfc00015 	stw	ra,0(sp)
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter; inverting the binary makes the logic easier
   10c10:	0010b4c0 	call	10b4c <getBinaryLetter>
   10c14:	0086303a 	nor	r3,zero,r2
	int bit0 = (letter_inv & 0b0000001) << 6; //This logic deals with bit shifting so the letters appear higher on the display
	int bit1 = (letter_inv & 0b0000010) << 1;
	int bit5 = (letter_inv & 0b0100000) >> 1;
	int bit7 = (letter_inv & 0b1000000) >> 3;
	int res = (0b0000000) | bit0 | bit1 | bit5 | bit7;
	return ~res; //Uninvert the binary representation so the display knows which lights to turn on
   10c18:	1900004c 	andi	r4,r3,1
   10c1c:	200491ba 	slli	r2,r4,6
   10c20:	1900008c 	andi	r4,r3,2
   10c24:	2109883a 	add	r4,r4,r4
   10c28:	1108b03a 	or	r4,r2,r4
   10c2c:	1880080c 	andi	r2,r3,32
   10c30:	1005d07a 	srai	r2,r2,1
   10c34:	18c0100c 	andi	r3,r3,64
   10c38:	2088b03a 	or	r4,r4,r2
   10c3c:	1805d0fa 	srai	r2,r3,3
}
   10c40:	2084303a 	nor	r2,r4,r2
   10c44:	dfc00017 	ldw	ra,0(sp)
   10c48:	dec00104 	addi	sp,sp,4
   10c4c:	f800283a 	ret

00010c50 <getBinHigh>:
		return 0b1111111;
	}
}
//Gets the upper binary representation of the character
int getBinHigh(char letter){
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter, the logic is easier to work with inverted
   10c50:	21003fcc 	andi	r4,r4,255
   10c54:	2100201c 	xori	r4,r4,128
	default:
		return 0b1111111;
	}
}
//Gets the upper binary representation of the character
int getBinHigh(char letter){
   10c58:	deffff04 	addi	sp,sp,-4
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter, the logic is easier to work with inverted
   10c5c:	213fe004 	addi	r4,r4,-128
	default:
		return 0b1111111;
	}
}
//Gets the upper binary representation of the character
int getBinHigh(char letter){
   10c60:	dfc00015 	stw	ra,0(sp)
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter, the logic is easier to work with inverted
   10c64:	0010b4c0 	call	10b4c <getBinaryLetter>
   10c68:	0086303a 	nor	r3,zero,r2
	int bit2 = (letter_inv & 0b0000100) >> 1 ; //This logic deals with bit shifting so the letters appear higher on the display
	int bit3 = (letter_inv & 0b0001000) << 3;
	int bit4 = (letter_inv & 0b0010000) << 1 ;
	int bit6 = (letter_inv & 0b1000000) >> 6;
	int res = (0b0000000) | bit2 | bit3 | bit4 | bit6;
	return ~res;//Uninvert the logic to get the correct representation
   10c6c:	1880010c 	andi	r2,r3,4
   10c70:	1009d07a 	srai	r4,r2,1
   10c74:	1880020c 	andi	r2,r3,8
   10c78:	100490fa 	slli	r2,r2,3
   10c7c:	2084b03a 	or	r2,r4,r2
   10c80:	1900040c 	andi	r4,r3,16
   10c84:	18c0100c 	andi	r3,r3,64
   10c88:	1807d1ba 	srai	r3,r3,6
   10c8c:	2109883a 	add	r4,r4,r4
   10c90:	1104b03a 	or	r2,r2,r4
}
   10c94:	10c4303a 	nor	r2,r2,r3
   10c98:	dfc00017 	ldw	ra,0(sp)
   10c9c:	dec00104 	addi	sp,sp,4
   10ca0:	f800283a 	ret

00010ca4 <getBinHighHigh>:
//Gets the highest number representation of the given letter
int getBinHighHigh(char letter){
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter, it is easier to deal with the inverted logic
   10ca4:	21003fcc 	andi	r4,r4,255
   10ca8:	2100201c 	xori	r4,r4,128
	int bit6 = (letter_inv & 0b1000000) >> 6;
	int res = (0b0000000) | bit2 | bit3 | bit4 | bit6;
	return ~res;//Uninvert the logic to get the correct representation
}
//Gets the highest number representation of the given letter
int getBinHighHigh(char letter){
   10cac:	deffff04 	addi	sp,sp,-4
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter, it is easier to deal with the inverted logic
   10cb0:	213fe004 	addi	r4,r4,-128
	int bit6 = (letter_inv & 0b1000000) >> 6;
	int res = (0b0000000) | bit2 | bit3 | bit4 | bit6;
	return ~res;//Uninvert the logic to get the correct representation
}
//Gets the highest number representation of the given letter
int getBinHighHigh(char letter){
   10cb4:	dfc00015 	stw	ra,0(sp)
	int letter_inv = ~getBinaryLetter(letter); //Get the integer representation of the letter, it is easier to deal with the inverted logic
   10cb8:	0010b4c0 	call	10b4c <getBinaryLetter>
	int bit3 = (letter_inv & 0b0001000) >> 3; //This logic deals with bit shifting so the letters appear higher on the display
	int res = (0b0000000) | bit3;
	return ~res; //Uninvert the logic to get the correct representation
   10cbc:	0084303a 	nor	r2,zero,r2
   10cc0:	1080020c 	andi	r2,r2,8
   10cc4:	1005d0fa 	srai	r2,r2,3
}
   10cc8:	0084303a 	nor	r2,zero,r2
   10ccc:	dfc00017 	ldw	ra,0(sp)
   10cd0:	dec00104 	addi	sp,sp,4
   10cd4:	f800283a 	ret

00010cd8 <print>:
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10cd8:	008000b4 	movhi	r2,2
   10cdc:	10840804 	addi	r2,r2,4128
   10ce0:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10ce4:	008000b4 	movhi	r2,2
   10ce8:	10840c04 	addi	r2,r2,4144
   10cec:	11400035 	stwio	r5,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10cf0:	008000b4 	movhi	r2,2
   10cf4:	10841004 	addi	r2,r2,4160
   10cf8:	11800035 	stwio	r6,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10cfc:	008000b4 	movhi	r2,2
   10d00:	10841404 	addi	r2,r2,4176
   10d04:	11c00035 	stwio	r7,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10d08:	d8c00017 	ldw	r3,0(sp)
   10d0c:	008000b4 	movhi	r2,2
   10d10:	10841804 	addi	r2,r2,4192
   10d14:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10d18:	d8c00117 	ldw	r3,4(sp)
   10d1c:	008000b4 	movhi	r2,2
   10d20:	10841c04 	addi	r2,r2,4208
   10d24:	10c00035 	stwio	r3,0(r2)
   10d28:	f800283a 	ret

00010d2c <print_letters>:
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0, int state){
	//If the display is "muted," don't show anything
	if (disp_off){
   10d2c:	d0e26f17 	ldw	r3,-30276(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0, int state){
   10d30:	defff404 	addi	sp,sp,-48
   10d34:	df000a15 	stw	fp,40(sp)
   10d38:	ddc00915 	stw	r23,36(sp)
   10d3c:	dd800815 	stw	r22,32(sp)
   10d40:	dd400715 	stw	r21,28(sp)
   10d44:	dd000615 	stw	r20,24(sp)
   10d48:	dcc00515 	stw	r19,20(sp)
   10d4c:	dc400315 	stw	r17,12(sp)
   10d50:	dc000215 	stw	r16,8(sp)
   10d54:	070000b4 	movhi	fp,2
   10d58:	05c000b4 	movhi	r23,2
   10d5c:	058000b4 	movhi	r22,2
   10d60:	054000b4 	movhi	r21,2
   10d64:	044000b4 	movhi	r17,2
   10d68:	040000b4 	movhi	r16,2
   10d6c:	dfc00b15 	stw	ra,44(sp)
   10d70:	dc800415 	stw	r18,16(sp)
   10d74:	dd000c17 	ldw	r20,48(sp)
   10d78:	dcc00d17 	ldw	r19,52(sp)
   10d7c:	d8800e17 	ldw	r2,56(sp)
   10d80:	e7040804 	addi	fp,fp,4128
   10d84:	bdc40c04 	addi	r23,r23,4144
   10d88:	b5841004 	addi	r22,r22,4160
   10d8c:	ad441404 	addi	r21,r21,4176
   10d90:	8c441804 	addi	r17,r17,4192
   10d94:	84041c04 	addi	r16,r16,4208
	//If the display is "muted," don't show anything
	if (disp_off){
   10d98:	18000726 	beq	r3,zero,10db8 <print_letters+0x8c>
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10d9c:	00801fc4 	movi	r2,127
   10da0:	e0800035 	stwio	r2,0(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10da4:	b8800035 	stwio	r2,0(r23)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10da8:	b0800035 	stwio	r2,0(r22)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10dac:	a8800035 	stwio	r2,0(r21)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10db0:	88800035 	stwio	r2,0(r17)
   10db4:	00007006 	br	10f78 <print_letters+0x24c>
   10db8:	31803fcc 	andi	r6,r6,255
   10dbc:	39c03fcc 	andi	r7,r7,255
   10dc0:	3180201c 	xori	r6,r6,128
   10dc4:	39c0201c 	xori	r7,r7,128
   10dc8:	21003fcc 	andi	r4,r4,255
   10dcc:	2c803fcc 	andi	r18,r5,255
   10dd0:	31bfe004 	addi	r6,r6,-128
   10dd4:	39ffe004 	addi	r7,r7,-128
   10dd8:	a5003fcc 	andi	r20,r20,255
   10ddc:	9cc03fcc 	andi	r19,r19,255
   10de0:	2100201c 	xori	r4,r4,128
   10de4:	9480201c 	xori	r18,r18,128
   10de8:	a500201c 	xori	r20,r20,128
   10dec:	9cc0201c 	xori	r19,r19,128
	if (disp_off){
		print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
		return;
	}
	//State refers to which dancing state the characters are in
	switch (state){
   10df0:	00c00044 	movi	r3,1
   10df4:	d9800015 	stw	r6,0(sp)
   10df8:	d9c00115 	stw	r7,4(sp)
   10dfc:	213fe004 	addi	r4,r4,-128
   10e00:	94bfe004 	addi	r18,r18,-128
   10e04:	a53fe004 	addi	r20,r20,-128
   10e08:	9cffe004 	addi	r19,r19,-128
   10e0c:	10c02826 	beq	r2,r3,10eb0 <print_letters+0x184>
   10e10:	18801216 	blt	r3,r2,10e5c <print_letters+0x130>
   10e14:	1000481e 	bne	r2,zero,10f38 <print_letters+0x20c>
	//This is the case where the letters are shifted down by the maximum amount on the display
	case 0:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinLowLow(let5));
   10e18:	0010bc80 	call	10bc8 <getBinLowLow>
   10e1c:	e0800035 	stwio	r2,0(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinLowLow(let4));
   10e20:	9009883a 	mov	r4,r18
   10e24:	0010bc80 	call	10bc8 <getBinLowLow>
   10e28:	b8800035 	stwio	r2,0(r23)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinLowLow(let3));
   10e2c:	d9000017 	ldw	r4,0(sp)
   10e30:	0010bc80 	call	10bc8 <getBinLowLow>
   10e34:	b0800035 	stwio	r2,0(r22)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinLowLow(let2));
   10e38:	d9000117 	ldw	r4,4(sp)
   10e3c:	0010bc80 	call	10bc8 <getBinLowLow>
   10e40:	a8800035 	stwio	r2,0(r21)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinLowLow(let1));
   10e44:	a009883a 	mov	r4,r20
   10e48:	0010bc80 	call	10bc8 <getBinLowLow>
   10e4c:	88800035 	stwio	r2,0(r17)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinLowLow(let0));
   10e50:	9809883a 	mov	r4,r19
   10e54:	0010bc80 	call	10bc8 <getBinLowLow>
   10e58:	00004706 	br	10f78 <print_letters+0x24c>
	if (disp_off){
		print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
		return;
	}
	//State refers to which dancing state the characters are in
	switch (state){
   10e5c:	00c00084 	movi	r3,2
   10e60:	10c02426 	beq	r2,r3,10ef4 <print_letters+0x1c8>
   10e64:	00c000c4 	movi	r3,3
   10e68:	10c0331e 	bne	r2,r3,10f38 <print_letters+0x20c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinaryLetter(let1));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinaryLetter(let0));
		return;
	//This is the case where the letters are shifted up a bit on the display
	case 3:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinHigh(let5));
   10e6c:	0010c500 	call	10c50 <getBinHigh>
   10e70:	e0800035 	stwio	r2,0(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinHigh(let4));
   10e74:	9009883a 	mov	r4,r18
   10e78:	0010c500 	call	10c50 <getBinHigh>
   10e7c:	b8800035 	stwio	r2,0(r23)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinHigh(let3));
   10e80:	d9000017 	ldw	r4,0(sp)
   10e84:	0010c500 	call	10c50 <getBinHigh>
   10e88:	b0800035 	stwio	r2,0(r22)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinHigh(let2));
   10e8c:	d9000117 	ldw	r4,4(sp)
   10e90:	0010c500 	call	10c50 <getBinHigh>
   10e94:	a8800035 	stwio	r2,0(r21)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinHigh(let1));
   10e98:	a009883a 	mov	r4,r20
   10e9c:	0010c500 	call	10c50 <getBinHigh>
   10ea0:	88800035 	stwio	r2,0(r17)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinHigh(let0));
   10ea4:	9809883a 	mov	r4,r19
   10ea8:	0010c500 	call	10c50 <getBinHigh>
   10eac:	00003206 	br	10f78 <print_letters+0x24c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinLowLow(let1));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinLowLow(let0));
		return;
	//This is the case where the letters are shifted down a bit on the display
	case 1:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinLow(let5));
   10eb0:	0010bfc0 	call	10bfc <getBinLow>
   10eb4:	e0800035 	stwio	r2,0(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinLow(let4));
   10eb8:	9009883a 	mov	r4,r18
   10ebc:	0010bfc0 	call	10bfc <getBinLow>
   10ec0:	b8800035 	stwio	r2,0(r23)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinLow(let3));
   10ec4:	d9000017 	ldw	r4,0(sp)
   10ec8:	0010bfc0 	call	10bfc <getBinLow>
   10ecc:	b0800035 	stwio	r2,0(r22)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinLow(let2));
   10ed0:	d9000117 	ldw	r4,4(sp)
   10ed4:	0010bfc0 	call	10bfc <getBinLow>
   10ed8:	a8800035 	stwio	r2,0(r21)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinLow(let1));
   10edc:	a009883a 	mov	r4,r20
   10ee0:	0010bfc0 	call	10bfc <getBinLow>
   10ee4:	88800035 	stwio	r2,0(r17)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinLow(let0));
   10ee8:	9809883a 	mov	r4,r19
   10eec:	0010bfc0 	call	10bfc <getBinLow>
   10ef0:	00002106 	br	10f78 <print_letters+0x24c>
		return;
	//This is the "main" case, where the full letters are displayed on the display
	case 2:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
   10ef4:	0010b4c0 	call	10b4c <getBinaryLetter>
   10ef8:	e0800035 	stwio	r2,0(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
   10efc:	9009883a 	mov	r4,r18
   10f00:	0010b4c0 	call	10b4c <getBinaryLetter>
   10f04:	b8800035 	stwio	r2,0(r23)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
   10f08:	d9000017 	ldw	r4,0(sp)
   10f0c:	0010b4c0 	call	10b4c <getBinaryLetter>
   10f10:	b0800035 	stwio	r2,0(r22)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
   10f14:	d9000117 	ldw	r4,4(sp)
   10f18:	0010b4c0 	call	10b4c <getBinaryLetter>
   10f1c:	a8800035 	stwio	r2,0(r21)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinaryLetter(let1));
   10f20:	a009883a 	mov	r4,r20
   10f24:	0010b4c0 	call	10b4c <getBinaryLetter>
   10f28:	88800035 	stwio	r2,0(r17)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinaryLetter(let0));
   10f2c:	9809883a 	mov	r4,r19
   10f30:	0010b4c0 	call	10b4c <getBinaryLetter>
   10f34:	00001006 	br	10f78 <print_letters+0x24c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinHigh(let1));
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinHigh(let0));
		return;
	//This is the case where the letters are shifted by the maximum amount on the display
	default:
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinHighHigh(let5));
   10f38:	0010ca40 	call	10ca4 <getBinHighHigh>
   10f3c:	e0800035 	stwio	r2,0(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinHighHigh(let4));
   10f40:	9009883a 	mov	r4,r18
   10f44:	0010ca40 	call	10ca4 <getBinHighHigh>
   10f48:	b8800035 	stwio	r2,0(r23)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinHighHigh(let3));
   10f4c:	d9000017 	ldw	r4,0(sp)
   10f50:	0010ca40 	call	10ca4 <getBinHighHigh>
   10f54:	b0800035 	stwio	r2,0(r22)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinHighHigh(let2));
   10f58:	d9000117 	ldw	r4,4(sp)
   10f5c:	0010ca40 	call	10ca4 <getBinHighHigh>
   10f60:	a8800035 	stwio	r2,0(r21)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinHighHigh(let1));
   10f64:	a009883a 	mov	r4,r20
   10f68:	0010ca40 	call	10ca4 <getBinHighHigh>
   10f6c:	88800035 	stwio	r2,0(r17)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinHighHigh(let0));
   10f70:	9809883a 	mov	r4,r19
   10f74:	0010ca40 	call	10ca4 <getBinHighHigh>
   10f78:	80800035 	stwio	r2,0(r16)
		return;
	}
}
   10f7c:	dfc00b17 	ldw	ra,44(sp)
   10f80:	df000a17 	ldw	fp,40(sp)
   10f84:	ddc00917 	ldw	r23,36(sp)
   10f88:	dd800817 	ldw	r22,32(sp)
   10f8c:	dd400717 	ldw	r21,28(sp)
   10f90:	dd000617 	ldw	r20,24(sp)
   10f94:	dcc00517 	ldw	r19,20(sp)
   10f98:	dc800417 	ldw	r18,16(sp)
   10f9c:	dc400317 	ldw	r17,12(sp)
   10fa0:	dc000217 	ldw	r16,8(sp)
   10fa4:	dec00c04 	addi	sp,sp,48
   10fa8:	f800283a 	ret

00010fac <main>:
	// ACCELEROMTER INITIALISE
	alt_32 x_read;
	alt_32 y_read;
	alt_32 z_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10fac:	010000b4 	movhi	r4,2
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

int main(){
   10fb0:	defaf004 	addi	sp,sp,-5184
	// ACCELEROMTER INITIALISE
	alt_32 x_read;
	alt_32 y_read;
	alt_32 z_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10fb4:	21392504 	addi	r4,r4,-7020
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

int main(){
   10fb8:	dfc50f15 	stw	ra,5180(sp)
   10fbc:	df050e15 	stw	fp,5176(sp)
   10fc0:	ddc50d15 	stw	r23,5172(sp)
   10fc4:	dd850c15 	stw	r22,5168(sp)
   10fc8:	dd450b15 	stw	r21,5164(sp)
   10fcc:	dd050a15 	stw	r20,5160(sp)
   10fd0:	dcc50915 	stw	r19,5156(sp)
   10fd4:	dc850815 	stw	r18,5152(sp)
   10fd8:	dc450715 	stw	r17,5148(sp)
   10fdc:	dc050615 	stw	r16,5144(sp)
	// ACCELEROMTER INITIALISE
	alt_32 x_read;
	alt_32 y_read;
	alt_32 z_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10fe0:	001df900 	call	1df90 <alt_up_accelerometer_spi_open_dev>
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10fe4:	1000b826 	beq	r2,zero,112c8 <main+0x31c>
		return 1;
	}
	timer_init(sys_timer_isr);
   10fe8:	01000074 	movhi	r4,1
   10fec:	21006f04 	addi	r4,r4,444
	char accel_data_z[4*CHARLIM];
	char switch_data[4*CHARLIM];
	char button_data[4*CHARLIM];

	// SWITCH
	int switch_datain, switch_data_old = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10ff0:	04c000b4 	movhi	r19,2
   10ff4:	1029883a 	mov	r20,r2
   10ff8:	9cc42404 	addi	r19,r19,4240
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
		return 1;
	}
	timer_init(sys_timer_isr);
   10ffc:	00105dc0 	call	105dc <timer_init>
	char accel_data_z[4*CHARLIM];
	char switch_data[4*CHARLIM];
	char button_data[4*CHARLIM];

	// SWITCH
	int switch_datain, switch_data_old = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   11000:	98800037 	ldwio	r2,0(r19)
	// BUTTON
	int button_datain, button_data_old = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   11004:	048000b4 	movhi	r18,2
   11008:	94842804 	addi	r18,r18,4256
   1100c:	90800037 	ldwio	r2,0(r18)
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);

		out_y = 0;
		out_x = 0;

		filter_x[4] = filter_x[3];
   11010:	040000b4 	movhi	r16,2
	int length = 0;
	int rotation = 0;
	int count = 0;

	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, life);
   11014:	058000b4 	movhi	r22,2
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);

		out_y = 0;
		out_x = 0;

		filter_x[4] = filter_x[3];
   11018:	843ed204 	addi	r16,r16,-1208
	int length = 0;
	int rotation = 0;
	int count = 0;

	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, life);
   1101c:	b5842004 	addi	r22,r22,4224
   11020:	802f883a 	mov	r23,r16
   11024:	d0a00017 	ldw	r2,-32768(gp)
   11028:	b0800035 	stwio	r2,0(r22)

		/* <--> SENDING DATA <--> */
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   1102c:	d9450104 	addi	r5,sp,5124
   11030:	a009883a 	mov	r4,r20
   11034:	001dfe80 	call	1dfe8 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   11038:	d9450004 	addi	r5,sp,5120
   1103c:	a009883a 	mov	r4,r20
   11040:	001e0400 	call	1e040 <alt_up_accelerometer_spi_read_y_axis>
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);

		out_y = 0;
		out_x = 0;

		filter_x[4] = filter_x[3];
   11044:	80800317 	ldw	r2,12(r16)
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;

		for ( int i = 0; i < 5; i++ )
		{
			out_x += h[i]*filter_x[i];
   11048:	030000b4 	movhi	r12,2

		filter_y[4] = filter_y[3];
		filter_y[3] = filter_y[2];
		filter_y[2] = filter_y[1];
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;
   1104c:	0027883a 	mov	r19,zero
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);

		out_y = 0;
		out_x = 0;

		filter_x[4] = filter_x[3];
   11050:	80800415 	stw	r2,16(r16)
		filter_x[3] = filter_x[2];
   11054:	80800217 	ldw	r2,8(r16)
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);

		out_y = 0;
		out_x = 0;
   11058:	0025883a 	mov	r18,zero
		/* <--> SENDING DATA <--> */
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);

		out_y = 0;
   1105c:	0023883a 	mov	r17,zero
		out_x = 0;

		filter_x[4] = filter_x[3];
		filter_x[3] = filter_x[2];
   11060:	80800315 	stw	r2,12(r16)
		filter_x[2] = filter_x[1];
   11064:	80800117 	ldw	r2,4(r16)
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;

		for ( int i = 0; i < 5; i++ )
		{
			out_x += h[i]*filter_x[i];
   11068:	63393804 	addi	r12,r12,-6944
		filter_y[3] = filter_y[2];
		filter_y[2] = filter_y[1];
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;

		for ( int i = 0; i < 5; i++ )
   1106c:	02c00504 	movi	r11,20
		out_y = 0;
		out_x = 0;

		filter_x[4] = filter_x[3];
		filter_x[3] = filter_x[2];
		filter_x[2] = filter_x[1];
   11070:	80800215 	stw	r2,8(r16)
		filter_x[1] = filter_x[0];
   11074:	80800017 	ldw	r2,0(r16)
   11078:	80800115 	stw	r2,4(r16)
		filter_x[0] = x_read;
   1107c:	d8850117 	ldw	r2,5124(sp)
   11080:	80800015 	stw	r2,0(r16)

		filter_y[4] = filter_y[3];
   11084:	008000b4 	movhi	r2,2
   11088:	10becd04 	addi	r2,r2,-1228
   1108c:	10c00317 	ldw	r3,12(r2)
   11090:	10c00415 	stw	r3,16(r2)
		filter_y[3] = filter_y[2];
   11094:	10c00217 	ldw	r3,8(r2)
   11098:	10c00315 	stw	r3,12(r2)
		filter_y[2] = filter_y[1];
   1109c:	10c00117 	ldw	r3,4(r2)
   110a0:	10c00215 	stw	r3,8(r2)
		filter_y[1] = filter_y[0];
   110a4:	10c00017 	ldw	r3,0(r2)
   110a8:	10c00115 	stw	r3,4(r2)
		filter_y[0] = y_read;
   110ac:	d8c50017 	ldw	r3,5120(sp)
   110b0:	10c00015 	stw	r3,0(r2)

		for ( int i = 0; i < 5; i++ )
		{
			out_x += h[i]*filter_x[i];
   110b4:	9cc5883a 	add	r2,r19,r19
   110b8:	1305883a 	add	r2,r2,r12
   110bc:	17000017 	ldw	fp,0(r2)
   110c0:	15400117 	ldw	r21,4(r2)
   110c4:	9dc5883a 	add	r2,r19,r23
   110c8:	11000017 	ldw	r4,0(r2)
   110cc:	dac50515 	stw	r11,5140(sp)
   110d0:	db050415 	stw	r12,5136(sp)
   110d4:	00143b80 	call	143b8 <__floatsidf>
   110d8:	e00d883a 	mov	r6,fp
   110dc:	a80f883a 	mov	r7,r21
   110e0:	180b883a 	mov	r5,r3
   110e4:	1009883a 	mov	r4,r2
   110e8:	00131d00 	call	131d0 <__muldf3>
   110ec:	9009883a 	mov	r4,r18
   110f0:	d8c50315 	stw	r3,5132(sp)
   110f4:	d8850215 	stw	r2,5128(sp)
   110f8:	00143b80 	call	143b8 <__floatsidf>
   110fc:	db450217 	ldw	r13,5128(sp)
   11100:	d9450317 	ldw	r5,5132(sp)
   11104:	100d883a 	mov	r6,r2
   11108:	6809883a 	mov	r4,r13
   1110c:	180f883a 	mov	r7,r3
   11110:	0011df00 	call	11df0 <__adddf3>
   11114:	180b883a 	mov	r5,r3
   11118:	1009883a 	mov	r4,r2
   1111c:	00143380 	call	14338 <__fixdfsi>
			out_y += h[i]*filter_y[i];
   11120:	00c000b4 	movhi	r3,2
   11124:	18fecd04 	addi	r3,r3,-1228
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;

		for ( int i = 0; i < 5; i++ )
		{
			out_x += h[i]*filter_x[i];
   11128:	1025883a 	mov	r18,r2
			out_y += h[i]*filter_y[i];
   1112c:	98c5883a 	add	r2,r19,r3
   11130:	11000017 	ldw	r4,0(r2)
   11134:	9cc00104 	addi	r19,r19,4
   11138:	00143b80 	call	143b8 <__floatsidf>
   1113c:	e00d883a 	mov	r6,fp
   11140:	a80f883a 	mov	r7,r21
   11144:	180b883a 	mov	r5,r3
   11148:	1009883a 	mov	r4,r2
   1114c:	00131d00 	call	131d0 <__muldf3>
   11150:	8809883a 	mov	r4,r17
   11154:	1039883a 	mov	fp,r2
   11158:	182b883a 	mov	r21,r3
   1115c:	00143b80 	call	143b8 <__floatsidf>
   11160:	100d883a 	mov	r6,r2
   11164:	180f883a 	mov	r7,r3
   11168:	e009883a 	mov	r4,fp
   1116c:	a80b883a 	mov	r5,r21
   11170:	0011df00 	call	11df0 <__adddf3>
   11174:	1009883a 	mov	r4,r2
   11178:	180b883a 	mov	r5,r3
   1117c:	00143380 	call	14338 <__fixdfsi>
		filter_y[3] = filter_y[2];
		filter_y[2] = filter_y[1];
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;

		for ( int i = 0; i < 5; i++ )
   11180:	dac50517 	ldw	r11,5140(sp)
		{
			out_x += h[i]*filter_x[i];
			out_y += h[i]*filter_y[i];
   11184:	1023883a 	mov	r17,r2
		filter_y[3] = filter_y[2];
		filter_y[2] = filter_y[1];
		filter_y[1] = filter_y[0];
		filter_y[0] = y_read;

		for ( int i = 0; i < 5; i++ )
   11188:	db050417 	ldw	r12,5136(sp)
   1118c:	9affc91e 	bne	r19,r11,110b4 <_gp+0xfffe9fac>
			out_x += h[i]*filter_x[i];
			out_y += h[i]*filter_y[i];
		}

		//sprintf(accel_data_z, "%x", z_read);
		sprintf(accel_data_x, "%x", out_x);
   11190:	014000b4 	movhi	r5,2
   11194:	900d883a 	mov	r6,r18
   11198:	d9040004 	addi	r4,sp,4096
   1119c:	29792b04 	addi	r5,r5,-6996
   111a0:	00150140 	call	15014 <sprintf>
		sprintf(accel_data_y, "%x", out_y);
   111a4:	014000b4 	movhi	r5,2
   111a8:	880d883a 	mov	r6,r17
   111ac:	d9030004 	addi	r4,sp,3072
   111b0:	29792b04 	addi	r5,r5,-6996
   111b4:	00150140 	call	15014 <sprintf>
		alt_printf("%s", "");
   111b8:	014000b4 	movhi	r5,2
   111bc:	010000b4 	movhi	r4,2
   111c0:	29790404 	addi	r5,r5,-7152
   111c4:	21392c04 	addi	r4,r4,-6992
   111c8:	001dc7c0 	call	1dc7c <alt_printf>

		//SWITCH
		//switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		//output_switch( switch_datain, switch_data_old );
		//switch_data_old = switch_datain;
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   111cc:	008000b4 	movhi	r2,2
   111d0:	10842404 	addi	r2,r2,4240
   111d4:	11800037 	ldwio	r6,0(r2)
		sprintf(switch_data, "%x", switch_datain);
   111d8:	014000b4 	movhi	r5,2
   111dc:	29792b04 	addi	r5,r5,-6996
   111e0:	d9020004 	addi	r4,sp,2048
   111e4:	00150140 	call	15014 <sprintf>

		// BUTTON
		//button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		//output_button( button_datain, button_data_old );
		//button_data_old = button_datain;
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   111e8:	00c000b4 	movhi	r3,2
   111ec:	18c42804 	addi	r3,r3,4256
   111f0:	19800037 	ldwio	r6,0(r3)
		sprintf(button_data, "%x", button_datain);
   111f4:	014000b4 	movhi	r5,2
   111f8:	d9010004 	addi	r4,sp,1024
   111fc:	29792b04 	addi	r5,r5,-6996
   11200:	00150140 	call	15014 <sprintf>

		print_data(accel_data_x, accel_data_y, switch_data, button_data);
   11204:	d9820004 	addi	r6,sp,2048
   11208:	d9c10004 	addi	r7,sp,1024
   1120c:	d9430004 	addi	r5,sp,3072
   11210:	d9040004 	addi	r4,sp,4096
   11214:	001023c0 	call	1023c <print_data>

		/* <--> RECIEVING DATA <--> */

		strcpy(to_print, read_chars());
   11218:	00104100 	call	10410 <read_chars>
   1121c:	100b883a 	mov	r5,r2
   11220:	d809883a 	mov	r4,sp
   11224:	00151e40 	call	151e4 <strcpy>
		alt_putstr( to_print );
   11228:	d809883a 	mov	r4,sp
   1122c:	001de340 	call	1de34 <alt_putstr>
			//print(0, 0, 0, 0, 0, 0);
			// Text needs to be of multiple of 6. For now add spaces?
			// W = VV
			// M = nn

		print(getBin(to_print[0]), getBin(to_print[1]), getBin(to_print[2]), getBin(to_print[3]), getBin(to_print[4]), getBin(to_print[5]));
   11230:	d9000007 	ldb	r4,0(sp)
   11234:	0010b200 	call	10b20 <getBin>
   11238:	d9000047 	ldb	r4,1(sp)
   1123c:	d8850215 	stw	r2,5128(sp)
   11240:	0010b200 	call	10b20 <getBin>
   11244:	d9000087 	ldb	r4,2(sp)
   11248:	d8850315 	stw	r2,5132(sp)
   1124c:	0010b200 	call	10b20 <getBin>
   11250:	d90000c7 	ldb	r4,3(sp)
   11254:	1039883a 	mov	fp,r2
   11258:	0010b200 	call	10b20 <getBin>
   1125c:	d9000107 	ldb	r4,4(sp)
   11260:	102b883a 	mov	r21,r2
   11264:	0010b200 	call	10b20 <getBin>
   11268:	d9000147 	ldb	r4,5(sp)
   1126c:	1023883a 	mov	r17,r2
   11270:	0010b200 	call	10b20 <getBin>
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   11274:	d9850217 	ldw	r6,5128(sp)
   11278:	00c000b4 	movhi	r3,2
   1127c:	18c40804 	addi	r3,r3,4128
   11280:	19800035 	stwio	r6,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   11284:	d9450317 	ldw	r5,5132(sp)
   11288:	00c000b4 	movhi	r3,2
   1128c:	18c40c04 	addi	r3,r3,4144
   11290:	19400035 	stwio	r5,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   11294:	00c000b4 	movhi	r3,2
   11298:	18c41004 	addi	r3,r3,4160
   1129c:	1f000035 	stwio	fp,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   112a0:	00c000b4 	movhi	r3,2
   112a4:	18c41404 	addi	r3,r3,4176
   112a8:	1d400035 	stwio	r21,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   112ac:	00c000b4 	movhi	r3,2
   112b0:	18c41804 	addi	r3,r3,4192
   112b4:	1c400035 	stwio	r17,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   112b8:	00c000b4 	movhi	r3,2
   112bc:	18c41c04 	addi	r3,r3,4208
   112c0:	18800035 	stwio	r2,0(r3)
   112c4:	003f5706 	br	11024 <_gp+0xfffe9f1c>



	}
	return 0;
}
   112c8:	00800044 	movi	r2,1
   112cc:	dfc50f17 	ldw	ra,5180(sp)
   112d0:	df050e17 	ldw	fp,5176(sp)
   112d4:	ddc50d17 	ldw	r23,5172(sp)
   112d8:	dd850c17 	ldw	r22,5168(sp)
   112dc:	dd450b17 	ldw	r21,5164(sp)
   112e0:	dd050a17 	ldw	r20,5160(sp)
   112e4:	dcc50917 	ldw	r19,5156(sp)
   112e8:	dc850817 	ldw	r18,5152(sp)
   112ec:	dc450717 	ldw	r17,5148(sp)
   112f0:	dc050617 	ldw	r16,5144(sp)
   112f4:	dec51004 	addi	sp,sp,5184
   112f8:	f800283a 	ret

000112fc <log>:
   112fc:	defff104 	addi	sp,sp,-60
   11300:	dd000d15 	stw	r20,52(sp)
   11304:	050000b4 	movhi	r20,2
   11308:	dcc00c15 	stw	r19,48(sp)
   1130c:	dc800b15 	stw	r18,44(sp)
   11310:	dc400a15 	stw	r17,40(sp)
   11314:	dc000915 	stw	r16,36(sp)
   11318:	dfc00e15 	stw	ra,56(sp)
   1131c:	a53c4404 	addi	r20,r20,-3824
   11320:	2027883a 	mov	r19,r4
   11324:	2825883a 	mov	r18,r5
   11328:	00114980 	call	11498 <__ieee754_log>
   1132c:	1821883a 	mov	r16,r3
   11330:	a0c00017 	ldw	r3,0(r20)
   11334:	1023883a 	mov	r17,r2
   11338:	00bfffc4 	movi	r2,-1
   1133c:	18800a26 	beq	r3,r2,11368 <log+0x6c>
   11340:	9809883a 	mov	r4,r19
   11344:	900b883a 	mov	r5,r18
   11348:	0011bb40 	call	11bb4 <__fpclassifyd>
   1134c:	10000626 	beq	r2,zero,11368 <log+0x6c>
   11350:	000d883a 	mov	r6,zero
   11354:	000f883a 	mov	r7,zero
   11358:	9809883a 	mov	r4,r19
   1135c:	900b883a 	mov	r5,r18
   11360:	00130f40 	call	130f4 <__gedf2>
   11364:	00800a0e 	bge	zero,r2,11390 <log+0x94>
   11368:	8805883a 	mov	r2,r17
   1136c:	8007883a 	mov	r3,r16
   11370:	dfc00e17 	ldw	ra,56(sp)
   11374:	dd000d17 	ldw	r20,52(sp)
   11378:	dcc00c17 	ldw	r19,48(sp)
   1137c:	dc800b17 	ldw	r18,44(sp)
   11380:	dc400a17 	ldw	r17,40(sp)
   11384:	dc000917 	ldw	r16,36(sp)
   11388:	dec00f04 	addi	sp,sp,60
   1138c:	f800283a 	ret
   11390:	008000b4 	movhi	r2,2
   11394:	a4000017 	ldw	r16,0(r20)
   11398:	10b94204 	addi	r2,r2,-6904
   1139c:	d8000815 	stw	zero,32(sp)
   113a0:	d8800115 	stw	r2,4(sp)
   113a4:	dcc00215 	stw	r19,8(sp)
   113a8:	dc800315 	stw	r18,12(sp)
   113ac:	dcc00415 	stw	r19,16(sp)
   113b0:	dc800515 	stw	r18,20(sp)
   113b4:	000d883a 	mov	r6,zero
   113b8:	000f883a 	mov	r7,zero
   113bc:	9809883a 	mov	r4,r19
   113c0:	900b883a 	mov	r5,r18
   113c4:	8000101e 	bne	r16,zero,11408 <log+0x10c>
   113c8:	00b80034 	movhi	r2,57344
   113cc:	d8800615 	stw	r2,24(sp)
   113d0:	00b1fc34 	movhi	r2,51184
   113d4:	10bfffc4 	addi	r2,r2,-1
   113d8:	d8800715 	stw	r2,28(sp)
   113dc:	001306c0 	call	1306c <__eqdf2>
   113e0:	10001f1e 	bne	r2,zero,11460 <log+0x164>
   113e4:	00800084 	movi	r2,2
   113e8:	d8800015 	stw	r2,0(sp)
   113ec:	d809883a 	mov	r4,sp
   113f0:	0011c280 	call	11c28 <matherr>
   113f4:	1000151e 	bne	r2,zero,1144c <log+0x150>
   113f8:	00145fc0 	call	145fc <__errno>
   113fc:	00c00884 	movi	r3,34
   11400:	10c00015 	stw	r3,0(r2)
   11404:	00001106 	br	1144c <log+0x150>
   11408:	00bffc34 	movhi	r2,65520
   1140c:	d8000615 	stw	zero,24(sp)
   11410:	d8800715 	stw	r2,28(sp)
   11414:	001306c0 	call	1306c <__eqdf2>
   11418:	10001726 	beq	r2,zero,11478 <log+0x17c>
   1141c:	00800044 	movi	r2,1
   11420:	d8800015 	stw	r2,0(sp)
   11424:	00800084 	movi	r2,2
   11428:	80800f1e 	bne	r16,r2,11468 <log+0x16c>
   1142c:	00145fc0 	call	145fc <__errno>
   11430:	00c00844 	movi	r3,33
   11434:	10c00015 	stw	r3,0(r2)
   11438:	010000b4 	movhi	r4,2
   1143c:	21390404 	addi	r4,r4,-7152
   11440:	0011c300 	call	11c30 <nan>
   11444:	d8800615 	stw	r2,24(sp)
   11448:	d8c00715 	stw	r3,28(sp)
   1144c:	d8800817 	ldw	r2,32(sp)
   11450:	10000d1e 	bne	r2,zero,11488 <log+0x18c>
   11454:	d8800617 	ldw	r2,24(sp)
   11458:	d8c00717 	ldw	r3,28(sp)
   1145c:	003fc406 	br	11370 <_gp+0xfffea268>
   11460:	00800044 	movi	r2,1
   11464:	d8800015 	stw	r2,0(sp)
   11468:	d809883a 	mov	r4,sp
   1146c:	0011c280 	call	11c28 <matherr>
   11470:	103ff11e 	bne	r2,zero,11438 <_gp+0xfffea330>
   11474:	003fed06 	br	1142c <_gp+0xfffea324>
   11478:	00800084 	movi	r2,2
   1147c:	d8800015 	stw	r2,0(sp)
   11480:	80bfdd26 	beq	r16,r2,113f8 <_gp+0xfffea2f0>
   11484:	003fd906 	br	113ec <_gp+0xfffea2e4>
   11488:	00145fc0 	call	145fc <__errno>
   1148c:	d8c00817 	ldw	r3,32(sp)
   11490:	10c00015 	stw	r3,0(r2)
   11494:	003fef06 	br	11454 <_gp+0xfffea34c>

00011498 <__ieee754_log>:
   11498:	defff204 	addi	sp,sp,-56
   1149c:	01800434 	movhi	r6,16
   114a0:	dfc00d15 	stw	ra,52(sp)
   114a4:	df000c15 	stw	fp,48(sp)
   114a8:	ddc00b15 	stw	r23,44(sp)
   114ac:	dd800a15 	stw	r22,40(sp)
   114b0:	dd400915 	stw	r21,36(sp)
   114b4:	dd000815 	stw	r20,32(sp)
   114b8:	dcc00715 	stw	r19,28(sp)
   114bc:	dc800615 	stw	r18,24(sp)
   114c0:	dc400515 	stw	r17,20(sp)
   114c4:	dc000415 	stw	r16,16(sp)
   114c8:	31bfffc4 	addi	r6,r6,-1
   114cc:	280f883a 	mov	r7,r5
   114d0:	2005883a 	mov	r2,r4
   114d4:	31404616 	blt	r6,r5,115f0 <__ieee754_log+0x158>
   114d8:	00e00034 	movhi	r3,32768
   114dc:	18ffffc4 	addi	r3,r3,-1
   114e0:	28c6703a 	and	r3,r5,r3
   114e4:	1906b03a 	or	r3,r3,r4
   114e8:	1800f426 	beq	r3,zero,118bc <__ieee754_log+0x424>
   114ec:	28017816 	blt	r5,zero,11ad0 <__ieee754_log+0x638>
   114f0:	01d0d434 	movhi	r7,17232
   114f4:	000d883a 	mov	r6,zero
   114f8:	00131d00 	call	131d0 <__muldf3>
   114fc:	015ffc34 	movhi	r5,32752
   11500:	297fffc4 	addi	r5,r5,-1
   11504:	180f883a 	mov	r7,r3
   11508:	013ff284 	movi	r4,-54
   1150c:	28c03d16 	blt	r5,r3,11604 <__ieee754_log+0x16c>
   11510:	04c00434 	movhi	r19,16
   11514:	9cffffc4 	addi	r19,r19,-1
   11518:	01400274 	movhi	r5,9
   1151c:	1cf8703a 	and	fp,r3,r19
   11520:	2957d904 	addi	r5,r5,24420
   11524:	1821d53a 	srai	r16,r3,20
   11528:	e14b883a 	add	r5,fp,r5
   1152c:	2940042c 	andhi	r5,r5,16
   11530:	2807d53a 	srai	r3,r5,20
   11534:	843f0044 	addi	r16,r16,-1023
   11538:	294ffc3c 	xorhi	r5,r5,16368
   1153c:	8121883a 	add	r16,r16,r4
   11540:	000d883a 	mov	r6,zero
   11544:	01cffc34 	movhi	r7,16368
   11548:	1009883a 	mov	r4,r2
   1154c:	2f0ab03a 	or	r5,r5,fp
   11550:	1c21883a 	add	r16,r3,r16
   11554:	0013a3c0 	call	13a3c <__subdf3>
   11558:	1025883a 	mov	r18,r2
   1155c:	e0800084 	addi	r2,fp,2
   11560:	14e6703a 	and	r19,r2,r19
   11564:	00800084 	movi	r2,2
   11568:	1823883a 	mov	r17,r3
   1156c:	000d883a 	mov	r6,zero
   11570:	14c03416 	blt	r2,r19,11644 <__ieee754_log+0x1ac>
   11574:	000f883a 	mov	r7,zero
   11578:	9009883a 	mov	r4,r18
   1157c:	180b883a 	mov	r5,r3
   11580:	001306c0 	call	1306c <__eqdf2>
   11584:	1000d31e 	bne	r2,zero,118d4 <__ieee754_log+0x43c>
   11588:	80015926 	beq	r16,zero,11af0 <__ieee754_log+0x658>
   1158c:	8009883a 	mov	r4,r16
   11590:	00143b80 	call	143b8 <__floatsidf>
   11594:	01cff9b4 	movhi	r7,16358
   11598:	39cb9084 	addi	r7,r7,11842
   1159c:	01bfb834 	movhi	r6,65248
   115a0:	1009883a 	mov	r4,r2
   115a4:	180b883a 	mov	r5,r3
   115a8:	1023883a 	mov	r17,r2
   115ac:	1821883a 	mov	r16,r3
   115b0:	00131d00 	call	131d0 <__muldf3>
   115b4:	018d5e74 	movhi	r6,13689
   115b8:	01cf7ab4 	movhi	r7,15850
   115bc:	8809883a 	mov	r4,r17
   115c0:	800b883a 	mov	r5,r16
   115c4:	318f1d84 	addi	r6,r6,15478
   115c8:	39ce7bc4 	addi	r7,r7,14831
   115cc:	1027883a 	mov	r19,r2
   115d0:	1825883a 	mov	r18,r3
   115d4:	00131d00 	call	131d0 <__muldf3>
   115d8:	100d883a 	mov	r6,r2
   115dc:	180f883a 	mov	r7,r3
   115e0:	9809883a 	mov	r4,r19
   115e4:	900b883a 	mov	r5,r18
   115e8:	0011df00 	call	11df0 <__adddf3>
   115ec:	00000906 	br	11614 <__ieee754_log+0x17c>
   115f0:	2807883a 	mov	r3,r5
   115f4:	015ffc34 	movhi	r5,32752
   115f8:	297fffc4 	addi	r5,r5,-1
   115fc:	0009883a 	mov	r4,zero
   11600:	28ffc30e 	bge	r5,r3,11510 <_gp+0xfffea408>
   11604:	100d883a 	mov	r6,r2
   11608:	1009883a 	mov	r4,r2
   1160c:	380b883a 	mov	r5,r7
   11610:	0011df00 	call	11df0 <__adddf3>
   11614:	dfc00d17 	ldw	ra,52(sp)
   11618:	df000c17 	ldw	fp,48(sp)
   1161c:	ddc00b17 	ldw	r23,44(sp)
   11620:	dd800a17 	ldw	r22,40(sp)
   11624:	dd400917 	ldw	r21,36(sp)
   11628:	dd000817 	ldw	r20,32(sp)
   1162c:	dcc00717 	ldw	r19,28(sp)
   11630:	dc800617 	ldw	r18,24(sp)
   11634:	dc400517 	ldw	r17,20(sp)
   11638:	dc000417 	ldw	r16,16(sp)
   1163c:	dec00e04 	addi	sp,sp,56
   11640:	f800283a 	ret
   11644:	01d00034 	movhi	r7,16384
   11648:	9009883a 	mov	r4,r18
   1164c:	180b883a 	mov	r5,r3
   11650:	0011df00 	call	11df0 <__adddf3>
   11654:	100d883a 	mov	r6,r2
   11658:	180f883a 	mov	r7,r3
   1165c:	880b883a 	mov	r5,r17
   11660:	9009883a 	mov	r4,r18
   11664:	001269c0 	call	1269c <__divdf3>
   11668:	8009883a 	mov	r4,r16
   1166c:	102d883a 	mov	r22,r2
   11670:	182b883a 	mov	r21,r3
   11674:	00143b80 	call	143b8 <__floatsidf>
   11678:	b00d883a 	mov	r6,r22
   1167c:	a80f883a 	mov	r7,r21
   11680:	b009883a 	mov	r4,r22
   11684:	a80b883a 	mov	r5,r21
   11688:	d8800015 	stw	r2,0(sp)
   1168c:	d8c00115 	stw	r3,4(sp)
   11690:	00131d00 	call	131d0 <__muldf3>
   11694:	027ffeb4 	movhi	r9,65530
   11698:	4a7ae184 	addi	r9,r9,-5242
   1169c:	100d883a 	mov	r6,r2
   116a0:	180f883a 	mov	r7,r3
   116a4:	1009883a 	mov	r4,r2
   116a8:	180b883a 	mov	r5,r3
   116ac:	e26f883a 	add	r23,fp,r9
   116b0:	d8c00315 	stw	r3,12(sp)
   116b4:	d8800215 	stw	r2,8(sp)
   116b8:	00131d00 	call	131d0 <__muldf3>
   116bc:	01b7cfb4 	movhi	r6,57150
   116c0:	01cff0f4 	movhi	r7,16323
   116c4:	31949104 	addi	r6,r6,21060
   116c8:	39fc4484 	addi	r7,r7,-3822
   116cc:	1009883a 	mov	r4,r2
   116d0:	180b883a 	mov	r5,r3
   116d4:	1029883a 	mov	r20,r2
   116d8:	1827883a 	mov	r19,r3
   116dc:	00131d00 	call	131d0 <__muldf3>
   116e0:	01a5b2f4 	movhi	r6,38603
   116e4:	01cff1f4 	movhi	r7,16327
   116e8:	3180f784 	addi	r6,r6,990
   116ec:	39d19904 	addi	r7,r7,18020
   116f0:	1009883a 	mov	r4,r2
   116f4:	180b883a 	mov	r5,r3
   116f8:	0011df00 	call	11df0 <__adddf3>
   116fc:	a00d883a 	mov	r6,r20
   11700:	980f883a 	mov	r7,r19
   11704:	1009883a 	mov	r4,r2
   11708:	180b883a 	mov	r5,r3
   1170c:	00131d00 	call	131d0 <__muldf3>
   11710:	01a508f4 	movhi	r6,37923
   11714:	01cff4b4 	movhi	r7,16338
   11718:	31a4d644 	addi	r6,r6,-27815
   1171c:	39d24904 	addi	r7,r7,18724
   11720:	1009883a 	mov	r4,r2
   11724:	180b883a 	mov	r5,r3
   11728:	0011df00 	call	11df0 <__adddf3>
   1172c:	a00d883a 	mov	r6,r20
   11730:	980f883a 	mov	r7,r19
   11734:	1009883a 	mov	r4,r2
   11738:	180b883a 	mov	r5,r3
   1173c:	00131d00 	call	131d0 <__muldf3>
   11740:	01955574 	movhi	r6,21845
   11744:	01cff974 	movhi	r7,16357
   11748:	319564c4 	addi	r6,r6,21907
   1174c:	39d55544 	addi	r7,r7,21845
   11750:	1009883a 	mov	r4,r2
   11754:	180b883a 	mov	r5,r3
   11758:	0011df00 	call	11df0 <__adddf3>
   1175c:	dac00217 	ldw	r11,8(sp)
   11760:	da800317 	ldw	r10,12(sp)
   11764:	1009883a 	mov	r4,r2
   11768:	580d883a 	mov	r6,r11
   1176c:	500f883a 	mov	r7,r10
   11770:	180b883a 	mov	r5,r3
   11774:	00131d00 	call	131d0 <__muldf3>
   11778:	01b41e74 	movhi	r6,53369
   1177c:	01cff134 	movhi	r7,16324
   11780:	a009883a 	mov	r4,r20
   11784:	980b883a 	mov	r5,r19
   11788:	31b1a7c4 	addi	r6,r6,-14689
   1178c:	39e68244 	addi	r7,r7,-26103
   11790:	d8c00315 	stw	r3,12(sp)
   11794:	d8800215 	stw	r2,8(sp)
   11798:	00131d00 	call	131d0 <__muldf3>
   1179c:	018763b4 	movhi	r6,7566
   117a0:	01cff334 	movhi	r7,16332
   117a4:	319e2bc4 	addi	r6,r6,30895
   117a8:	39dc7144 	addi	r7,r7,29125
   117ac:	1009883a 	mov	r4,r2
   117b0:	180b883a 	mov	r5,r3
   117b4:	0011df00 	call	11df0 <__adddf3>
   117b8:	a00d883a 	mov	r6,r20
   117bc:	980f883a 	mov	r7,r19
   117c0:	1009883a 	mov	r4,r2
   117c4:	180b883a 	mov	r5,r3
   117c8:	00131d00 	call	131d0 <__muldf3>
   117cc:	01a66634 	movhi	r6,39320
   117d0:	01cff6b4 	movhi	r7,16346
   117d4:	31be8104 	addi	r6,r6,-1532
   117d8:	39e66644 	addi	r7,r7,-26215
   117dc:	1009883a 	mov	r4,r2
   117e0:	180b883a 	mov	r5,r3
   117e4:	0011df00 	call	11df0 <__adddf3>
   117e8:	a00d883a 	mov	r6,r20
   117ec:	980f883a 	mov	r7,r19
   117f0:	1009883a 	mov	r4,r2
   117f4:	180b883a 	mov	r5,r3
   117f8:	00131d00 	call	131d0 <__muldf3>
   117fc:	dac00217 	ldw	r11,8(sp)
   11800:	da800317 	ldw	r10,12(sp)
   11804:	100d883a 	mov	r6,r2
   11808:	180f883a 	mov	r7,r3
   1180c:	5809883a 	mov	r4,r11
   11810:	500b883a 	mov	r5,r10
   11814:	0011df00 	call	11df0 <__adddf3>
   11818:	1827883a 	mov	r19,r3
   1181c:	00c001f4 	movhi	r3,7
   11820:	18ee1444 	addi	r3,r3,-18351
   11824:	1f07c83a 	sub	r3,r3,fp
   11828:	1dd2b03a 	or	r9,r3,r23
   1182c:	1029883a 	mov	r20,r2
   11830:	0240490e 	bge	zero,r9,11958 <__ieee754_log+0x4c0>
   11834:	000d883a 	mov	r6,zero
   11838:	01cff834 	movhi	r7,16352
   1183c:	9009883a 	mov	r4,r18
   11840:	880b883a 	mov	r5,r17
   11844:	00131d00 	call	131d0 <__muldf3>
   11848:	900d883a 	mov	r6,r18
   1184c:	880f883a 	mov	r7,r17
   11850:	1009883a 	mov	r4,r2
   11854:	180b883a 	mov	r5,r3
   11858:	00131d00 	call	131d0 <__muldf3>
   1185c:	1039883a 	mov	fp,r2
   11860:	182f883a 	mov	r23,r3
   11864:	8000691e 	bne	r16,zero,11a0c <__ieee754_log+0x574>
   11868:	100d883a 	mov	r6,r2
   1186c:	180f883a 	mov	r7,r3
   11870:	a009883a 	mov	r4,r20
   11874:	980b883a 	mov	r5,r19
   11878:	0011df00 	call	11df0 <__adddf3>
   1187c:	b00d883a 	mov	r6,r22
   11880:	a80f883a 	mov	r7,r21
   11884:	1009883a 	mov	r4,r2
   11888:	180b883a 	mov	r5,r3
   1188c:	00131d00 	call	131d0 <__muldf3>
   11890:	100d883a 	mov	r6,r2
   11894:	180f883a 	mov	r7,r3
   11898:	e009883a 	mov	r4,fp
   1189c:	b80b883a 	mov	r5,r23
   118a0:	0013a3c0 	call	13a3c <__subdf3>
   118a4:	100d883a 	mov	r6,r2
   118a8:	180f883a 	mov	r7,r3
   118ac:	9009883a 	mov	r4,r18
   118b0:	880b883a 	mov	r5,r17
   118b4:	0013a3c0 	call	13a3c <__subdf3>
   118b8:	003f5606 	br	11614 <_gp+0xfffea50c>
   118bc:	000d883a 	mov	r6,zero
   118c0:	000f883a 	mov	r7,zero
   118c4:	0009883a 	mov	r4,zero
   118c8:	0170d434 	movhi	r5,50000
   118cc:	001269c0 	call	1269c <__divdf3>
   118d0:	003f5006 	br	11614 <_gp+0xfffea50c>
   118d4:	01955574 	movhi	r6,21845
   118d8:	01cff574 	movhi	r7,16341
   118dc:	31955544 	addi	r6,r6,21845
   118e0:	39d55544 	addi	r7,r7,21845
   118e4:	9009883a 	mov	r4,r18
   118e8:	880b883a 	mov	r5,r17
   118ec:	00131d00 	call	131d0 <__muldf3>
   118f0:	100d883a 	mov	r6,r2
   118f4:	180f883a 	mov	r7,r3
   118f8:	0009883a 	mov	r4,zero
   118fc:	014ff834 	movhi	r5,16352
   11900:	0013a3c0 	call	13a3c <__subdf3>
   11904:	900d883a 	mov	r6,r18
   11908:	880f883a 	mov	r7,r17
   1190c:	9009883a 	mov	r4,r18
   11910:	880b883a 	mov	r5,r17
   11914:	1029883a 	mov	r20,r2
   11918:	1827883a 	mov	r19,r3
   1191c:	00131d00 	call	131d0 <__muldf3>
   11920:	a009883a 	mov	r4,r20
   11924:	980b883a 	mov	r5,r19
   11928:	100d883a 	mov	r6,r2
   1192c:	180f883a 	mov	r7,r3
   11930:	00131d00 	call	131d0 <__muldf3>
   11934:	1029883a 	mov	r20,r2
   11938:	1827883a 	mov	r19,r3
   1193c:	80006f1e 	bne	r16,zero,11afc <__ieee754_log+0x664>
   11940:	100d883a 	mov	r6,r2
   11944:	180f883a 	mov	r7,r3
   11948:	9009883a 	mov	r4,r18
   1194c:	880b883a 	mov	r5,r17
   11950:	0013a3c0 	call	13a3c <__subdf3>
   11954:	003f2f06 	br	11614 <_gp+0xfffea50c>
   11958:	80008b26 	beq	r16,zero,11b88 <__ieee754_log+0x6f0>
   1195c:	d9000017 	ldw	r4,0(sp)
   11960:	d9400117 	ldw	r5,4(sp)
   11964:	01cff9b4 	movhi	r7,16358
   11968:	39cb9084 	addi	r7,r7,11842
   1196c:	01bfb834 	movhi	r6,65248
   11970:	00131d00 	call	131d0 <__muldf3>
   11974:	a00d883a 	mov	r6,r20
   11978:	980f883a 	mov	r7,r19
   1197c:	9009883a 	mov	r4,r18
   11980:	880b883a 	mov	r5,r17
   11984:	1821883a 	mov	r16,r3
   11988:	d8800215 	stw	r2,8(sp)
   1198c:	0013a3c0 	call	13a3c <__subdf3>
   11990:	b00d883a 	mov	r6,r22
   11994:	a80f883a 	mov	r7,r21
   11998:	1009883a 	mov	r4,r2
   1199c:	180b883a 	mov	r5,r3
   119a0:	00131d00 	call	131d0 <__muldf3>
   119a4:	d9000017 	ldw	r4,0(sp)
   119a8:	d9400117 	ldw	r5,4(sp)
   119ac:	018d5e74 	movhi	r6,13689
   119b0:	01cf7ab4 	movhi	r7,15850
   119b4:	318f1d84 	addi	r6,r6,15478
   119b8:	39ce7bc4 	addi	r7,r7,14831
   119bc:	1029883a 	mov	r20,r2
   119c0:	1827883a 	mov	r19,r3
   119c4:	00131d00 	call	131d0 <__muldf3>
   119c8:	a009883a 	mov	r4,r20
   119cc:	980b883a 	mov	r5,r19
   119d0:	100d883a 	mov	r6,r2
   119d4:	180f883a 	mov	r7,r3
   119d8:	0013a3c0 	call	13a3c <__subdf3>
   119dc:	900d883a 	mov	r6,r18
   119e0:	880f883a 	mov	r7,r17
   119e4:	1009883a 	mov	r4,r2
   119e8:	180b883a 	mov	r5,r3
   119ec:	0013a3c0 	call	13a3c <__subdf3>
   119f0:	da000217 	ldw	r8,8(sp)
   119f4:	100d883a 	mov	r6,r2
   119f8:	180f883a 	mov	r7,r3
   119fc:	4009883a 	mov	r4,r8
   11a00:	800b883a 	mov	r5,r16
   11a04:	0013a3c0 	call	13a3c <__subdf3>
   11a08:	003f0206 	br	11614 <_gp+0xfffea50c>
   11a0c:	d9000017 	ldw	r4,0(sp)
   11a10:	d9400117 	ldw	r5,4(sp)
   11a14:	01cff9b4 	movhi	r7,16358
   11a18:	39cb9084 	addi	r7,r7,11842
   11a1c:	01bfb834 	movhi	r6,65248
   11a20:	00131d00 	call	131d0 <__muldf3>
   11a24:	e00d883a 	mov	r6,fp
   11a28:	b80f883a 	mov	r7,r23
   11a2c:	a009883a 	mov	r4,r20
   11a30:	980b883a 	mov	r5,r19
   11a34:	1821883a 	mov	r16,r3
   11a38:	d8800315 	stw	r2,12(sp)
   11a3c:	0011df00 	call	11df0 <__adddf3>
   11a40:	b00d883a 	mov	r6,r22
   11a44:	a80f883a 	mov	r7,r21
   11a48:	1009883a 	mov	r4,r2
   11a4c:	180b883a 	mov	r5,r3
   11a50:	00131d00 	call	131d0 <__muldf3>
   11a54:	d9000017 	ldw	r4,0(sp)
   11a58:	d9400117 	ldw	r5,4(sp)
   11a5c:	018d5e74 	movhi	r6,13689
   11a60:	01cf7ab4 	movhi	r7,15850
   11a64:	318f1d84 	addi	r6,r6,15478
   11a68:	39ce7bc4 	addi	r7,r7,14831
   11a6c:	1029883a 	mov	r20,r2
   11a70:	1827883a 	mov	r19,r3
   11a74:	00131d00 	call	131d0 <__muldf3>
   11a78:	a009883a 	mov	r4,r20
   11a7c:	980b883a 	mov	r5,r19
   11a80:	100d883a 	mov	r6,r2
   11a84:	180f883a 	mov	r7,r3
   11a88:	0011df00 	call	11df0 <__adddf3>
   11a8c:	e009883a 	mov	r4,fp
   11a90:	b80b883a 	mov	r5,r23
   11a94:	100d883a 	mov	r6,r2
   11a98:	180f883a 	mov	r7,r3
   11a9c:	0013a3c0 	call	13a3c <__subdf3>
   11aa0:	900d883a 	mov	r6,r18
   11aa4:	880f883a 	mov	r7,r17
   11aa8:	1009883a 	mov	r4,r2
   11aac:	180b883a 	mov	r5,r3
   11ab0:	0013a3c0 	call	13a3c <__subdf3>
   11ab4:	da800317 	ldw	r10,12(sp)
   11ab8:	100d883a 	mov	r6,r2
   11abc:	180f883a 	mov	r7,r3
   11ac0:	5009883a 	mov	r4,r10
   11ac4:	800b883a 	mov	r5,r16
   11ac8:	0013a3c0 	call	13a3c <__subdf3>
   11acc:	003ed106 	br	11614 <_gp+0xfffea50c>
   11ad0:	200d883a 	mov	r6,r4
   11ad4:	0013a3c0 	call	13a3c <__subdf3>
   11ad8:	000d883a 	mov	r6,zero
   11adc:	000f883a 	mov	r7,zero
   11ae0:	1009883a 	mov	r4,r2
   11ae4:	180b883a 	mov	r5,r3
   11ae8:	001269c0 	call	1269c <__divdf3>
   11aec:	003ec906 	br	11614 <_gp+0xfffea50c>
   11af0:	0005883a 	mov	r2,zero
   11af4:	0007883a 	mov	r3,zero
   11af8:	003ec606 	br	11614 <_gp+0xfffea50c>
   11afc:	8009883a 	mov	r4,r16
   11b00:	00143b80 	call	143b8 <__floatsidf>
   11b04:	01cff9b4 	movhi	r7,16358
   11b08:	39cb9084 	addi	r7,r7,11842
   11b0c:	01bfb834 	movhi	r6,65248
   11b10:	1009883a 	mov	r4,r2
   11b14:	180b883a 	mov	r5,r3
   11b18:	102b883a 	mov	r21,r2
   11b1c:	1821883a 	mov	r16,r3
   11b20:	00131d00 	call	131d0 <__muldf3>
   11b24:	018d5e74 	movhi	r6,13689
   11b28:	01cf7ab4 	movhi	r7,15850
   11b2c:	a809883a 	mov	r4,r21
   11b30:	800b883a 	mov	r5,r16
   11b34:	318f1d84 	addi	r6,r6,15478
   11b38:	39ce7bc4 	addi	r7,r7,14831
   11b3c:	102f883a 	mov	r23,r2
   11b40:	182d883a 	mov	r22,r3
   11b44:	00131d00 	call	131d0 <__muldf3>
   11b48:	a009883a 	mov	r4,r20
   11b4c:	980b883a 	mov	r5,r19
   11b50:	100d883a 	mov	r6,r2
   11b54:	180f883a 	mov	r7,r3
   11b58:	0013a3c0 	call	13a3c <__subdf3>
   11b5c:	900d883a 	mov	r6,r18
   11b60:	880f883a 	mov	r7,r17
   11b64:	1009883a 	mov	r4,r2
   11b68:	180b883a 	mov	r5,r3
   11b6c:	0013a3c0 	call	13a3c <__subdf3>
   11b70:	100d883a 	mov	r6,r2
   11b74:	180f883a 	mov	r7,r3
   11b78:	b809883a 	mov	r4,r23
   11b7c:	b00b883a 	mov	r5,r22
   11b80:	0013a3c0 	call	13a3c <__subdf3>
   11b84:	003ea306 	br	11614 <_gp+0xfffea50c>
   11b88:	a00d883a 	mov	r6,r20
   11b8c:	980f883a 	mov	r7,r19
   11b90:	9009883a 	mov	r4,r18
   11b94:	880b883a 	mov	r5,r17
   11b98:	0013a3c0 	call	13a3c <__subdf3>
   11b9c:	b00d883a 	mov	r6,r22
   11ba0:	a80f883a 	mov	r7,r21
   11ba4:	1009883a 	mov	r4,r2
   11ba8:	180b883a 	mov	r5,r3
   11bac:	00131d00 	call	131d0 <__muldf3>
   11bb0:	003f3c06 	br	118a4 <_gp+0xfffea79c>

00011bb4 <__fpclassifyd>:
   11bb4:	00a00034 	movhi	r2,32768
   11bb8:	10bfffc4 	addi	r2,r2,-1
   11bbc:	2884703a 	and	r2,r5,r2
   11bc0:	10000726 	beq	r2,zero,11be0 <__fpclassifyd+0x2c>
   11bc4:	00fffc34 	movhi	r3,65520
   11bc8:	019ff834 	movhi	r6,32736
   11bcc:	28c7883a 	add	r3,r5,r3
   11bd0:	31bfffc4 	addi	r6,r6,-1
   11bd4:	30c00536 	bltu	r6,r3,11bec <__fpclassifyd+0x38>
   11bd8:	00800104 	movi	r2,4
   11bdc:	f800283a 	ret
   11be0:	2000021e 	bne	r4,zero,11bec <__fpclassifyd+0x38>
   11be4:	00800084 	movi	r2,2
   11be8:	f800283a 	ret
   11bec:	00dffc34 	movhi	r3,32752
   11bf0:	019ff834 	movhi	r6,32736
   11bf4:	28cb883a 	add	r5,r5,r3
   11bf8:	31bfffc4 	addi	r6,r6,-1
   11bfc:	317ff62e 	bgeu	r6,r5,11bd8 <_gp+0xfffeaad0>
   11c00:	01400434 	movhi	r5,16
   11c04:	297fffc4 	addi	r5,r5,-1
   11c08:	28800236 	bltu	r5,r2,11c14 <__fpclassifyd+0x60>
   11c0c:	008000c4 	movi	r2,3
   11c10:	f800283a 	ret
   11c14:	10c00226 	beq	r2,r3,11c20 <__fpclassifyd+0x6c>
   11c18:	0005883a 	mov	r2,zero
   11c1c:	f800283a 	ret
   11c20:	2005003a 	cmpeq	r2,r4,zero
   11c24:	f800283a 	ret

00011c28 <matherr>:
   11c28:	0005883a 	mov	r2,zero
   11c2c:	f800283a 	ret

00011c30 <nan>:
   11c30:	0005883a 	mov	r2,zero
   11c34:	00dffe34 	movhi	r3,32760
   11c38:	f800283a 	ret

00011c3c <__divsi3>:
   11c3c:	20001b16 	blt	r4,zero,11cac <__divsi3+0x70>
   11c40:	000f883a 	mov	r7,zero
   11c44:	28001616 	blt	r5,zero,11ca0 <__divsi3+0x64>
   11c48:	200d883a 	mov	r6,r4
   11c4c:	29001a2e 	bgeu	r5,r4,11cb8 <__divsi3+0x7c>
   11c50:	00800804 	movi	r2,32
   11c54:	00c00044 	movi	r3,1
   11c58:	00000106 	br	11c60 <__divsi3+0x24>
   11c5c:	10000d26 	beq	r2,zero,11c94 <__divsi3+0x58>
   11c60:	294b883a 	add	r5,r5,r5
   11c64:	10bfffc4 	addi	r2,r2,-1
   11c68:	18c7883a 	add	r3,r3,r3
   11c6c:	293ffb36 	bltu	r5,r4,11c5c <_gp+0xfffeab54>
   11c70:	0005883a 	mov	r2,zero
   11c74:	18000726 	beq	r3,zero,11c94 <__divsi3+0x58>
   11c78:	0005883a 	mov	r2,zero
   11c7c:	31400236 	bltu	r6,r5,11c88 <__divsi3+0x4c>
   11c80:	314dc83a 	sub	r6,r6,r5
   11c84:	10c4b03a 	or	r2,r2,r3
   11c88:	1806d07a 	srli	r3,r3,1
   11c8c:	280ad07a 	srli	r5,r5,1
   11c90:	183ffa1e 	bne	r3,zero,11c7c <_gp+0xfffeab74>
   11c94:	38000126 	beq	r7,zero,11c9c <__divsi3+0x60>
   11c98:	0085c83a 	sub	r2,zero,r2
   11c9c:	f800283a 	ret
   11ca0:	014bc83a 	sub	r5,zero,r5
   11ca4:	39c0005c 	xori	r7,r7,1
   11ca8:	003fe706 	br	11c48 <_gp+0xfffeab40>
   11cac:	0109c83a 	sub	r4,zero,r4
   11cb0:	01c00044 	movi	r7,1
   11cb4:	003fe306 	br	11c44 <_gp+0xfffeab3c>
   11cb8:	00c00044 	movi	r3,1
   11cbc:	003fee06 	br	11c78 <_gp+0xfffeab70>

00011cc0 <__modsi3>:
   11cc0:	20001716 	blt	r4,zero,11d20 <__modsi3+0x60>
   11cc4:	000f883a 	mov	r7,zero
   11cc8:	2005883a 	mov	r2,r4
   11ccc:	28001216 	blt	r5,zero,11d18 <__modsi3+0x58>
   11cd0:	2900162e 	bgeu	r5,r4,11d2c <__modsi3+0x6c>
   11cd4:	01800804 	movi	r6,32
   11cd8:	00c00044 	movi	r3,1
   11cdc:	00000106 	br	11ce4 <__modsi3+0x24>
   11ce0:	30000a26 	beq	r6,zero,11d0c <__modsi3+0x4c>
   11ce4:	294b883a 	add	r5,r5,r5
   11ce8:	31bfffc4 	addi	r6,r6,-1
   11cec:	18c7883a 	add	r3,r3,r3
   11cf0:	293ffb36 	bltu	r5,r4,11ce0 <_gp+0xfffeabd8>
   11cf4:	18000526 	beq	r3,zero,11d0c <__modsi3+0x4c>
   11cf8:	1806d07a 	srli	r3,r3,1
   11cfc:	11400136 	bltu	r2,r5,11d04 <__modsi3+0x44>
   11d00:	1145c83a 	sub	r2,r2,r5
   11d04:	280ad07a 	srli	r5,r5,1
   11d08:	183ffb1e 	bne	r3,zero,11cf8 <_gp+0xfffeabf0>
   11d0c:	38000126 	beq	r7,zero,11d14 <__modsi3+0x54>
   11d10:	0085c83a 	sub	r2,zero,r2
   11d14:	f800283a 	ret
   11d18:	014bc83a 	sub	r5,zero,r5
   11d1c:	003fec06 	br	11cd0 <_gp+0xfffeabc8>
   11d20:	0109c83a 	sub	r4,zero,r4
   11d24:	01c00044 	movi	r7,1
   11d28:	003fe706 	br	11cc8 <_gp+0xfffeabc0>
   11d2c:	00c00044 	movi	r3,1
   11d30:	003ff106 	br	11cf8 <_gp+0xfffeabf0>

00011d34 <__udivsi3>:
   11d34:	200d883a 	mov	r6,r4
   11d38:	2900152e 	bgeu	r5,r4,11d90 <__udivsi3+0x5c>
   11d3c:	28001416 	blt	r5,zero,11d90 <__udivsi3+0x5c>
   11d40:	00800804 	movi	r2,32
   11d44:	00c00044 	movi	r3,1
   11d48:	00000206 	br	11d54 <__udivsi3+0x20>
   11d4c:	10000e26 	beq	r2,zero,11d88 <__udivsi3+0x54>
   11d50:	28000516 	blt	r5,zero,11d68 <__udivsi3+0x34>
   11d54:	294b883a 	add	r5,r5,r5
   11d58:	10bfffc4 	addi	r2,r2,-1
   11d5c:	18c7883a 	add	r3,r3,r3
   11d60:	293ffa36 	bltu	r5,r4,11d4c <_gp+0xfffeac44>
   11d64:	18000826 	beq	r3,zero,11d88 <__udivsi3+0x54>
   11d68:	0005883a 	mov	r2,zero
   11d6c:	31400236 	bltu	r6,r5,11d78 <__udivsi3+0x44>
   11d70:	314dc83a 	sub	r6,r6,r5
   11d74:	10c4b03a 	or	r2,r2,r3
   11d78:	1806d07a 	srli	r3,r3,1
   11d7c:	280ad07a 	srli	r5,r5,1
   11d80:	183ffa1e 	bne	r3,zero,11d6c <_gp+0xfffeac64>
   11d84:	f800283a 	ret
   11d88:	0005883a 	mov	r2,zero
   11d8c:	f800283a 	ret
   11d90:	00c00044 	movi	r3,1
   11d94:	003ff406 	br	11d68 <_gp+0xfffeac60>

00011d98 <__umodsi3>:
   11d98:	2005883a 	mov	r2,r4
   11d9c:	2900122e 	bgeu	r5,r4,11de8 <__umodsi3+0x50>
   11da0:	28001116 	blt	r5,zero,11de8 <__umodsi3+0x50>
   11da4:	01800804 	movi	r6,32
   11da8:	00c00044 	movi	r3,1
   11dac:	00000206 	br	11db8 <__umodsi3+0x20>
   11db0:	30000c26 	beq	r6,zero,11de4 <__umodsi3+0x4c>
   11db4:	28000516 	blt	r5,zero,11dcc <__umodsi3+0x34>
   11db8:	294b883a 	add	r5,r5,r5
   11dbc:	31bfffc4 	addi	r6,r6,-1
   11dc0:	18c7883a 	add	r3,r3,r3
   11dc4:	293ffa36 	bltu	r5,r4,11db0 <_gp+0xfffeaca8>
   11dc8:	18000626 	beq	r3,zero,11de4 <__umodsi3+0x4c>
   11dcc:	1806d07a 	srli	r3,r3,1
   11dd0:	11400136 	bltu	r2,r5,11dd8 <__umodsi3+0x40>
   11dd4:	1145c83a 	sub	r2,r2,r5
   11dd8:	280ad07a 	srli	r5,r5,1
   11ddc:	183ffb1e 	bne	r3,zero,11dcc <_gp+0xfffeacc4>
   11de0:	f800283a 	ret
   11de4:	f800283a 	ret
   11de8:	00c00044 	movi	r3,1
   11dec:	003ff706 	br	11dcc <_gp+0xfffeacc4>

00011df0 <__adddf3>:
   11df0:	02c00434 	movhi	r11,16
   11df4:	5affffc4 	addi	r11,r11,-1
   11df8:	2806d7fa 	srli	r3,r5,31
   11dfc:	2ad4703a 	and	r10,r5,r11
   11e00:	3ad2703a 	and	r9,r7,r11
   11e04:	3804d53a 	srli	r2,r7,20
   11e08:	3018d77a 	srli	r12,r6,29
   11e0c:	280ad53a 	srli	r5,r5,20
   11e10:	501490fa 	slli	r10,r10,3
   11e14:	2010d77a 	srli	r8,r4,29
   11e18:	481290fa 	slli	r9,r9,3
   11e1c:	380ed7fa 	srli	r7,r7,31
   11e20:	defffb04 	addi	sp,sp,-20
   11e24:	dc800215 	stw	r18,8(sp)
   11e28:	dc400115 	stw	r17,4(sp)
   11e2c:	dc000015 	stw	r16,0(sp)
   11e30:	dfc00415 	stw	ra,16(sp)
   11e34:	dcc00315 	stw	r19,12(sp)
   11e38:	1c803fcc 	andi	r18,r3,255
   11e3c:	2c01ffcc 	andi	r16,r5,2047
   11e40:	5210b03a 	or	r8,r10,r8
   11e44:	202290fa 	slli	r17,r4,3
   11e48:	1081ffcc 	andi	r2,r2,2047
   11e4c:	4b12b03a 	or	r9,r9,r12
   11e50:	300c90fa 	slli	r6,r6,3
   11e54:	91c07526 	beq	r18,r7,1202c <__adddf3+0x23c>
   11e58:	8087c83a 	sub	r3,r16,r2
   11e5c:	00c0ab0e 	bge	zero,r3,1210c <__adddf3+0x31c>
   11e60:	10002a1e 	bne	r2,zero,11f0c <__adddf3+0x11c>
   11e64:	4984b03a 	or	r2,r9,r6
   11e68:	1000961e 	bne	r2,zero,120c4 <__adddf3+0x2d4>
   11e6c:	888001cc 	andi	r2,r17,7
   11e70:	10000726 	beq	r2,zero,11e90 <__adddf3+0xa0>
   11e74:	888003cc 	andi	r2,r17,15
   11e78:	00c00104 	movi	r3,4
   11e7c:	10c00426 	beq	r2,r3,11e90 <__adddf3+0xa0>
   11e80:	88c7883a 	add	r3,r17,r3
   11e84:	1c63803a 	cmpltu	r17,r3,r17
   11e88:	4451883a 	add	r8,r8,r17
   11e8c:	1823883a 	mov	r17,r3
   11e90:	4080202c 	andhi	r2,r8,128
   11e94:	10005926 	beq	r2,zero,11ffc <__adddf3+0x20c>
   11e98:	84000044 	addi	r16,r16,1
   11e9c:	0081ffc4 	movi	r2,2047
   11ea0:	8080ba26 	beq	r16,r2,1218c <__adddf3+0x39c>
   11ea4:	00bfe034 	movhi	r2,65408
   11ea8:	10bfffc4 	addi	r2,r2,-1
   11eac:	4090703a 	and	r8,r8,r2
   11eb0:	4004977a 	slli	r2,r8,29
   11eb4:	4010927a 	slli	r8,r8,9
   11eb8:	8822d0fa 	srli	r17,r17,3
   11ebc:	8401ffcc 	andi	r16,r16,2047
   11ec0:	4010d33a 	srli	r8,r8,12
   11ec4:	9007883a 	mov	r3,r18
   11ec8:	1444b03a 	or	r2,r2,r17
   11ecc:	8401ffcc 	andi	r16,r16,2047
   11ed0:	8020953a 	slli	r16,r16,20
   11ed4:	18c03fcc 	andi	r3,r3,255
   11ed8:	01000434 	movhi	r4,16
   11edc:	213fffc4 	addi	r4,r4,-1
   11ee0:	180697fa 	slli	r3,r3,31
   11ee4:	4110703a 	and	r8,r8,r4
   11ee8:	4410b03a 	or	r8,r8,r16
   11eec:	40c6b03a 	or	r3,r8,r3
   11ef0:	dfc00417 	ldw	ra,16(sp)
   11ef4:	dcc00317 	ldw	r19,12(sp)
   11ef8:	dc800217 	ldw	r18,8(sp)
   11efc:	dc400117 	ldw	r17,4(sp)
   11f00:	dc000017 	ldw	r16,0(sp)
   11f04:	dec00504 	addi	sp,sp,20
   11f08:	f800283a 	ret
   11f0c:	0081ffc4 	movi	r2,2047
   11f10:	80bfd626 	beq	r16,r2,11e6c <_gp+0xfffead64>
   11f14:	4a402034 	orhi	r9,r9,128
   11f18:	00800e04 	movi	r2,56
   11f1c:	10c09f16 	blt	r2,r3,1219c <__adddf3+0x3ac>
   11f20:	008007c4 	movi	r2,31
   11f24:	10c0c216 	blt	r2,r3,12230 <__adddf3+0x440>
   11f28:	00800804 	movi	r2,32
   11f2c:	10c5c83a 	sub	r2,r2,r3
   11f30:	488a983a 	sll	r5,r9,r2
   11f34:	30c8d83a 	srl	r4,r6,r3
   11f38:	3084983a 	sll	r2,r6,r2
   11f3c:	48c6d83a 	srl	r3,r9,r3
   11f40:	290cb03a 	or	r6,r5,r4
   11f44:	1004c03a 	cmpne	r2,r2,zero
   11f48:	308cb03a 	or	r6,r6,r2
   11f4c:	898dc83a 	sub	r6,r17,r6
   11f50:	89a3803a 	cmpltu	r17,r17,r6
   11f54:	40d1c83a 	sub	r8,r8,r3
   11f58:	4451c83a 	sub	r8,r8,r17
   11f5c:	3023883a 	mov	r17,r6
   11f60:	4080202c 	andhi	r2,r8,128
   11f64:	10002326 	beq	r2,zero,11ff4 <__adddf3+0x204>
   11f68:	04c02034 	movhi	r19,128
   11f6c:	9cffffc4 	addi	r19,r19,-1
   11f70:	44e6703a 	and	r19,r8,r19
   11f74:	98007626 	beq	r19,zero,12150 <__adddf3+0x360>
   11f78:	9809883a 	mov	r4,r19
   11f7c:	00144940 	call	14494 <__clzsi2>
   11f80:	10fffe04 	addi	r3,r2,-8
   11f84:	010007c4 	movi	r4,31
   11f88:	20c07716 	blt	r4,r3,12168 <__adddf3+0x378>
   11f8c:	00800804 	movi	r2,32
   11f90:	10c5c83a 	sub	r2,r2,r3
   11f94:	8884d83a 	srl	r2,r17,r2
   11f98:	98d0983a 	sll	r8,r19,r3
   11f9c:	88e2983a 	sll	r17,r17,r3
   11fa0:	1204b03a 	or	r2,r2,r8
   11fa4:	1c007416 	blt	r3,r16,12178 <__adddf3+0x388>
   11fa8:	1c21c83a 	sub	r16,r3,r16
   11fac:	82000044 	addi	r8,r16,1
   11fb0:	00c007c4 	movi	r3,31
   11fb4:	1a009116 	blt	r3,r8,121fc <__adddf3+0x40c>
   11fb8:	00c00804 	movi	r3,32
   11fbc:	1a07c83a 	sub	r3,r3,r8
   11fc0:	8a08d83a 	srl	r4,r17,r8
   11fc4:	88e2983a 	sll	r17,r17,r3
   11fc8:	10c6983a 	sll	r3,r2,r3
   11fcc:	1210d83a 	srl	r8,r2,r8
   11fd0:	8804c03a 	cmpne	r2,r17,zero
   11fd4:	1906b03a 	or	r3,r3,r4
   11fd8:	18a2b03a 	or	r17,r3,r2
   11fdc:	0021883a 	mov	r16,zero
   11fe0:	003fa206 	br	11e6c <_gp+0xfffead64>
   11fe4:	1890b03a 	or	r8,r3,r2
   11fe8:	40017d26 	beq	r8,zero,125e0 <__adddf3+0x7f0>
   11fec:	1011883a 	mov	r8,r2
   11ff0:	1823883a 	mov	r17,r3
   11ff4:	888001cc 	andi	r2,r17,7
   11ff8:	103f9e1e 	bne	r2,zero,11e74 <_gp+0xfffead6c>
   11ffc:	4004977a 	slli	r2,r8,29
   12000:	8822d0fa 	srli	r17,r17,3
   12004:	4010d0fa 	srli	r8,r8,3
   12008:	9007883a 	mov	r3,r18
   1200c:	1444b03a 	or	r2,r2,r17
   12010:	0101ffc4 	movi	r4,2047
   12014:	81002426 	beq	r16,r4,120a8 <__adddf3+0x2b8>
   12018:	8120703a 	and	r16,r16,r4
   1201c:	01000434 	movhi	r4,16
   12020:	213fffc4 	addi	r4,r4,-1
   12024:	4110703a 	and	r8,r8,r4
   12028:	003fa806 	br	11ecc <_gp+0xfffeadc4>
   1202c:	8089c83a 	sub	r4,r16,r2
   12030:	01005e0e 	bge	zero,r4,121ac <__adddf3+0x3bc>
   12034:	10002b26 	beq	r2,zero,120e4 <__adddf3+0x2f4>
   12038:	0081ffc4 	movi	r2,2047
   1203c:	80bf8b26 	beq	r16,r2,11e6c <_gp+0xfffead64>
   12040:	4a402034 	orhi	r9,r9,128
   12044:	00800e04 	movi	r2,56
   12048:	1100a40e 	bge	r2,r4,122dc <__adddf3+0x4ec>
   1204c:	498cb03a 	or	r6,r9,r6
   12050:	300ac03a 	cmpne	r5,r6,zero
   12054:	0013883a 	mov	r9,zero
   12058:	2c4b883a 	add	r5,r5,r17
   1205c:	2c63803a 	cmpltu	r17,r5,r17
   12060:	4a11883a 	add	r8,r9,r8
   12064:	8a11883a 	add	r8,r17,r8
   12068:	2823883a 	mov	r17,r5
   1206c:	4080202c 	andhi	r2,r8,128
   12070:	103fe026 	beq	r2,zero,11ff4 <_gp+0xfffeaeec>
   12074:	84000044 	addi	r16,r16,1
   12078:	0081ffc4 	movi	r2,2047
   1207c:	8080d226 	beq	r16,r2,123c8 <__adddf3+0x5d8>
   12080:	00bfe034 	movhi	r2,65408
   12084:	10bfffc4 	addi	r2,r2,-1
   12088:	4090703a 	and	r8,r8,r2
   1208c:	880ad07a 	srli	r5,r17,1
   12090:	400897fa 	slli	r4,r8,31
   12094:	88c0004c 	andi	r3,r17,1
   12098:	28e2b03a 	or	r17,r5,r3
   1209c:	4010d07a 	srli	r8,r8,1
   120a0:	2462b03a 	or	r17,r4,r17
   120a4:	003f7106 	br	11e6c <_gp+0xfffead64>
   120a8:	4088b03a 	or	r4,r8,r2
   120ac:	20014526 	beq	r4,zero,125c4 <__adddf3+0x7d4>
   120b0:	01000434 	movhi	r4,16
   120b4:	42000234 	orhi	r8,r8,8
   120b8:	213fffc4 	addi	r4,r4,-1
   120bc:	4110703a 	and	r8,r8,r4
   120c0:	003f8206 	br	11ecc <_gp+0xfffeadc4>
   120c4:	18ffffc4 	addi	r3,r3,-1
   120c8:	1800491e 	bne	r3,zero,121f0 <__adddf3+0x400>
   120cc:	898bc83a 	sub	r5,r17,r6
   120d0:	8963803a 	cmpltu	r17,r17,r5
   120d4:	4251c83a 	sub	r8,r8,r9
   120d8:	4451c83a 	sub	r8,r8,r17
   120dc:	2823883a 	mov	r17,r5
   120e0:	003f9f06 	br	11f60 <_gp+0xfffeae58>
   120e4:	4984b03a 	or	r2,r9,r6
   120e8:	103f6026 	beq	r2,zero,11e6c <_gp+0xfffead64>
   120ec:	213fffc4 	addi	r4,r4,-1
   120f0:	2000931e 	bne	r4,zero,12340 <__adddf3+0x550>
   120f4:	898d883a 	add	r6,r17,r6
   120f8:	3463803a 	cmpltu	r17,r6,r17
   120fc:	4251883a 	add	r8,r8,r9
   12100:	8a11883a 	add	r8,r17,r8
   12104:	3023883a 	mov	r17,r6
   12108:	003fd806 	br	1206c <_gp+0xfffeaf64>
   1210c:	1800541e 	bne	r3,zero,12260 <__adddf3+0x470>
   12110:	80800044 	addi	r2,r16,1
   12114:	1081ffcc 	andi	r2,r2,2047
   12118:	00c00044 	movi	r3,1
   1211c:	1880a00e 	bge	r3,r2,123a0 <__adddf3+0x5b0>
   12120:	8989c83a 	sub	r4,r17,r6
   12124:	8905803a 	cmpltu	r2,r17,r4
   12128:	4267c83a 	sub	r19,r8,r9
   1212c:	98a7c83a 	sub	r19,r19,r2
   12130:	9880202c 	andhi	r2,r19,128
   12134:	10006326 	beq	r2,zero,122c4 <__adddf3+0x4d4>
   12138:	3463c83a 	sub	r17,r6,r17
   1213c:	4a07c83a 	sub	r3,r9,r8
   12140:	344d803a 	cmpltu	r6,r6,r17
   12144:	19a7c83a 	sub	r19,r3,r6
   12148:	3825883a 	mov	r18,r7
   1214c:	983f8a1e 	bne	r19,zero,11f78 <_gp+0xfffeae70>
   12150:	8809883a 	mov	r4,r17
   12154:	00144940 	call	14494 <__clzsi2>
   12158:	10800804 	addi	r2,r2,32
   1215c:	10fffe04 	addi	r3,r2,-8
   12160:	010007c4 	movi	r4,31
   12164:	20ff890e 	bge	r4,r3,11f8c <_gp+0xfffeae84>
   12168:	10bff604 	addi	r2,r2,-40
   1216c:	8884983a 	sll	r2,r17,r2
   12170:	0023883a 	mov	r17,zero
   12174:	1c3f8c0e 	bge	r3,r16,11fa8 <_gp+0xfffeaea0>
   12178:	023fe034 	movhi	r8,65408
   1217c:	423fffc4 	addi	r8,r8,-1
   12180:	80e1c83a 	sub	r16,r16,r3
   12184:	1210703a 	and	r8,r2,r8
   12188:	003f3806 	br	11e6c <_gp+0xfffead64>
   1218c:	9007883a 	mov	r3,r18
   12190:	0011883a 	mov	r8,zero
   12194:	0005883a 	mov	r2,zero
   12198:	003f4c06 	br	11ecc <_gp+0xfffeadc4>
   1219c:	498cb03a 	or	r6,r9,r6
   121a0:	300cc03a 	cmpne	r6,r6,zero
   121a4:	0007883a 	mov	r3,zero
   121a8:	003f6806 	br	11f4c <_gp+0xfffeae44>
   121ac:	20009c1e 	bne	r4,zero,12420 <__adddf3+0x630>
   121b0:	80800044 	addi	r2,r16,1
   121b4:	1141ffcc 	andi	r5,r2,2047
   121b8:	01000044 	movi	r4,1
   121bc:	2140670e 	bge	r4,r5,1235c <__adddf3+0x56c>
   121c0:	0101ffc4 	movi	r4,2047
   121c4:	11007f26 	beq	r2,r4,123c4 <__adddf3+0x5d4>
   121c8:	898d883a 	add	r6,r17,r6
   121cc:	4247883a 	add	r3,r8,r9
   121d0:	3451803a 	cmpltu	r8,r6,r17
   121d4:	40d1883a 	add	r8,r8,r3
   121d8:	402297fa 	slli	r17,r8,31
   121dc:	300cd07a 	srli	r6,r6,1
   121e0:	4010d07a 	srli	r8,r8,1
   121e4:	1021883a 	mov	r16,r2
   121e8:	89a2b03a 	or	r17,r17,r6
   121ec:	003f1f06 	br	11e6c <_gp+0xfffead64>
   121f0:	0081ffc4 	movi	r2,2047
   121f4:	80bf481e 	bne	r16,r2,11f18 <_gp+0xfffeae10>
   121f8:	003f1c06 	br	11e6c <_gp+0xfffead64>
   121fc:	843ff844 	addi	r16,r16,-31
   12200:	01000804 	movi	r4,32
   12204:	1406d83a 	srl	r3,r2,r16
   12208:	41005026 	beq	r8,r4,1234c <__adddf3+0x55c>
   1220c:	01001004 	movi	r4,64
   12210:	2211c83a 	sub	r8,r4,r8
   12214:	1204983a 	sll	r2,r2,r8
   12218:	88a2b03a 	or	r17,r17,r2
   1221c:	8822c03a 	cmpne	r17,r17,zero
   12220:	1c62b03a 	or	r17,r3,r17
   12224:	0011883a 	mov	r8,zero
   12228:	0021883a 	mov	r16,zero
   1222c:	003f7106 	br	11ff4 <_gp+0xfffeaeec>
   12230:	193ff804 	addi	r4,r3,-32
   12234:	00800804 	movi	r2,32
   12238:	4908d83a 	srl	r4,r9,r4
   1223c:	18804526 	beq	r3,r2,12354 <__adddf3+0x564>
   12240:	00801004 	movi	r2,64
   12244:	10c5c83a 	sub	r2,r2,r3
   12248:	4886983a 	sll	r3,r9,r2
   1224c:	198cb03a 	or	r6,r3,r6
   12250:	300cc03a 	cmpne	r6,r6,zero
   12254:	218cb03a 	or	r6,r4,r6
   12258:	0007883a 	mov	r3,zero
   1225c:	003f3b06 	br	11f4c <_gp+0xfffeae44>
   12260:	80002a26 	beq	r16,zero,1230c <__adddf3+0x51c>
   12264:	0101ffc4 	movi	r4,2047
   12268:	11006826 	beq	r2,r4,1240c <__adddf3+0x61c>
   1226c:	00c7c83a 	sub	r3,zero,r3
   12270:	42002034 	orhi	r8,r8,128
   12274:	01000e04 	movi	r4,56
   12278:	20c07c16 	blt	r4,r3,1246c <__adddf3+0x67c>
   1227c:	010007c4 	movi	r4,31
   12280:	20c0da16 	blt	r4,r3,125ec <__adddf3+0x7fc>
   12284:	01000804 	movi	r4,32
   12288:	20c9c83a 	sub	r4,r4,r3
   1228c:	4114983a 	sll	r10,r8,r4
   12290:	88cad83a 	srl	r5,r17,r3
   12294:	8908983a 	sll	r4,r17,r4
   12298:	40c6d83a 	srl	r3,r8,r3
   1229c:	5162b03a 	or	r17,r10,r5
   122a0:	2008c03a 	cmpne	r4,r4,zero
   122a4:	8922b03a 	or	r17,r17,r4
   122a8:	3463c83a 	sub	r17,r6,r17
   122ac:	48c7c83a 	sub	r3,r9,r3
   122b0:	344d803a 	cmpltu	r6,r6,r17
   122b4:	1991c83a 	sub	r8,r3,r6
   122b8:	1021883a 	mov	r16,r2
   122bc:	3825883a 	mov	r18,r7
   122c0:	003f2706 	br	11f60 <_gp+0xfffeae58>
   122c4:	24d0b03a 	or	r8,r4,r19
   122c8:	40001b1e 	bne	r8,zero,12338 <__adddf3+0x548>
   122cc:	0005883a 	mov	r2,zero
   122d0:	0007883a 	mov	r3,zero
   122d4:	0021883a 	mov	r16,zero
   122d8:	003f4d06 	br	12010 <_gp+0xfffeaf08>
   122dc:	008007c4 	movi	r2,31
   122e0:	11003c16 	blt	r2,r4,123d4 <__adddf3+0x5e4>
   122e4:	00800804 	movi	r2,32
   122e8:	1105c83a 	sub	r2,r2,r4
   122ec:	488e983a 	sll	r7,r9,r2
   122f0:	310ad83a 	srl	r5,r6,r4
   122f4:	3084983a 	sll	r2,r6,r2
   122f8:	4912d83a 	srl	r9,r9,r4
   122fc:	394ab03a 	or	r5,r7,r5
   12300:	1004c03a 	cmpne	r2,r2,zero
   12304:	288ab03a 	or	r5,r5,r2
   12308:	003f5306 	br	12058 <_gp+0xfffeaf50>
   1230c:	4448b03a 	or	r4,r8,r17
   12310:	20003e26 	beq	r4,zero,1240c <__adddf3+0x61c>
   12314:	00c6303a 	nor	r3,zero,r3
   12318:	18003a1e 	bne	r3,zero,12404 <__adddf3+0x614>
   1231c:	3463c83a 	sub	r17,r6,r17
   12320:	4a07c83a 	sub	r3,r9,r8
   12324:	344d803a 	cmpltu	r6,r6,r17
   12328:	1991c83a 	sub	r8,r3,r6
   1232c:	1021883a 	mov	r16,r2
   12330:	3825883a 	mov	r18,r7
   12334:	003f0a06 	br	11f60 <_gp+0xfffeae58>
   12338:	2023883a 	mov	r17,r4
   1233c:	003f0d06 	br	11f74 <_gp+0xfffeae6c>
   12340:	0081ffc4 	movi	r2,2047
   12344:	80bf3f1e 	bne	r16,r2,12044 <_gp+0xfffeaf3c>
   12348:	003ec806 	br	11e6c <_gp+0xfffead64>
   1234c:	0005883a 	mov	r2,zero
   12350:	003fb106 	br	12218 <_gp+0xfffeb110>
   12354:	0007883a 	mov	r3,zero
   12358:	003fbc06 	br	1224c <_gp+0xfffeb144>
   1235c:	4444b03a 	or	r2,r8,r17
   12360:	8000871e 	bne	r16,zero,12580 <__adddf3+0x790>
   12364:	1000ba26 	beq	r2,zero,12650 <__adddf3+0x860>
   12368:	4984b03a 	or	r2,r9,r6
   1236c:	103ebf26 	beq	r2,zero,11e6c <_gp+0xfffead64>
   12370:	8985883a 	add	r2,r17,r6
   12374:	4247883a 	add	r3,r8,r9
   12378:	1451803a 	cmpltu	r8,r2,r17
   1237c:	40d1883a 	add	r8,r8,r3
   12380:	40c0202c 	andhi	r3,r8,128
   12384:	1023883a 	mov	r17,r2
   12388:	183f1a26 	beq	r3,zero,11ff4 <_gp+0xfffeaeec>
   1238c:	00bfe034 	movhi	r2,65408
   12390:	10bfffc4 	addi	r2,r2,-1
   12394:	2021883a 	mov	r16,r4
   12398:	4090703a 	and	r8,r8,r2
   1239c:	003eb306 	br	11e6c <_gp+0xfffead64>
   123a0:	4444b03a 	or	r2,r8,r17
   123a4:	8000291e 	bne	r16,zero,1244c <__adddf3+0x65c>
   123a8:	10004b1e 	bne	r2,zero,124d8 <__adddf3+0x6e8>
   123ac:	4990b03a 	or	r8,r9,r6
   123b0:	40008b26 	beq	r8,zero,125e0 <__adddf3+0x7f0>
   123b4:	4811883a 	mov	r8,r9
   123b8:	3023883a 	mov	r17,r6
   123bc:	3825883a 	mov	r18,r7
   123c0:	003eaa06 	br	11e6c <_gp+0xfffead64>
   123c4:	1021883a 	mov	r16,r2
   123c8:	0011883a 	mov	r8,zero
   123cc:	0005883a 	mov	r2,zero
   123d0:	003f0f06 	br	12010 <_gp+0xfffeaf08>
   123d4:	217ff804 	addi	r5,r4,-32
   123d8:	00800804 	movi	r2,32
   123dc:	494ad83a 	srl	r5,r9,r5
   123e0:	20807d26 	beq	r4,r2,125d8 <__adddf3+0x7e8>
   123e4:	00801004 	movi	r2,64
   123e8:	1109c83a 	sub	r4,r2,r4
   123ec:	4912983a 	sll	r9,r9,r4
   123f0:	498cb03a 	or	r6,r9,r6
   123f4:	300cc03a 	cmpne	r6,r6,zero
   123f8:	298ab03a 	or	r5,r5,r6
   123fc:	0013883a 	mov	r9,zero
   12400:	003f1506 	br	12058 <_gp+0xfffeaf50>
   12404:	0101ffc4 	movi	r4,2047
   12408:	113f9a1e 	bne	r2,r4,12274 <_gp+0xfffeb16c>
   1240c:	4811883a 	mov	r8,r9
   12410:	3023883a 	mov	r17,r6
   12414:	1021883a 	mov	r16,r2
   12418:	3825883a 	mov	r18,r7
   1241c:	003e9306 	br	11e6c <_gp+0xfffead64>
   12420:	8000161e 	bne	r16,zero,1247c <__adddf3+0x68c>
   12424:	444ab03a 	or	r5,r8,r17
   12428:	28005126 	beq	r5,zero,12570 <__adddf3+0x780>
   1242c:	0108303a 	nor	r4,zero,r4
   12430:	20004d1e 	bne	r4,zero,12568 <__adddf3+0x778>
   12434:	89a3883a 	add	r17,r17,r6
   12438:	4253883a 	add	r9,r8,r9
   1243c:	898d803a 	cmpltu	r6,r17,r6
   12440:	3251883a 	add	r8,r6,r9
   12444:	1021883a 	mov	r16,r2
   12448:	003f0806 	br	1206c <_gp+0xfffeaf64>
   1244c:	1000301e 	bne	r2,zero,12510 <__adddf3+0x720>
   12450:	4984b03a 	or	r2,r9,r6
   12454:	10007126 	beq	r2,zero,1261c <__adddf3+0x82c>
   12458:	4811883a 	mov	r8,r9
   1245c:	3023883a 	mov	r17,r6
   12460:	3825883a 	mov	r18,r7
   12464:	0401ffc4 	movi	r16,2047
   12468:	003e8006 	br	11e6c <_gp+0xfffead64>
   1246c:	4462b03a 	or	r17,r8,r17
   12470:	8822c03a 	cmpne	r17,r17,zero
   12474:	0007883a 	mov	r3,zero
   12478:	003f8b06 	br	122a8 <_gp+0xfffeb1a0>
   1247c:	0141ffc4 	movi	r5,2047
   12480:	11403b26 	beq	r2,r5,12570 <__adddf3+0x780>
   12484:	0109c83a 	sub	r4,zero,r4
   12488:	42002034 	orhi	r8,r8,128
   1248c:	01400e04 	movi	r5,56
   12490:	29006716 	blt	r5,r4,12630 <__adddf3+0x840>
   12494:	014007c4 	movi	r5,31
   12498:	29007016 	blt	r5,r4,1265c <__adddf3+0x86c>
   1249c:	01400804 	movi	r5,32
   124a0:	290bc83a 	sub	r5,r5,r4
   124a4:	4154983a 	sll	r10,r8,r5
   124a8:	890ed83a 	srl	r7,r17,r4
   124ac:	894a983a 	sll	r5,r17,r5
   124b0:	4108d83a 	srl	r4,r8,r4
   124b4:	51e2b03a 	or	r17,r10,r7
   124b8:	280ac03a 	cmpne	r5,r5,zero
   124bc:	8962b03a 	or	r17,r17,r5
   124c0:	89a3883a 	add	r17,r17,r6
   124c4:	2253883a 	add	r9,r4,r9
   124c8:	898d803a 	cmpltu	r6,r17,r6
   124cc:	3251883a 	add	r8,r6,r9
   124d0:	1021883a 	mov	r16,r2
   124d4:	003ee506 	br	1206c <_gp+0xfffeaf64>
   124d8:	4984b03a 	or	r2,r9,r6
   124dc:	103e6326 	beq	r2,zero,11e6c <_gp+0xfffead64>
   124e0:	8987c83a 	sub	r3,r17,r6
   124e4:	88c9803a 	cmpltu	r4,r17,r3
   124e8:	4245c83a 	sub	r2,r8,r9
   124ec:	1105c83a 	sub	r2,r2,r4
   124f0:	1100202c 	andhi	r4,r2,128
   124f4:	203ebb26 	beq	r4,zero,11fe4 <_gp+0xfffeaedc>
   124f8:	3463c83a 	sub	r17,r6,r17
   124fc:	4a07c83a 	sub	r3,r9,r8
   12500:	344d803a 	cmpltu	r6,r6,r17
   12504:	1991c83a 	sub	r8,r3,r6
   12508:	3825883a 	mov	r18,r7
   1250c:	003e5706 	br	11e6c <_gp+0xfffead64>
   12510:	4984b03a 	or	r2,r9,r6
   12514:	10002e26 	beq	r2,zero,125d0 <__adddf3+0x7e0>
   12518:	4004d0fa 	srli	r2,r8,3
   1251c:	8822d0fa 	srli	r17,r17,3
   12520:	4010977a 	slli	r8,r8,29
   12524:	10c0022c 	andhi	r3,r2,8
   12528:	4462b03a 	or	r17,r8,r17
   1252c:	18000826 	beq	r3,zero,12550 <__adddf3+0x760>
   12530:	4808d0fa 	srli	r4,r9,3
   12534:	20c0022c 	andhi	r3,r4,8
   12538:	1800051e 	bne	r3,zero,12550 <__adddf3+0x760>
   1253c:	300cd0fa 	srli	r6,r6,3
   12540:	4806977a 	slli	r3,r9,29
   12544:	2005883a 	mov	r2,r4
   12548:	3825883a 	mov	r18,r7
   1254c:	19a2b03a 	or	r17,r3,r6
   12550:	8810d77a 	srli	r8,r17,29
   12554:	100490fa 	slli	r2,r2,3
   12558:	882290fa 	slli	r17,r17,3
   1255c:	0401ffc4 	movi	r16,2047
   12560:	4090b03a 	or	r8,r8,r2
   12564:	003e4106 	br	11e6c <_gp+0xfffead64>
   12568:	0141ffc4 	movi	r5,2047
   1256c:	117fc71e 	bne	r2,r5,1248c <_gp+0xfffeb384>
   12570:	4811883a 	mov	r8,r9
   12574:	3023883a 	mov	r17,r6
   12578:	1021883a 	mov	r16,r2
   1257c:	003e3b06 	br	11e6c <_gp+0xfffead64>
   12580:	10002f26 	beq	r2,zero,12640 <__adddf3+0x850>
   12584:	4984b03a 	or	r2,r9,r6
   12588:	10001126 	beq	r2,zero,125d0 <__adddf3+0x7e0>
   1258c:	4004d0fa 	srli	r2,r8,3
   12590:	8822d0fa 	srli	r17,r17,3
   12594:	4010977a 	slli	r8,r8,29
   12598:	10c0022c 	andhi	r3,r2,8
   1259c:	4462b03a 	or	r17,r8,r17
   125a0:	183feb26 	beq	r3,zero,12550 <_gp+0xfffeb448>
   125a4:	4808d0fa 	srli	r4,r9,3
   125a8:	20c0022c 	andhi	r3,r4,8
   125ac:	183fe81e 	bne	r3,zero,12550 <_gp+0xfffeb448>
   125b0:	300cd0fa 	srli	r6,r6,3
   125b4:	4806977a 	slli	r3,r9,29
   125b8:	2005883a 	mov	r2,r4
   125bc:	19a2b03a 	or	r17,r3,r6
   125c0:	003fe306 	br	12550 <_gp+0xfffeb448>
   125c4:	0011883a 	mov	r8,zero
   125c8:	0005883a 	mov	r2,zero
   125cc:	003e3f06 	br	11ecc <_gp+0xfffeadc4>
   125d0:	0401ffc4 	movi	r16,2047
   125d4:	003e2506 	br	11e6c <_gp+0xfffead64>
   125d8:	0013883a 	mov	r9,zero
   125dc:	003f8406 	br	123f0 <_gp+0xfffeb2e8>
   125e0:	0005883a 	mov	r2,zero
   125e4:	0007883a 	mov	r3,zero
   125e8:	003e8906 	br	12010 <_gp+0xfffeaf08>
   125ec:	197ff804 	addi	r5,r3,-32
   125f0:	01000804 	movi	r4,32
   125f4:	414ad83a 	srl	r5,r8,r5
   125f8:	19002426 	beq	r3,r4,1268c <__adddf3+0x89c>
   125fc:	01001004 	movi	r4,64
   12600:	20c7c83a 	sub	r3,r4,r3
   12604:	40c6983a 	sll	r3,r8,r3
   12608:	1c46b03a 	or	r3,r3,r17
   1260c:	1806c03a 	cmpne	r3,r3,zero
   12610:	28e2b03a 	or	r17,r5,r3
   12614:	0007883a 	mov	r3,zero
   12618:	003f2306 	br	122a8 <_gp+0xfffeb1a0>
   1261c:	0007883a 	mov	r3,zero
   12620:	5811883a 	mov	r8,r11
   12624:	00bfffc4 	movi	r2,-1
   12628:	0401ffc4 	movi	r16,2047
   1262c:	003e7806 	br	12010 <_gp+0xfffeaf08>
   12630:	4462b03a 	or	r17,r8,r17
   12634:	8822c03a 	cmpne	r17,r17,zero
   12638:	0009883a 	mov	r4,zero
   1263c:	003fa006 	br	124c0 <_gp+0xfffeb3b8>
   12640:	4811883a 	mov	r8,r9
   12644:	3023883a 	mov	r17,r6
   12648:	0401ffc4 	movi	r16,2047
   1264c:	003e0706 	br	11e6c <_gp+0xfffead64>
   12650:	4811883a 	mov	r8,r9
   12654:	3023883a 	mov	r17,r6
   12658:	003e0406 	br	11e6c <_gp+0xfffead64>
   1265c:	21fff804 	addi	r7,r4,-32
   12660:	01400804 	movi	r5,32
   12664:	41ced83a 	srl	r7,r8,r7
   12668:	21400a26 	beq	r4,r5,12694 <__adddf3+0x8a4>
   1266c:	01401004 	movi	r5,64
   12670:	2909c83a 	sub	r4,r5,r4
   12674:	4108983a 	sll	r4,r8,r4
   12678:	2448b03a 	or	r4,r4,r17
   1267c:	2008c03a 	cmpne	r4,r4,zero
   12680:	3922b03a 	or	r17,r7,r4
   12684:	0009883a 	mov	r4,zero
   12688:	003f8d06 	br	124c0 <_gp+0xfffeb3b8>
   1268c:	0007883a 	mov	r3,zero
   12690:	003fdd06 	br	12608 <_gp+0xfffeb500>
   12694:	0009883a 	mov	r4,zero
   12698:	003ff706 	br	12678 <_gp+0xfffeb570>

0001269c <__divdf3>:
   1269c:	defff004 	addi	sp,sp,-64
   126a0:	dc800815 	stw	r18,32(sp)
   126a4:	2824d53a 	srli	r18,r5,20
   126a8:	dd800c15 	stw	r22,48(sp)
   126ac:	282cd7fa 	srli	r22,r5,31
   126b0:	dc000615 	stw	r16,24(sp)
   126b4:	04000434 	movhi	r16,16
   126b8:	843fffc4 	addi	r16,r16,-1
   126bc:	dfc00f15 	stw	ra,60(sp)
   126c0:	df000e15 	stw	fp,56(sp)
   126c4:	ddc00d15 	stw	r23,52(sp)
   126c8:	dd400b15 	stw	r21,44(sp)
   126cc:	dd000a15 	stw	r20,40(sp)
   126d0:	dcc00915 	stw	r19,36(sp)
   126d4:	dc400715 	stw	r17,28(sp)
   126d8:	9481ffcc 	andi	r18,r18,2047
   126dc:	2c20703a 	and	r16,r5,r16
   126e0:	b2003fcc 	andi	r8,r22,255
   126e4:	90006126 	beq	r18,zero,1286c <__divdf3+0x1d0>
   126e8:	0081ffc4 	movi	r2,2047
   126ec:	202b883a 	mov	r21,r4
   126f0:	90803726 	beq	r18,r2,127d0 <__divdf3+0x134>
   126f4:	80800434 	orhi	r2,r16,16
   126f8:	100490fa 	slli	r2,r2,3
   126fc:	2020d77a 	srli	r16,r4,29
   12700:	202a90fa 	slli	r21,r4,3
   12704:	94bf0044 	addi	r18,r18,-1023
   12708:	80a0b03a 	or	r16,r16,r2
   1270c:	0013883a 	mov	r9,zero
   12710:	000b883a 	mov	r5,zero
   12714:	3806d53a 	srli	r3,r7,20
   12718:	382ed7fa 	srli	r23,r7,31
   1271c:	04400434 	movhi	r17,16
   12720:	8c7fffc4 	addi	r17,r17,-1
   12724:	18c1ffcc 	andi	r3,r3,2047
   12728:	3029883a 	mov	r20,r6
   1272c:	3c62703a 	and	r17,r7,r17
   12730:	bf003fcc 	andi	fp,r23,255
   12734:	18006e26 	beq	r3,zero,128f0 <__divdf3+0x254>
   12738:	0081ffc4 	movi	r2,2047
   1273c:	18806626 	beq	r3,r2,128d8 <__divdf3+0x23c>
   12740:	88800434 	orhi	r2,r17,16
   12744:	100490fa 	slli	r2,r2,3
   12748:	3022d77a 	srli	r17,r6,29
   1274c:	302890fa 	slli	r20,r6,3
   12750:	18ff0044 	addi	r3,r3,-1023
   12754:	88a2b03a 	or	r17,r17,r2
   12758:	000f883a 	mov	r7,zero
   1275c:	b5e6f03a 	xor	r19,r22,r23
   12760:	3a4cb03a 	or	r6,r7,r9
   12764:	008003c4 	movi	r2,15
   12768:	9809883a 	mov	r4,r19
   1276c:	90c7c83a 	sub	r3,r18,r3
   12770:	9cc03fcc 	andi	r19,r19,255
   12774:	11809636 	bltu	r2,r6,129d0 <__divdf3+0x334>
   12778:	300c90ba 	slli	r6,r6,2
   1277c:	00800074 	movhi	r2,1
   12780:	1089e404 	addi	r2,r2,10128
   12784:	308d883a 	add	r6,r6,r2
   12788:	30800017 	ldw	r2,0(r6)
   1278c:	1000683a 	jmp	r2
   12790:	000129d0 	cmplti	zero,zero,1191
   12794:	00012808 	cmpgei	zero,zero,1184
   12798:	000129c0 	call	129c <__alt_mem_onchip_memory-0xed64>
   1279c:	000127fc 	xorhi	zero,zero,1183
   127a0:	000129c0 	call	129c <__alt_mem_onchip_memory-0xed64>
   127a4:	00012994 	movui	zero,1190
   127a8:	000129c0 	call	129c <__alt_mem_onchip_memory-0xed64>
   127ac:	000127fc 	xorhi	zero,zero,1183
   127b0:	00012808 	cmpgei	zero,zero,1184
   127b4:	00012808 	cmpgei	zero,zero,1184
   127b8:	00012994 	movui	zero,1190
   127bc:	000127fc 	xorhi	zero,zero,1183
   127c0:	000127ec 	andhi	zero,zero,1183
   127c4:	000127ec 	andhi	zero,zero,1183
   127c8:	000127ec 	andhi	zero,zero,1183
   127cc:	00012d58 	cmpnei	zero,zero,1205
   127d0:	2404b03a 	or	r2,r4,r16
   127d4:	10006c1e 	bne	r2,zero,12988 <__divdf3+0x2ec>
   127d8:	02400204 	movi	r9,8
   127dc:	0021883a 	mov	r16,zero
   127e0:	002b883a 	mov	r21,zero
   127e4:	01400084 	movi	r5,2
   127e8:	003fca06 	br	12714 <_gp+0xfffeb60c>
   127ec:	8023883a 	mov	r17,r16
   127f0:	a829883a 	mov	r20,r21
   127f4:	4039883a 	mov	fp,r8
   127f8:	280f883a 	mov	r7,r5
   127fc:	00800084 	movi	r2,2
   12800:	3881601e 	bne	r7,r2,12d84 <__divdf3+0x6e8>
   12804:	e027883a 	mov	r19,fp
   12808:	9900004c 	andi	r4,r19,1
   1280c:	0081ffc4 	movi	r2,2047
   12810:	0021883a 	mov	r16,zero
   12814:	002b883a 	mov	r21,zero
   12818:	1004953a 	slli	r2,r2,20
   1281c:	20c03fcc 	andi	r3,r4,255
   12820:	01400434 	movhi	r5,16
   12824:	297fffc4 	addi	r5,r5,-1
   12828:	180697fa 	slli	r3,r3,31
   1282c:	8160703a 	and	r16,r16,r5
   12830:	80a0b03a 	or	r16,r16,r2
   12834:	80c6b03a 	or	r3,r16,r3
   12838:	a805883a 	mov	r2,r21
   1283c:	dfc00f17 	ldw	ra,60(sp)
   12840:	df000e17 	ldw	fp,56(sp)
   12844:	ddc00d17 	ldw	r23,52(sp)
   12848:	dd800c17 	ldw	r22,48(sp)
   1284c:	dd400b17 	ldw	r21,44(sp)
   12850:	dd000a17 	ldw	r20,40(sp)
   12854:	dcc00917 	ldw	r19,36(sp)
   12858:	dc800817 	ldw	r18,32(sp)
   1285c:	dc400717 	ldw	r17,28(sp)
   12860:	dc000617 	ldw	r16,24(sp)
   12864:	dec01004 	addi	sp,sp,64
   12868:	f800283a 	ret
   1286c:	2404b03a 	or	r2,r4,r16
   12870:	2023883a 	mov	r17,r4
   12874:	10003f26 	beq	r2,zero,12974 <__divdf3+0x2d8>
   12878:	80015e26 	beq	r16,zero,12df4 <__divdf3+0x758>
   1287c:	8009883a 	mov	r4,r16
   12880:	d9800215 	stw	r6,8(sp)
   12884:	d9c00515 	stw	r7,20(sp)
   12888:	da000415 	stw	r8,16(sp)
   1288c:	00144940 	call	14494 <__clzsi2>
   12890:	d9800217 	ldw	r6,8(sp)
   12894:	d9c00517 	ldw	r7,20(sp)
   12898:	da000417 	ldw	r8,16(sp)
   1289c:	113ffd44 	addi	r4,r2,-11
   128a0:	00c00704 	movi	r3,28
   128a4:	19014f16 	blt	r3,r4,12de4 <__divdf3+0x748>
   128a8:	00c00744 	movi	r3,29
   128ac:	157ffe04 	addi	r21,r2,-8
   128b0:	1907c83a 	sub	r3,r3,r4
   128b4:	8560983a 	sll	r16,r16,r21
   128b8:	88c6d83a 	srl	r3,r17,r3
   128bc:	8d6a983a 	sll	r21,r17,r21
   128c0:	1c20b03a 	or	r16,r3,r16
   128c4:	1080fcc4 	addi	r2,r2,1011
   128c8:	00a5c83a 	sub	r18,zero,r2
   128cc:	0013883a 	mov	r9,zero
   128d0:	000b883a 	mov	r5,zero
   128d4:	003f8f06 	br	12714 <_gp+0xfffeb60c>
   128d8:	3444b03a 	or	r2,r6,r17
   128dc:	1000231e 	bne	r2,zero,1296c <__divdf3+0x2d0>
   128e0:	0023883a 	mov	r17,zero
   128e4:	0029883a 	mov	r20,zero
   128e8:	01c00084 	movi	r7,2
   128ec:	003f9b06 	br	1275c <_gp+0xfffeb654>
   128f0:	3444b03a 	or	r2,r6,r17
   128f4:	10001926 	beq	r2,zero,1295c <__divdf3+0x2c0>
   128f8:	88014b26 	beq	r17,zero,12e28 <__divdf3+0x78c>
   128fc:	8809883a 	mov	r4,r17
   12900:	d9400115 	stw	r5,4(sp)
   12904:	d9800215 	stw	r6,8(sp)
   12908:	da000415 	stw	r8,16(sp)
   1290c:	da400315 	stw	r9,12(sp)
   12910:	00144940 	call	14494 <__clzsi2>
   12914:	d9400117 	ldw	r5,4(sp)
   12918:	d9800217 	ldw	r6,8(sp)
   1291c:	da000417 	ldw	r8,16(sp)
   12920:	da400317 	ldw	r9,12(sp)
   12924:	113ffd44 	addi	r4,r2,-11
   12928:	00c00704 	movi	r3,28
   1292c:	19013a16 	blt	r3,r4,12e18 <__divdf3+0x77c>
   12930:	00c00744 	movi	r3,29
   12934:	153ffe04 	addi	r20,r2,-8
   12938:	1907c83a 	sub	r3,r3,r4
   1293c:	8d22983a 	sll	r17,r17,r20
   12940:	30c6d83a 	srl	r3,r6,r3
   12944:	3528983a 	sll	r20,r6,r20
   12948:	1c62b03a 	or	r17,r3,r17
   1294c:	1080fcc4 	addi	r2,r2,1011
   12950:	0087c83a 	sub	r3,zero,r2
   12954:	000f883a 	mov	r7,zero
   12958:	003f8006 	br	1275c <_gp+0xfffeb654>
   1295c:	0023883a 	mov	r17,zero
   12960:	0029883a 	mov	r20,zero
   12964:	01c00044 	movi	r7,1
   12968:	003f7c06 	br	1275c <_gp+0xfffeb654>
   1296c:	01c000c4 	movi	r7,3
   12970:	003f7a06 	br	1275c <_gp+0xfffeb654>
   12974:	02400104 	movi	r9,4
   12978:	0021883a 	mov	r16,zero
   1297c:	002b883a 	mov	r21,zero
   12980:	01400044 	movi	r5,1
   12984:	003f6306 	br	12714 <_gp+0xfffeb60c>
   12988:	02400304 	movi	r9,12
   1298c:	014000c4 	movi	r5,3
   12990:	003f6006 	br	12714 <_gp+0xfffeb60c>
   12994:	04000434 	movhi	r16,16
   12998:	0009883a 	mov	r4,zero
   1299c:	843fffc4 	addi	r16,r16,-1
   129a0:	057fffc4 	movi	r21,-1
   129a4:	0081ffc4 	movi	r2,2047
   129a8:	003f9b06 	br	12818 <_gp+0xfffeb710>
   129ac:	00c00044 	movi	r3,1
   129b0:	1887c83a 	sub	r3,r3,r2
   129b4:	01000e04 	movi	r4,56
   129b8:	20c1530e 	bge	r4,r3,12f08 <__divdf3+0x86c>
   129bc:	9900004c 	andi	r4,r19,1
   129c0:	0005883a 	mov	r2,zero
   129c4:	0021883a 	mov	r16,zero
   129c8:	002b883a 	mov	r21,zero
   129cc:	003f9206 	br	12818 <_gp+0xfffeb710>
   129d0:	8c012e36 	bltu	r17,r16,12e8c <__divdf3+0x7f0>
   129d4:	84412c26 	beq	r16,r17,12e88 <__divdf3+0x7ec>
   129d8:	a82f883a 	mov	r23,r21
   129dc:	18ffffc4 	addi	r3,r3,-1
   129e0:	002b883a 	mov	r21,zero
   129e4:	a004d63a 	srli	r2,r20,24
   129e8:	8822923a 	slli	r17,r17,8
   129ec:	a028923a 	slli	r20,r20,8
   129f0:	8009883a 	mov	r4,r16
   129f4:	88acb03a 	or	r22,r17,r2
   129f8:	dd000015 	stw	r20,0(sp)
   129fc:	b028d43a 	srli	r20,r22,16
   12a00:	d8c00215 	stw	r3,8(sp)
   12a04:	b4bfffcc 	andi	r18,r22,65535
   12a08:	a00b883a 	mov	r5,r20
   12a0c:	0011d340 	call	11d34 <__udivsi3>
   12a10:	100b883a 	mov	r5,r2
   12a14:	9009883a 	mov	r4,r18
   12a18:	1023883a 	mov	r17,r2
   12a1c:	00144f80 	call	144f8 <__mulsi3>
   12a20:	8009883a 	mov	r4,r16
   12a24:	a00b883a 	mov	r5,r20
   12a28:	1039883a 	mov	fp,r2
   12a2c:	0011d980 	call	11d98 <__umodsi3>
   12a30:	1004943a 	slli	r2,r2,16
   12a34:	b808d43a 	srli	r4,r23,16
   12a38:	d8c00217 	ldw	r3,8(sp)
   12a3c:	2084b03a 	or	r2,r4,r2
   12a40:	1700062e 	bgeu	r2,fp,12a5c <__divdf3+0x3c0>
   12a44:	1585883a 	add	r2,r2,r22
   12a48:	893fffc4 	addi	r4,r17,-1
   12a4c:	15811d36 	bltu	r2,r22,12ec4 <__divdf3+0x828>
   12a50:	17011c2e 	bgeu	r2,fp,12ec4 <__divdf3+0x828>
   12a54:	8c7fff84 	addi	r17,r17,-2
   12a58:	1585883a 	add	r2,r2,r22
   12a5c:	1739c83a 	sub	fp,r2,fp
   12a60:	a00b883a 	mov	r5,r20
   12a64:	e009883a 	mov	r4,fp
   12a68:	d8c00215 	stw	r3,8(sp)
   12a6c:	0011d340 	call	11d34 <__udivsi3>
   12a70:	100b883a 	mov	r5,r2
   12a74:	9009883a 	mov	r4,r18
   12a78:	1021883a 	mov	r16,r2
   12a7c:	00144f80 	call	144f8 <__mulsi3>
   12a80:	a00b883a 	mov	r5,r20
   12a84:	e009883a 	mov	r4,fp
   12a88:	d8800415 	stw	r2,16(sp)
   12a8c:	0011d980 	call	11d98 <__umodsi3>
   12a90:	1004943a 	slli	r2,r2,16
   12a94:	da000417 	ldw	r8,16(sp)
   12a98:	bdffffcc 	andi	r23,r23,65535
   12a9c:	b884b03a 	or	r2,r23,r2
   12aa0:	d8c00217 	ldw	r3,8(sp)
   12aa4:	1200062e 	bgeu	r2,r8,12ac0 <__divdf3+0x424>
   12aa8:	1585883a 	add	r2,r2,r22
   12aac:	813fffc4 	addi	r4,r16,-1
   12ab0:	15810236 	bltu	r2,r22,12ebc <__divdf3+0x820>
   12ab4:	1201012e 	bgeu	r2,r8,12ebc <__divdf3+0x820>
   12ab8:	843fff84 	addi	r16,r16,-2
   12abc:	1585883a 	add	r2,r2,r22
   12ac0:	8822943a 	slli	r17,r17,16
   12ac4:	d9800017 	ldw	r6,0(sp)
   12ac8:	1211c83a 	sub	r8,r2,r8
   12acc:	8c22b03a 	or	r17,r17,r16
   12ad0:	373fffcc 	andi	fp,r6,65535
   12ad4:	8abfffcc 	andi	r10,r17,65535
   12ad8:	8820d43a 	srli	r16,r17,16
   12adc:	5009883a 	mov	r4,r10
   12ae0:	e00b883a 	mov	r5,fp
   12ae4:	302ed43a 	srli	r23,r6,16
   12ae8:	d8c00215 	stw	r3,8(sp)
   12aec:	da000415 	stw	r8,16(sp)
   12af0:	da800115 	stw	r10,4(sp)
   12af4:	00144f80 	call	144f8 <__mulsi3>
   12af8:	800b883a 	mov	r5,r16
   12afc:	e009883a 	mov	r4,fp
   12b00:	d8800515 	stw	r2,20(sp)
   12b04:	00144f80 	call	144f8 <__mulsi3>
   12b08:	8009883a 	mov	r4,r16
   12b0c:	b80b883a 	mov	r5,r23
   12b10:	d8800315 	stw	r2,12(sp)
   12b14:	00144f80 	call	144f8 <__mulsi3>
   12b18:	da800117 	ldw	r10,4(sp)
   12b1c:	b80b883a 	mov	r5,r23
   12b20:	1021883a 	mov	r16,r2
   12b24:	5009883a 	mov	r4,r10
   12b28:	00144f80 	call	144f8 <__mulsi3>
   12b2c:	d9c00517 	ldw	r7,20(sp)
   12b30:	da400317 	ldw	r9,12(sp)
   12b34:	d8c00217 	ldw	r3,8(sp)
   12b38:	3808d43a 	srli	r4,r7,16
   12b3c:	1245883a 	add	r2,r2,r9
   12b40:	da000417 	ldw	r8,16(sp)
   12b44:	2085883a 	add	r2,r4,r2
   12b48:	1240022e 	bgeu	r2,r9,12b54 <__divdf3+0x4b8>
   12b4c:	01000074 	movhi	r4,1
   12b50:	8121883a 	add	r16,r16,r4
   12b54:	1008d43a 	srli	r4,r2,16
   12b58:	1004943a 	slli	r2,r2,16
   12b5c:	39ffffcc 	andi	r7,r7,65535
   12b60:	2409883a 	add	r4,r4,r16
   12b64:	11c5883a 	add	r2,r2,r7
   12b68:	4100bb36 	bltu	r8,r4,12e58 <__divdf3+0x7bc>
   12b6c:	4100d726 	beq	r8,r4,12ecc <__divdf3+0x830>
   12b70:	4109c83a 	sub	r4,r8,r4
   12b74:	a8a1c83a 	sub	r16,r21,r2
   12b78:	ac2b803a 	cmpltu	r21,r21,r16
   12b7c:	256bc83a 	sub	r21,r4,r21
   12b80:	b540d926 	beq	r22,r21,12ee8 <__divdf3+0x84c>
   12b84:	a00b883a 	mov	r5,r20
   12b88:	a809883a 	mov	r4,r21
   12b8c:	d8c00215 	stw	r3,8(sp)
   12b90:	0011d340 	call	11d34 <__udivsi3>
   12b94:	100b883a 	mov	r5,r2
   12b98:	9009883a 	mov	r4,r18
   12b9c:	d8800515 	stw	r2,20(sp)
   12ba0:	00144f80 	call	144f8 <__mulsi3>
   12ba4:	a809883a 	mov	r4,r21
   12ba8:	a00b883a 	mov	r5,r20
   12bac:	d8800415 	stw	r2,16(sp)
   12bb0:	0011d980 	call	11d98 <__umodsi3>
   12bb4:	1004943a 	slli	r2,r2,16
   12bb8:	8008d43a 	srli	r4,r16,16
   12bbc:	da000417 	ldw	r8,16(sp)
   12bc0:	d8c00217 	ldw	r3,8(sp)
   12bc4:	2084b03a 	or	r2,r4,r2
   12bc8:	d9c00517 	ldw	r7,20(sp)
   12bcc:	1200062e 	bgeu	r2,r8,12be8 <__divdf3+0x54c>
   12bd0:	1585883a 	add	r2,r2,r22
   12bd4:	393fffc4 	addi	r4,r7,-1
   12bd8:	1580c536 	bltu	r2,r22,12ef0 <__divdf3+0x854>
   12bdc:	1200c42e 	bgeu	r2,r8,12ef0 <__divdf3+0x854>
   12be0:	39ffff84 	addi	r7,r7,-2
   12be4:	1585883a 	add	r2,r2,r22
   12be8:	122bc83a 	sub	r21,r2,r8
   12bec:	a00b883a 	mov	r5,r20
   12bf0:	a809883a 	mov	r4,r21
   12bf4:	d8c00215 	stw	r3,8(sp)
   12bf8:	d9c00515 	stw	r7,20(sp)
   12bfc:	0011d340 	call	11d34 <__udivsi3>
   12c00:	9009883a 	mov	r4,r18
   12c04:	100b883a 	mov	r5,r2
   12c08:	d8800415 	stw	r2,16(sp)
   12c0c:	00144f80 	call	144f8 <__mulsi3>
   12c10:	a809883a 	mov	r4,r21
   12c14:	a00b883a 	mov	r5,r20
   12c18:	1025883a 	mov	r18,r2
   12c1c:	0011d980 	call	11d98 <__umodsi3>
   12c20:	1004943a 	slli	r2,r2,16
   12c24:	813fffcc 	andi	r4,r16,65535
   12c28:	d8c00217 	ldw	r3,8(sp)
   12c2c:	20a0b03a 	or	r16,r4,r2
   12c30:	d9c00517 	ldw	r7,20(sp)
   12c34:	da000417 	ldw	r8,16(sp)
   12c38:	8480062e 	bgeu	r16,r18,12c54 <__divdf3+0x5b8>
   12c3c:	85a1883a 	add	r16,r16,r22
   12c40:	40bfffc4 	addi	r2,r8,-1
   12c44:	8580ac36 	bltu	r16,r22,12ef8 <__divdf3+0x85c>
   12c48:	8480ab2e 	bgeu	r16,r18,12ef8 <__divdf3+0x85c>
   12c4c:	423fff84 	addi	r8,r8,-2
   12c50:	85a1883a 	add	r16,r16,r22
   12c54:	3804943a 	slli	r2,r7,16
   12c58:	84a1c83a 	sub	r16,r16,r18
   12c5c:	e009883a 	mov	r4,fp
   12c60:	1228b03a 	or	r20,r2,r8
   12c64:	a1ffffcc 	andi	r7,r20,65535
   12c68:	a024d43a 	srli	r18,r20,16
   12c6c:	380b883a 	mov	r5,r7
   12c70:	d8c00215 	stw	r3,8(sp)
   12c74:	d9c00515 	stw	r7,20(sp)
   12c78:	00144f80 	call	144f8 <__mulsi3>
   12c7c:	900b883a 	mov	r5,r18
   12c80:	e009883a 	mov	r4,fp
   12c84:	102b883a 	mov	r21,r2
   12c88:	00144f80 	call	144f8 <__mulsi3>
   12c8c:	900b883a 	mov	r5,r18
   12c90:	b809883a 	mov	r4,r23
   12c94:	1039883a 	mov	fp,r2
   12c98:	00144f80 	call	144f8 <__mulsi3>
   12c9c:	d9c00517 	ldw	r7,20(sp)
   12ca0:	b80b883a 	mov	r5,r23
   12ca4:	1025883a 	mov	r18,r2
   12ca8:	3809883a 	mov	r4,r7
   12cac:	00144f80 	call	144f8 <__mulsi3>
   12cb0:	a808d43a 	srli	r4,r21,16
   12cb4:	1705883a 	add	r2,r2,fp
   12cb8:	d8c00217 	ldw	r3,8(sp)
   12cbc:	2085883a 	add	r2,r4,r2
   12cc0:	1700022e 	bgeu	r2,fp,12ccc <__divdf3+0x630>
   12cc4:	01000074 	movhi	r4,1
   12cc8:	9125883a 	add	r18,r18,r4
   12ccc:	1008d43a 	srli	r4,r2,16
   12cd0:	1004943a 	slli	r2,r2,16
   12cd4:	ad7fffcc 	andi	r21,r21,65535
   12cd8:	2489883a 	add	r4,r4,r18
   12cdc:	1545883a 	add	r2,r2,r21
   12ce0:	81003836 	bltu	r16,r4,12dc4 <__divdf3+0x728>
   12ce4:	81003626 	beq	r16,r4,12dc0 <__divdf3+0x724>
   12ce8:	a5000054 	ori	r20,r20,1
   12cec:	1880ffc4 	addi	r2,r3,1023
   12cf0:	00bf2e0e 	bge	zero,r2,129ac <_gp+0xfffeb8a4>
   12cf4:	a10001cc 	andi	r4,r20,7
   12cf8:	20000726 	beq	r4,zero,12d18 <__divdf3+0x67c>
   12cfc:	a10003cc 	andi	r4,r20,15
   12d00:	01400104 	movi	r5,4
   12d04:	21400426 	beq	r4,r5,12d18 <__divdf3+0x67c>
   12d08:	a149883a 	add	r4,r20,r5
   12d0c:	2529803a 	cmpltu	r20,r4,r20
   12d10:	8d23883a 	add	r17,r17,r20
   12d14:	2029883a 	mov	r20,r4
   12d18:	8900402c 	andhi	r4,r17,256
   12d1c:	20000426 	beq	r4,zero,12d30 <__divdf3+0x694>
   12d20:	18810004 	addi	r2,r3,1024
   12d24:	00ffc034 	movhi	r3,65280
   12d28:	18ffffc4 	addi	r3,r3,-1
   12d2c:	88e2703a 	and	r17,r17,r3
   12d30:	00c1ff84 	movi	r3,2046
   12d34:	18beb416 	blt	r3,r2,12808 <_gp+0xfffeb700>
   12d38:	a028d0fa 	srli	r20,r20,3
   12d3c:	882a977a 	slli	r21,r17,29
   12d40:	8820927a 	slli	r16,r17,9
   12d44:	1081ffcc 	andi	r2,r2,2047
   12d48:	ad2ab03a 	or	r21,r21,r20
   12d4c:	8020d33a 	srli	r16,r16,12
   12d50:	9900004c 	andi	r4,r19,1
   12d54:	003eb006 	br	12818 <_gp+0xfffeb710>
   12d58:	8080022c 	andhi	r2,r16,8
   12d5c:	10001226 	beq	r2,zero,12da8 <__divdf3+0x70c>
   12d60:	8880022c 	andhi	r2,r17,8
   12d64:	1000101e 	bne	r2,zero,12da8 <__divdf3+0x70c>
   12d68:	00800434 	movhi	r2,16
   12d6c:	8c000234 	orhi	r16,r17,8
   12d70:	10bfffc4 	addi	r2,r2,-1
   12d74:	b809883a 	mov	r4,r23
   12d78:	80a0703a 	and	r16,r16,r2
   12d7c:	a02b883a 	mov	r21,r20
   12d80:	003f0806 	br	129a4 <_gp+0xfffeb89c>
   12d84:	008000c4 	movi	r2,3
   12d88:	3880b126 	beq	r7,r2,13050 <__divdf3+0x9b4>
   12d8c:	00800044 	movi	r2,1
   12d90:	38805b1e 	bne	r7,r2,12f00 <__divdf3+0x864>
   12d94:	e009883a 	mov	r4,fp
   12d98:	0005883a 	mov	r2,zero
   12d9c:	0021883a 	mov	r16,zero
   12da0:	002b883a 	mov	r21,zero
   12da4:	003e9c06 	br	12818 <_gp+0xfffeb710>
   12da8:	00800434 	movhi	r2,16
   12dac:	84000234 	orhi	r16,r16,8
   12db0:	10bfffc4 	addi	r2,r2,-1
   12db4:	b009883a 	mov	r4,r22
   12db8:	80a0703a 	and	r16,r16,r2
   12dbc:	003ef906 	br	129a4 <_gp+0xfffeb89c>
   12dc0:	103fca26 	beq	r2,zero,12cec <_gp+0xfffebbe4>
   12dc4:	b421883a 	add	r16,r22,r16
   12dc8:	a17fffc4 	addi	r5,r20,-1
   12dcc:	8580422e 	bgeu	r16,r22,12ed8 <__divdf3+0x83c>
   12dd0:	2829883a 	mov	r20,r5
   12dd4:	813fc41e 	bne	r16,r4,12ce8 <_gp+0xfffebbe0>
   12dd8:	d9800017 	ldw	r6,0(sp)
   12ddc:	30bfc21e 	bne	r6,r2,12ce8 <_gp+0xfffebbe0>
   12de0:	003fc206 	br	12cec <_gp+0xfffebbe4>
   12de4:	143ff604 	addi	r16,r2,-40
   12de8:	8c20983a 	sll	r16,r17,r16
   12dec:	002b883a 	mov	r21,zero
   12df0:	003eb406 	br	128c4 <_gp+0xfffeb7bc>
   12df4:	d9800215 	stw	r6,8(sp)
   12df8:	d9c00515 	stw	r7,20(sp)
   12dfc:	da000415 	stw	r8,16(sp)
   12e00:	00144940 	call	14494 <__clzsi2>
   12e04:	10800804 	addi	r2,r2,32
   12e08:	da000417 	ldw	r8,16(sp)
   12e0c:	d9c00517 	ldw	r7,20(sp)
   12e10:	d9800217 	ldw	r6,8(sp)
   12e14:	003ea106 	br	1289c <_gp+0xfffeb794>
   12e18:	147ff604 	addi	r17,r2,-40
   12e1c:	3462983a 	sll	r17,r6,r17
   12e20:	0029883a 	mov	r20,zero
   12e24:	003ec906 	br	1294c <_gp+0xfffeb844>
   12e28:	3009883a 	mov	r4,r6
   12e2c:	d9400115 	stw	r5,4(sp)
   12e30:	d9800215 	stw	r6,8(sp)
   12e34:	da000415 	stw	r8,16(sp)
   12e38:	da400315 	stw	r9,12(sp)
   12e3c:	00144940 	call	14494 <__clzsi2>
   12e40:	10800804 	addi	r2,r2,32
   12e44:	da400317 	ldw	r9,12(sp)
   12e48:	da000417 	ldw	r8,16(sp)
   12e4c:	d9800217 	ldw	r6,8(sp)
   12e50:	d9400117 	ldw	r5,4(sp)
   12e54:	003eb306 	br	12924 <_gp+0xfffeb81c>
   12e58:	d9800017 	ldw	r6,0(sp)
   12e5c:	a9ab883a 	add	r21,r21,r6
   12e60:	a98b803a 	cmpltu	r5,r21,r6
   12e64:	2d8b883a 	add	r5,r5,r22
   12e68:	2a11883a 	add	r8,r5,r8
   12e6c:	897fffc4 	addi	r5,r17,-1
   12e70:	b2000c2e 	bgeu	r22,r8,12ea4 <__divdf3+0x808>
   12e74:	41003f36 	bltu	r8,r4,12f74 <__divdf3+0x8d8>
   12e78:	22006c26 	beq	r4,r8,1302c <__divdf3+0x990>
   12e7c:	4109c83a 	sub	r4,r8,r4
   12e80:	2823883a 	mov	r17,r5
   12e84:	003f3b06 	br	12b74 <_gp+0xfffeba6c>
   12e88:	ad3ed336 	bltu	r21,r20,129d8 <_gp+0xfffeb8d0>
   12e8c:	a804d07a 	srli	r2,r21,1
   12e90:	802e97fa 	slli	r23,r16,31
   12e94:	a82a97fa 	slli	r21,r21,31
   12e98:	8020d07a 	srli	r16,r16,1
   12e9c:	b8aeb03a 	or	r23,r23,r2
   12ea0:	003ed006 	br	129e4 <_gp+0xfffeb8dc>
   12ea4:	b23ff51e 	bne	r22,r8,12e7c <_gp+0xfffebd74>
   12ea8:	d9800017 	ldw	r6,0(sp)
   12eac:	a9bff12e 	bgeu	r21,r6,12e74 <_gp+0xfffebd6c>
   12eb0:	b109c83a 	sub	r4,r22,r4
   12eb4:	2823883a 	mov	r17,r5
   12eb8:	003f2e06 	br	12b74 <_gp+0xfffeba6c>
   12ebc:	2021883a 	mov	r16,r4
   12ec0:	003eff06 	br	12ac0 <_gp+0xfffeb9b8>
   12ec4:	2023883a 	mov	r17,r4
   12ec8:	003ee406 	br	12a5c <_gp+0xfffeb954>
   12ecc:	a8bfe236 	bltu	r21,r2,12e58 <_gp+0xfffebd50>
   12ed0:	0009883a 	mov	r4,zero
   12ed4:	003f2706 	br	12b74 <_gp+0xfffeba6c>
   12ed8:	81002d36 	bltu	r16,r4,12f90 <__divdf3+0x8f4>
   12edc:	24005626 	beq	r4,r16,13038 <__divdf3+0x99c>
   12ee0:	2829883a 	mov	r20,r5
   12ee4:	003f8006 	br	12ce8 <_gp+0xfffebbe0>
   12ee8:	053fffc4 	movi	r20,-1
   12eec:	003f7f06 	br	12cec <_gp+0xfffebbe4>
   12ef0:	200f883a 	mov	r7,r4
   12ef4:	003f3c06 	br	12be8 <_gp+0xfffebae0>
   12ef8:	1011883a 	mov	r8,r2
   12efc:	003f5506 	br	12c54 <_gp+0xfffebb4c>
   12f00:	e027883a 	mov	r19,fp
   12f04:	003f7906 	br	12cec <_gp+0xfffebbe4>
   12f08:	010007c4 	movi	r4,31
   12f0c:	20c02816 	blt	r4,r3,12fb0 <__divdf3+0x914>
   12f10:	00800804 	movi	r2,32
   12f14:	10c5c83a 	sub	r2,r2,r3
   12f18:	888a983a 	sll	r5,r17,r2
   12f1c:	a0c8d83a 	srl	r4,r20,r3
   12f20:	a084983a 	sll	r2,r20,r2
   12f24:	88e2d83a 	srl	r17,r17,r3
   12f28:	2906b03a 	or	r3,r5,r4
   12f2c:	1004c03a 	cmpne	r2,r2,zero
   12f30:	1886b03a 	or	r3,r3,r2
   12f34:	188001cc 	andi	r2,r3,7
   12f38:	10000726 	beq	r2,zero,12f58 <__divdf3+0x8bc>
   12f3c:	188003cc 	andi	r2,r3,15
   12f40:	01000104 	movi	r4,4
   12f44:	11000426 	beq	r2,r4,12f58 <__divdf3+0x8bc>
   12f48:	1805883a 	mov	r2,r3
   12f4c:	10c00104 	addi	r3,r2,4
   12f50:	1885803a 	cmpltu	r2,r3,r2
   12f54:	88a3883a 	add	r17,r17,r2
   12f58:	8880202c 	andhi	r2,r17,128
   12f5c:	10002926 	beq	r2,zero,13004 <__divdf3+0x968>
   12f60:	9900004c 	andi	r4,r19,1
   12f64:	00800044 	movi	r2,1
   12f68:	0021883a 	mov	r16,zero
   12f6c:	002b883a 	mov	r21,zero
   12f70:	003e2906 	br	12818 <_gp+0xfffeb710>
   12f74:	d9800017 	ldw	r6,0(sp)
   12f78:	8c7fff84 	addi	r17,r17,-2
   12f7c:	a9ab883a 	add	r21,r21,r6
   12f80:	a98b803a 	cmpltu	r5,r21,r6
   12f84:	2d8b883a 	add	r5,r5,r22
   12f88:	2a11883a 	add	r8,r5,r8
   12f8c:	003ef806 	br	12b70 <_gp+0xfffeba68>
   12f90:	d9800017 	ldw	r6,0(sp)
   12f94:	318f883a 	add	r7,r6,r6
   12f98:	398b803a 	cmpltu	r5,r7,r6
   12f9c:	2d8d883a 	add	r6,r5,r22
   12fa0:	81a1883a 	add	r16,r16,r6
   12fa4:	a17fff84 	addi	r5,r20,-2
   12fa8:	d9c00015 	stw	r7,0(sp)
   12fac:	003f8806 	br	12dd0 <_gp+0xfffebcc8>
   12fb0:	013ff844 	movi	r4,-31
   12fb4:	2085c83a 	sub	r2,r4,r2
   12fb8:	8888d83a 	srl	r4,r17,r2
   12fbc:	00800804 	movi	r2,32
   12fc0:	18802126 	beq	r3,r2,13048 <__divdf3+0x9ac>
   12fc4:	04001004 	movi	r16,64
   12fc8:	80c7c83a 	sub	r3,r16,r3
   12fcc:	88e0983a 	sll	r16,r17,r3
   12fd0:	8504b03a 	or	r2,r16,r20
   12fd4:	1004c03a 	cmpne	r2,r2,zero
   12fd8:	2084b03a 	or	r2,r4,r2
   12fdc:	144001cc 	andi	r17,r2,7
   12fe0:	88000d1e 	bne	r17,zero,13018 <__divdf3+0x97c>
   12fe4:	0021883a 	mov	r16,zero
   12fe8:	102ad0fa 	srli	r21,r2,3
   12fec:	9900004c 	andi	r4,r19,1
   12ff0:	0005883a 	mov	r2,zero
   12ff4:	ac6ab03a 	or	r21,r21,r17
   12ff8:	003e0706 	br	12818 <_gp+0xfffeb710>
   12ffc:	1007883a 	mov	r3,r2
   13000:	0023883a 	mov	r17,zero
   13004:	8820927a 	slli	r16,r17,9
   13008:	1805883a 	mov	r2,r3
   1300c:	8822977a 	slli	r17,r17,29
   13010:	8020d33a 	srli	r16,r16,12
   13014:	003ff406 	br	12fe8 <_gp+0xfffebee0>
   13018:	10c003cc 	andi	r3,r2,15
   1301c:	01000104 	movi	r4,4
   13020:	193ff626 	beq	r3,r4,12ffc <_gp+0xfffebef4>
   13024:	0023883a 	mov	r17,zero
   13028:	003fc806 	br	12f4c <_gp+0xfffebe44>
   1302c:	a8bfd136 	bltu	r21,r2,12f74 <_gp+0xfffebe6c>
   13030:	2823883a 	mov	r17,r5
   13034:	003fa606 	br	12ed0 <_gp+0xfffebdc8>
   13038:	d9800017 	ldw	r6,0(sp)
   1303c:	30bfd436 	bltu	r6,r2,12f90 <_gp+0xfffebe88>
   13040:	2829883a 	mov	r20,r5
   13044:	003f6406 	br	12dd8 <_gp+0xfffebcd0>
   13048:	0021883a 	mov	r16,zero
   1304c:	003fe006 	br	12fd0 <_gp+0xfffebec8>
   13050:	00800434 	movhi	r2,16
   13054:	8c000234 	orhi	r16,r17,8
   13058:	10bfffc4 	addi	r2,r2,-1
   1305c:	e009883a 	mov	r4,fp
   13060:	80a0703a 	and	r16,r16,r2
   13064:	a02b883a 	mov	r21,r20
   13068:	003e4e06 	br	129a4 <_gp+0xfffeb89c>

0001306c <__eqdf2>:
   1306c:	2804d53a 	srli	r2,r5,20
   13070:	3806d53a 	srli	r3,r7,20
   13074:	02000434 	movhi	r8,16
   13078:	423fffc4 	addi	r8,r8,-1
   1307c:	1081ffcc 	andi	r2,r2,2047
   13080:	0281ffc4 	movi	r10,2047
   13084:	2a12703a 	and	r9,r5,r8
   13088:	18c1ffcc 	andi	r3,r3,2047
   1308c:	3a10703a 	and	r8,r7,r8
   13090:	280ad7fa 	srli	r5,r5,31
   13094:	380ed7fa 	srli	r7,r7,31
   13098:	12801026 	beq	r2,r10,130dc <__eqdf2+0x70>
   1309c:	0281ffc4 	movi	r10,2047
   130a0:	1a800a26 	beq	r3,r10,130cc <__eqdf2+0x60>
   130a4:	10c00226 	beq	r2,r3,130b0 <__eqdf2+0x44>
   130a8:	00800044 	movi	r2,1
   130ac:	f800283a 	ret
   130b0:	4a3ffd1e 	bne	r9,r8,130a8 <_gp+0xfffebfa0>
   130b4:	21bffc1e 	bne	r4,r6,130a8 <_gp+0xfffebfa0>
   130b8:	29c00c26 	beq	r5,r7,130ec <__eqdf2+0x80>
   130bc:	103ffa1e 	bne	r2,zero,130a8 <_gp+0xfffebfa0>
   130c0:	2244b03a 	or	r2,r4,r9
   130c4:	1004c03a 	cmpne	r2,r2,zero
   130c8:	f800283a 	ret
   130cc:	3214b03a 	or	r10,r6,r8
   130d0:	503ff426 	beq	r10,zero,130a4 <_gp+0xfffebf9c>
   130d4:	00800044 	movi	r2,1
   130d8:	f800283a 	ret
   130dc:	2254b03a 	or	r10,r4,r9
   130e0:	503fee26 	beq	r10,zero,1309c <_gp+0xfffebf94>
   130e4:	00800044 	movi	r2,1
   130e8:	f800283a 	ret
   130ec:	0005883a 	mov	r2,zero
   130f0:	f800283a 	ret

000130f4 <__gedf2>:
   130f4:	2804d53a 	srli	r2,r5,20
   130f8:	3806d53a 	srli	r3,r7,20
   130fc:	02000434 	movhi	r8,16
   13100:	423fffc4 	addi	r8,r8,-1
   13104:	1081ffcc 	andi	r2,r2,2047
   13108:	0241ffc4 	movi	r9,2047
   1310c:	2a14703a 	and	r10,r5,r8
   13110:	18c1ffcc 	andi	r3,r3,2047
   13114:	3a10703a 	and	r8,r7,r8
   13118:	280ad7fa 	srli	r5,r5,31
   1311c:	380ed7fa 	srli	r7,r7,31
   13120:	12401d26 	beq	r2,r9,13198 <__gedf2+0xa4>
   13124:	0241ffc4 	movi	r9,2047
   13128:	1a401226 	beq	r3,r9,13174 <__gedf2+0x80>
   1312c:	1000081e 	bne	r2,zero,13150 <__gedf2+0x5c>
   13130:	2296b03a 	or	r11,r4,r10
   13134:	5813003a 	cmpeq	r9,r11,zero
   13138:	1800091e 	bne	r3,zero,13160 <__gedf2+0x6c>
   1313c:	3218b03a 	or	r12,r6,r8
   13140:	6000071e 	bne	r12,zero,13160 <__gedf2+0x6c>
   13144:	0005883a 	mov	r2,zero
   13148:	5800101e 	bne	r11,zero,1318c <__gedf2+0x98>
   1314c:	f800283a 	ret
   13150:	18000c1e 	bne	r3,zero,13184 <__gedf2+0x90>
   13154:	3212b03a 	or	r9,r6,r8
   13158:	48000c26 	beq	r9,zero,1318c <__gedf2+0x98>
   1315c:	0013883a 	mov	r9,zero
   13160:	39c03fcc 	andi	r7,r7,255
   13164:	48000826 	beq	r9,zero,13188 <__gedf2+0x94>
   13168:	38000926 	beq	r7,zero,13190 <__gedf2+0x9c>
   1316c:	00800044 	movi	r2,1
   13170:	f800283a 	ret
   13174:	3212b03a 	or	r9,r6,r8
   13178:	483fec26 	beq	r9,zero,1312c <_gp+0xfffec024>
   1317c:	00bfff84 	movi	r2,-2
   13180:	f800283a 	ret
   13184:	39c03fcc 	andi	r7,r7,255
   13188:	29c00626 	beq	r5,r7,131a4 <__gedf2+0xb0>
   1318c:	283ff726 	beq	r5,zero,1316c <_gp+0xfffec064>
   13190:	00bfffc4 	movi	r2,-1
   13194:	f800283a 	ret
   13198:	2292b03a 	or	r9,r4,r10
   1319c:	483fe126 	beq	r9,zero,13124 <_gp+0xfffec01c>
   131a0:	003ff606 	br	1317c <_gp+0xfffec074>
   131a4:	18bff916 	blt	r3,r2,1318c <_gp+0xfffec084>
   131a8:	10c00316 	blt	r2,r3,131b8 <__gedf2+0xc4>
   131ac:	42bff736 	bltu	r8,r10,1318c <_gp+0xfffec084>
   131b0:	52000326 	beq	r10,r8,131c0 <__gedf2+0xcc>
   131b4:	5200042e 	bgeu	r10,r8,131c8 <__gedf2+0xd4>
   131b8:	283fec1e 	bne	r5,zero,1316c <_gp+0xfffec064>
   131bc:	003ff406 	br	13190 <_gp+0xfffec088>
   131c0:	313ff236 	bltu	r6,r4,1318c <_gp+0xfffec084>
   131c4:	21bffc36 	bltu	r4,r6,131b8 <_gp+0xfffec0b0>
   131c8:	0005883a 	mov	r2,zero
   131cc:	f800283a 	ret

000131d0 <__muldf3>:
   131d0:	deffee04 	addi	sp,sp,-72
   131d4:	dd000c15 	stw	r20,48(sp)
   131d8:	2828d53a 	srli	r20,r5,20
   131dc:	ddc00f15 	stw	r23,60(sp)
   131e0:	282ed7fa 	srli	r23,r5,31
   131e4:	dc000815 	stw	r16,32(sp)
   131e8:	04000434 	movhi	r16,16
   131ec:	dcc00b15 	stw	r19,44(sp)
   131f0:	843fffc4 	addi	r16,r16,-1
   131f4:	dfc01115 	stw	ra,68(sp)
   131f8:	df001015 	stw	fp,64(sp)
   131fc:	dd800e15 	stw	r22,56(sp)
   13200:	dd400d15 	stw	r21,52(sp)
   13204:	dc800a15 	stw	r18,40(sp)
   13208:	dc400915 	stw	r17,36(sp)
   1320c:	a501ffcc 	andi	r20,r20,2047
   13210:	2c20703a 	and	r16,r5,r16
   13214:	b827883a 	mov	r19,r23
   13218:	ba403fcc 	andi	r9,r23,255
   1321c:	a0006026 	beq	r20,zero,133a0 <__muldf3+0x1d0>
   13220:	0081ffc4 	movi	r2,2047
   13224:	202d883a 	mov	r22,r4
   13228:	a0803626 	beq	r20,r2,13304 <__muldf3+0x134>
   1322c:	84000434 	orhi	r16,r16,16
   13230:	200ad77a 	srli	r5,r4,29
   13234:	800490fa 	slli	r2,r16,3
   13238:	202c90fa 	slli	r22,r4,3
   1323c:	a53f0044 	addi	r20,r20,-1023
   13240:	28a0b03a 	or	r16,r5,r2
   13244:	002b883a 	mov	r21,zero
   13248:	000b883a 	mov	r5,zero
   1324c:	3804d53a 	srli	r2,r7,20
   13250:	3838d7fa 	srli	fp,r7,31
   13254:	04400434 	movhi	r17,16
   13258:	8c7fffc4 	addi	r17,r17,-1
   1325c:	1081ffcc 	andi	r2,r2,2047
   13260:	3025883a 	mov	r18,r6
   13264:	3c62703a 	and	r17,r7,r17
   13268:	e2803fcc 	andi	r10,fp,255
   1326c:	10006d26 	beq	r2,zero,13424 <__muldf3+0x254>
   13270:	00c1ffc4 	movi	r3,2047
   13274:	10c06526 	beq	r2,r3,1340c <__muldf3+0x23c>
   13278:	8c400434 	orhi	r17,r17,16
   1327c:	300ed77a 	srli	r7,r6,29
   13280:	880690fa 	slli	r3,r17,3
   13284:	302490fa 	slli	r18,r6,3
   13288:	10bf0044 	addi	r2,r2,-1023
   1328c:	38e2b03a 	or	r17,r7,r3
   13290:	000f883a 	mov	r7,zero
   13294:	a087883a 	add	r3,r20,r2
   13298:	010003c4 	movi	r4,15
   1329c:	3d44b03a 	or	r2,r7,r21
   132a0:	e5ccf03a 	xor	r6,fp,r23
   132a4:	1a000044 	addi	r8,r3,1
   132a8:	20809b36 	bltu	r4,r2,13518 <__muldf3+0x348>
   132ac:	100490ba 	slli	r2,r2,2
   132b0:	01000074 	movhi	r4,1
   132b4:	210cb104 	addi	r4,r4,12996
   132b8:	1105883a 	add	r2,r2,r4
   132bc:	10800017 	ldw	r2,0(r2)
   132c0:	1000683a 	jmp	r2
   132c4:	00013518 	cmpnei	zero,zero,1236
   132c8:	00013324 	muli	zero,zero,1228
   132cc:	00013324 	muli	zero,zero,1228
   132d0:	00013320 	cmpeqi	zero,zero,1228
   132d4:	000134f4 	movhi	zero,1235
   132d8:	000134f4 	movhi	zero,1235
   132dc:	000134dc 	xori	zero,zero,1235
   132e0:	00013320 	cmpeqi	zero,zero,1228
   132e4:	000134f4 	movhi	zero,1235
   132e8:	000134dc 	xori	zero,zero,1235
   132ec:	000134f4 	movhi	zero,1235
   132f0:	00013320 	cmpeqi	zero,zero,1228
   132f4:	00013504 	movi	zero,1236
   132f8:	00013504 	movi	zero,1236
   132fc:	00013504 	movi	zero,1236
   13300:	00013864 	muli	zero,zero,1249
   13304:	2404b03a 	or	r2,r4,r16
   13308:	1000711e 	bne	r2,zero,134d0 <__muldf3+0x300>
   1330c:	05400204 	movi	r21,8
   13310:	0021883a 	mov	r16,zero
   13314:	002d883a 	mov	r22,zero
   13318:	01400084 	movi	r5,2
   1331c:	003fcb06 	br	1324c <_gp+0xfffec144>
   13320:	500d883a 	mov	r6,r10
   13324:	00800084 	movi	r2,2
   13328:	38805926 	beq	r7,r2,13490 <__muldf3+0x2c0>
   1332c:	008000c4 	movi	r2,3
   13330:	3881bb26 	beq	r7,r2,13a20 <__muldf3+0x850>
   13334:	00800044 	movi	r2,1
   13338:	3881961e 	bne	r7,r2,13994 <__muldf3+0x7c4>
   1333c:	3027883a 	mov	r19,r6
   13340:	0005883a 	mov	r2,zero
   13344:	0021883a 	mov	r16,zero
   13348:	002d883a 	mov	r22,zero
   1334c:	1004953a 	slli	r2,r2,20
   13350:	98c03fcc 	andi	r3,r19,255
   13354:	04400434 	movhi	r17,16
   13358:	8c7fffc4 	addi	r17,r17,-1
   1335c:	180697fa 	slli	r3,r3,31
   13360:	8460703a 	and	r16,r16,r17
   13364:	80a0b03a 	or	r16,r16,r2
   13368:	80c6b03a 	or	r3,r16,r3
   1336c:	b005883a 	mov	r2,r22
   13370:	dfc01117 	ldw	ra,68(sp)
   13374:	df001017 	ldw	fp,64(sp)
   13378:	ddc00f17 	ldw	r23,60(sp)
   1337c:	dd800e17 	ldw	r22,56(sp)
   13380:	dd400d17 	ldw	r21,52(sp)
   13384:	dd000c17 	ldw	r20,48(sp)
   13388:	dcc00b17 	ldw	r19,44(sp)
   1338c:	dc800a17 	ldw	r18,40(sp)
   13390:	dc400917 	ldw	r17,36(sp)
   13394:	dc000817 	ldw	r16,32(sp)
   13398:	dec01204 	addi	sp,sp,72
   1339c:	f800283a 	ret
   133a0:	2404b03a 	or	r2,r4,r16
   133a4:	202b883a 	mov	r21,r4
   133a8:	10004426 	beq	r2,zero,134bc <__muldf3+0x2ec>
   133ac:	80015126 	beq	r16,zero,138f4 <__muldf3+0x724>
   133b0:	8009883a 	mov	r4,r16
   133b4:	d9800715 	stw	r6,28(sp)
   133b8:	d9c00215 	stw	r7,8(sp)
   133bc:	da400415 	stw	r9,16(sp)
   133c0:	00144940 	call	14494 <__clzsi2>
   133c4:	d9800717 	ldw	r6,28(sp)
   133c8:	d9c00217 	ldw	r7,8(sp)
   133cc:	da400417 	ldw	r9,16(sp)
   133d0:	113ffd44 	addi	r4,r2,-11
   133d4:	00c00704 	movi	r3,28
   133d8:	19014216 	blt	r3,r4,138e4 <__muldf3+0x714>
   133dc:	00c00744 	movi	r3,29
   133e0:	15bffe04 	addi	r22,r2,-8
   133e4:	1907c83a 	sub	r3,r3,r4
   133e8:	85a0983a 	sll	r16,r16,r22
   133ec:	a8c6d83a 	srl	r3,r21,r3
   133f0:	adac983a 	sll	r22,r21,r22
   133f4:	1c20b03a 	or	r16,r3,r16
   133f8:	1080fcc4 	addi	r2,r2,1011
   133fc:	00a9c83a 	sub	r20,zero,r2
   13400:	002b883a 	mov	r21,zero
   13404:	000b883a 	mov	r5,zero
   13408:	003f9006 	br	1324c <_gp+0xfffec144>
   1340c:	3446b03a 	or	r3,r6,r17
   13410:	1800281e 	bne	r3,zero,134b4 <__muldf3+0x2e4>
   13414:	0023883a 	mov	r17,zero
   13418:	0025883a 	mov	r18,zero
   1341c:	01c00084 	movi	r7,2
   13420:	003f9c06 	br	13294 <_gp+0xfffec18c>
   13424:	3446b03a 	or	r3,r6,r17
   13428:	18001e26 	beq	r3,zero,134a4 <__muldf3+0x2d4>
   1342c:	88012126 	beq	r17,zero,138b4 <__muldf3+0x6e4>
   13430:	8809883a 	mov	r4,r17
   13434:	d9400215 	stw	r5,8(sp)
   13438:	d9800715 	stw	r6,28(sp)
   1343c:	da400415 	stw	r9,16(sp)
   13440:	da800315 	stw	r10,12(sp)
   13444:	00144940 	call	14494 <__clzsi2>
   13448:	d9400217 	ldw	r5,8(sp)
   1344c:	d9800717 	ldw	r6,28(sp)
   13450:	da400417 	ldw	r9,16(sp)
   13454:	da800317 	ldw	r10,12(sp)
   13458:	113ffd44 	addi	r4,r2,-11
   1345c:	00c00704 	movi	r3,28
   13460:	19011016 	blt	r3,r4,138a4 <__muldf3+0x6d4>
   13464:	00c00744 	movi	r3,29
   13468:	14bffe04 	addi	r18,r2,-8
   1346c:	1907c83a 	sub	r3,r3,r4
   13470:	8ca2983a 	sll	r17,r17,r18
   13474:	30c6d83a 	srl	r3,r6,r3
   13478:	34a4983a 	sll	r18,r6,r18
   1347c:	1c62b03a 	or	r17,r3,r17
   13480:	1080fcc4 	addi	r2,r2,1011
   13484:	0085c83a 	sub	r2,zero,r2
   13488:	000f883a 	mov	r7,zero
   1348c:	003f8106 	br	13294 <_gp+0xfffec18c>
   13490:	3027883a 	mov	r19,r6
   13494:	0081ffc4 	movi	r2,2047
   13498:	0021883a 	mov	r16,zero
   1349c:	002d883a 	mov	r22,zero
   134a0:	003faa06 	br	1334c <_gp+0xfffec244>
   134a4:	0023883a 	mov	r17,zero
   134a8:	0025883a 	mov	r18,zero
   134ac:	01c00044 	movi	r7,1
   134b0:	003f7806 	br	13294 <_gp+0xfffec18c>
   134b4:	01c000c4 	movi	r7,3
   134b8:	003f7606 	br	13294 <_gp+0xfffec18c>
   134bc:	05400104 	movi	r21,4
   134c0:	0021883a 	mov	r16,zero
   134c4:	002d883a 	mov	r22,zero
   134c8:	01400044 	movi	r5,1
   134cc:	003f5f06 	br	1324c <_gp+0xfffec144>
   134d0:	05400304 	movi	r21,12
   134d4:	014000c4 	movi	r5,3
   134d8:	003f5c06 	br	1324c <_gp+0xfffec144>
   134dc:	04000434 	movhi	r16,16
   134e0:	0027883a 	mov	r19,zero
   134e4:	843fffc4 	addi	r16,r16,-1
   134e8:	05bfffc4 	movi	r22,-1
   134ec:	0081ffc4 	movi	r2,2047
   134f0:	003f9606 	br	1334c <_gp+0xfffec244>
   134f4:	8023883a 	mov	r17,r16
   134f8:	b025883a 	mov	r18,r22
   134fc:	280f883a 	mov	r7,r5
   13500:	003f8806 	br	13324 <_gp+0xfffec21c>
   13504:	8023883a 	mov	r17,r16
   13508:	b025883a 	mov	r18,r22
   1350c:	480d883a 	mov	r6,r9
   13510:	280f883a 	mov	r7,r5
   13514:	003f8306 	br	13324 <_gp+0xfffec21c>
   13518:	b026d43a 	srli	r19,r22,16
   1351c:	902ed43a 	srli	r23,r18,16
   13520:	b5bfffcc 	andi	r22,r22,65535
   13524:	94bfffcc 	andi	r18,r18,65535
   13528:	b00b883a 	mov	r5,r22
   1352c:	9009883a 	mov	r4,r18
   13530:	d8c00515 	stw	r3,20(sp)
   13534:	d9800715 	stw	r6,28(sp)
   13538:	da000615 	stw	r8,24(sp)
   1353c:	00144f80 	call	144f8 <__mulsi3>
   13540:	980b883a 	mov	r5,r19
   13544:	9009883a 	mov	r4,r18
   13548:	1029883a 	mov	r20,r2
   1354c:	00144f80 	call	144f8 <__mulsi3>
   13550:	b80b883a 	mov	r5,r23
   13554:	9809883a 	mov	r4,r19
   13558:	102b883a 	mov	r21,r2
   1355c:	00144f80 	call	144f8 <__mulsi3>
   13560:	b809883a 	mov	r4,r23
   13564:	b00b883a 	mov	r5,r22
   13568:	1039883a 	mov	fp,r2
   1356c:	00144f80 	call	144f8 <__mulsi3>
   13570:	a008d43a 	srli	r4,r20,16
   13574:	1545883a 	add	r2,r2,r21
   13578:	d8c00517 	ldw	r3,20(sp)
   1357c:	2085883a 	add	r2,r4,r2
   13580:	d9800717 	ldw	r6,28(sp)
   13584:	da000617 	ldw	r8,24(sp)
   13588:	1540022e 	bgeu	r2,r21,13594 <__muldf3+0x3c4>
   1358c:	01000074 	movhi	r4,1
   13590:	e139883a 	add	fp,fp,r4
   13594:	100e943a 	slli	r7,r2,16
   13598:	1004d43a 	srli	r2,r2,16
   1359c:	882ad43a 	srli	r21,r17,16
   135a0:	a53fffcc 	andi	r20,r20,65535
   135a4:	8c7fffcc 	andi	r17,r17,65535
   135a8:	3d29883a 	add	r20,r7,r20
   135ac:	b00b883a 	mov	r5,r22
   135b0:	8809883a 	mov	r4,r17
   135b4:	d8c00515 	stw	r3,20(sp)
   135b8:	d9800715 	stw	r6,28(sp)
   135bc:	da000615 	stw	r8,24(sp)
   135c0:	dd000115 	stw	r20,4(sp)
   135c4:	d8800015 	stw	r2,0(sp)
   135c8:	00144f80 	call	144f8 <__mulsi3>
   135cc:	980b883a 	mov	r5,r19
   135d0:	8809883a 	mov	r4,r17
   135d4:	d8800215 	stw	r2,8(sp)
   135d8:	00144f80 	call	144f8 <__mulsi3>
   135dc:	9809883a 	mov	r4,r19
   135e0:	a80b883a 	mov	r5,r21
   135e4:	1029883a 	mov	r20,r2
   135e8:	00144f80 	call	144f8 <__mulsi3>
   135ec:	b00b883a 	mov	r5,r22
   135f0:	a809883a 	mov	r4,r21
   135f4:	d8800415 	stw	r2,16(sp)
   135f8:	00144f80 	call	144f8 <__mulsi3>
   135fc:	d9c00217 	ldw	r7,8(sp)
   13600:	1505883a 	add	r2,r2,r20
   13604:	d8c00517 	ldw	r3,20(sp)
   13608:	3826d43a 	srli	r19,r7,16
   1360c:	d9800717 	ldw	r6,28(sp)
   13610:	da000617 	ldw	r8,24(sp)
   13614:	9885883a 	add	r2,r19,r2
   13618:	da400417 	ldw	r9,16(sp)
   1361c:	1500022e 	bgeu	r2,r20,13628 <__muldf3+0x458>
   13620:	01000074 	movhi	r4,1
   13624:	4913883a 	add	r9,r9,r4
   13628:	1028d43a 	srli	r20,r2,16
   1362c:	1004943a 	slli	r2,r2,16
   13630:	802cd43a 	srli	r22,r16,16
   13634:	843fffcc 	andi	r16,r16,65535
   13638:	3cffffcc 	andi	r19,r7,65535
   1363c:	9009883a 	mov	r4,r18
   13640:	800b883a 	mov	r5,r16
   13644:	a269883a 	add	r20,r20,r9
   13648:	d8c00515 	stw	r3,20(sp)
   1364c:	d9800715 	stw	r6,28(sp)
   13650:	da000615 	stw	r8,24(sp)
   13654:	14e7883a 	add	r19,r2,r19
   13658:	00144f80 	call	144f8 <__mulsi3>
   1365c:	9009883a 	mov	r4,r18
   13660:	b00b883a 	mov	r5,r22
   13664:	d8800315 	stw	r2,12(sp)
   13668:	00144f80 	call	144f8 <__mulsi3>
   1366c:	b809883a 	mov	r4,r23
   13670:	b00b883a 	mov	r5,r22
   13674:	d8800215 	stw	r2,8(sp)
   13678:	00144f80 	call	144f8 <__mulsi3>
   1367c:	b80b883a 	mov	r5,r23
   13680:	8009883a 	mov	r4,r16
   13684:	d8800415 	stw	r2,16(sp)
   13688:	00144f80 	call	144f8 <__mulsi3>
   1368c:	da800317 	ldw	r10,12(sp)
   13690:	d9c00217 	ldw	r7,8(sp)
   13694:	d9000017 	ldw	r4,0(sp)
   13698:	502ed43a 	srli	r23,r10,16
   1369c:	11c5883a 	add	r2,r2,r7
   136a0:	24e5883a 	add	r18,r4,r19
   136a4:	b885883a 	add	r2,r23,r2
   136a8:	d8c00517 	ldw	r3,20(sp)
   136ac:	d9800717 	ldw	r6,28(sp)
   136b0:	da000617 	ldw	r8,24(sp)
   136b4:	da400417 	ldw	r9,16(sp)
   136b8:	11c0022e 	bgeu	r2,r7,136c4 <__muldf3+0x4f4>
   136bc:	01000074 	movhi	r4,1
   136c0:	4913883a 	add	r9,r9,r4
   136c4:	100ed43a 	srli	r7,r2,16
   136c8:	1004943a 	slli	r2,r2,16
   136cc:	55ffffcc 	andi	r23,r10,65535
   136d0:	3a53883a 	add	r9,r7,r9
   136d4:	8809883a 	mov	r4,r17
   136d8:	800b883a 	mov	r5,r16
   136dc:	d8c00515 	stw	r3,20(sp)
   136e0:	d9800715 	stw	r6,28(sp)
   136e4:	da000615 	stw	r8,24(sp)
   136e8:	da400415 	stw	r9,16(sp)
   136ec:	15ef883a 	add	r23,r2,r23
   136f0:	00144f80 	call	144f8 <__mulsi3>
   136f4:	8809883a 	mov	r4,r17
   136f8:	b00b883a 	mov	r5,r22
   136fc:	d8800215 	stw	r2,8(sp)
   13700:	00144f80 	call	144f8 <__mulsi3>
   13704:	b00b883a 	mov	r5,r22
   13708:	a809883a 	mov	r4,r21
   1370c:	d8800315 	stw	r2,12(sp)
   13710:	00144f80 	call	144f8 <__mulsi3>
   13714:	8009883a 	mov	r4,r16
   13718:	a80b883a 	mov	r5,r21
   1371c:	1023883a 	mov	r17,r2
   13720:	00144f80 	call	144f8 <__mulsi3>
   13724:	d9c00217 	ldw	r7,8(sp)
   13728:	da800317 	ldw	r10,12(sp)
   1372c:	d8c00517 	ldw	r3,20(sp)
   13730:	3808d43a 	srli	r4,r7,16
   13734:	1285883a 	add	r2,r2,r10
   13738:	d9800717 	ldw	r6,28(sp)
   1373c:	2085883a 	add	r2,r4,r2
   13740:	da000617 	ldw	r8,24(sp)
   13744:	da400417 	ldw	r9,16(sp)
   13748:	1280022e 	bgeu	r2,r10,13754 <__muldf3+0x584>
   1374c:	01000074 	movhi	r4,1
   13750:	8923883a 	add	r17,r17,r4
   13754:	1008943a 	slli	r4,r2,16
   13758:	39ffffcc 	andi	r7,r7,65535
   1375c:	e4b9883a 	add	fp,fp,r18
   13760:	21cf883a 	add	r7,r4,r7
   13764:	e4e7803a 	cmpltu	r19,fp,r19
   13768:	3d0f883a 	add	r7,r7,r20
   1376c:	bf39883a 	add	fp,r23,fp
   13770:	99c9883a 	add	r4,r19,r7
   13774:	e5ef803a 	cmpltu	r23,fp,r23
   13778:	490b883a 	add	r5,r9,r4
   1377c:	1004d43a 	srli	r2,r2,16
   13780:	b965883a 	add	r18,r23,r5
   13784:	24c9803a 	cmpltu	r4,r4,r19
   13788:	3d29803a 	cmpltu	r20,r7,r20
   1378c:	a128b03a 	or	r20,r20,r4
   13790:	95ef803a 	cmpltu	r23,r18,r23
   13794:	2a53803a 	cmpltu	r9,r5,r9
   13798:	a0a9883a 	add	r20,r20,r2
   1379c:	4deeb03a 	or	r23,r9,r23
   137a0:	a5ef883a 	add	r23,r20,r23
   137a4:	bc63883a 	add	r17,r23,r17
   137a8:	e004927a 	slli	r2,fp,9
   137ac:	d9000117 	ldw	r4,4(sp)
   137b0:	882e927a 	slli	r23,r17,9
   137b4:	9022d5fa 	srli	r17,r18,23
   137b8:	e038d5fa 	srli	fp,fp,23
   137bc:	1104b03a 	or	r2,r2,r4
   137c0:	9024927a 	slli	r18,r18,9
   137c4:	1004c03a 	cmpne	r2,r2,zero
   137c8:	bc62b03a 	or	r17,r23,r17
   137cc:	1738b03a 	or	fp,r2,fp
   137d0:	8880402c 	andhi	r2,r17,256
   137d4:	e4a4b03a 	or	r18,fp,r18
   137d8:	10000726 	beq	r2,zero,137f8 <__muldf3+0x628>
   137dc:	9006d07a 	srli	r3,r18,1
   137e0:	880497fa 	slli	r2,r17,31
   137e4:	9480004c 	andi	r18,r18,1
   137e8:	8822d07a 	srli	r17,r17,1
   137ec:	1ca4b03a 	or	r18,r3,r18
   137f0:	14a4b03a 	or	r18,r2,r18
   137f4:	4007883a 	mov	r3,r8
   137f8:	1880ffc4 	addi	r2,r3,1023
   137fc:	0080460e 	bge	zero,r2,13918 <__muldf3+0x748>
   13800:	910001cc 	andi	r4,r18,7
   13804:	20000726 	beq	r4,zero,13824 <__muldf3+0x654>
   13808:	910003cc 	andi	r4,r18,15
   1380c:	01400104 	movi	r5,4
   13810:	21400426 	beq	r4,r5,13824 <__muldf3+0x654>
   13814:	9149883a 	add	r4,r18,r5
   13818:	24a5803a 	cmpltu	r18,r4,r18
   1381c:	8ca3883a 	add	r17,r17,r18
   13820:	2025883a 	mov	r18,r4
   13824:	8900402c 	andhi	r4,r17,256
   13828:	20000426 	beq	r4,zero,1383c <__muldf3+0x66c>
   1382c:	18810004 	addi	r2,r3,1024
   13830:	00ffc034 	movhi	r3,65280
   13834:	18ffffc4 	addi	r3,r3,-1
   13838:	88e2703a 	and	r17,r17,r3
   1383c:	00c1ff84 	movi	r3,2046
   13840:	18bf1316 	blt	r3,r2,13490 <_gp+0xfffec388>
   13844:	882c977a 	slli	r22,r17,29
   13848:	9024d0fa 	srli	r18,r18,3
   1384c:	8822927a 	slli	r17,r17,9
   13850:	1081ffcc 	andi	r2,r2,2047
   13854:	b4acb03a 	or	r22,r22,r18
   13858:	8820d33a 	srli	r16,r17,12
   1385c:	3027883a 	mov	r19,r6
   13860:	003eba06 	br	1334c <_gp+0xfffec244>
   13864:	8080022c 	andhi	r2,r16,8
   13868:	10000926 	beq	r2,zero,13890 <__muldf3+0x6c0>
   1386c:	8880022c 	andhi	r2,r17,8
   13870:	1000071e 	bne	r2,zero,13890 <__muldf3+0x6c0>
   13874:	00800434 	movhi	r2,16
   13878:	8c000234 	orhi	r16,r17,8
   1387c:	10bfffc4 	addi	r2,r2,-1
   13880:	e027883a 	mov	r19,fp
   13884:	80a0703a 	and	r16,r16,r2
   13888:	902d883a 	mov	r22,r18
   1388c:	003f1706 	br	134ec <_gp+0xfffec3e4>
   13890:	00800434 	movhi	r2,16
   13894:	84000234 	orhi	r16,r16,8
   13898:	10bfffc4 	addi	r2,r2,-1
   1389c:	80a0703a 	and	r16,r16,r2
   138a0:	003f1206 	br	134ec <_gp+0xfffec3e4>
   138a4:	147ff604 	addi	r17,r2,-40
   138a8:	3462983a 	sll	r17,r6,r17
   138ac:	0025883a 	mov	r18,zero
   138b0:	003ef306 	br	13480 <_gp+0xfffec378>
   138b4:	3009883a 	mov	r4,r6
   138b8:	d9400215 	stw	r5,8(sp)
   138bc:	d9800715 	stw	r6,28(sp)
   138c0:	da400415 	stw	r9,16(sp)
   138c4:	da800315 	stw	r10,12(sp)
   138c8:	00144940 	call	14494 <__clzsi2>
   138cc:	10800804 	addi	r2,r2,32
   138d0:	da800317 	ldw	r10,12(sp)
   138d4:	da400417 	ldw	r9,16(sp)
   138d8:	d9800717 	ldw	r6,28(sp)
   138dc:	d9400217 	ldw	r5,8(sp)
   138e0:	003edd06 	br	13458 <_gp+0xfffec350>
   138e4:	143ff604 	addi	r16,r2,-40
   138e8:	ac20983a 	sll	r16,r21,r16
   138ec:	002d883a 	mov	r22,zero
   138f0:	003ec106 	br	133f8 <_gp+0xfffec2f0>
   138f4:	d9800715 	stw	r6,28(sp)
   138f8:	d9c00215 	stw	r7,8(sp)
   138fc:	da400415 	stw	r9,16(sp)
   13900:	00144940 	call	14494 <__clzsi2>
   13904:	10800804 	addi	r2,r2,32
   13908:	da400417 	ldw	r9,16(sp)
   1390c:	d9c00217 	ldw	r7,8(sp)
   13910:	d9800717 	ldw	r6,28(sp)
   13914:	003eae06 	br	133d0 <_gp+0xfffec2c8>
   13918:	00c00044 	movi	r3,1
   1391c:	1887c83a 	sub	r3,r3,r2
   13920:	01000e04 	movi	r4,56
   13924:	20fe8516 	blt	r4,r3,1333c <_gp+0xfffec234>
   13928:	010007c4 	movi	r4,31
   1392c:	20c01b16 	blt	r4,r3,1399c <__muldf3+0x7cc>
   13930:	00800804 	movi	r2,32
   13934:	10c5c83a 	sub	r2,r2,r3
   13938:	888a983a 	sll	r5,r17,r2
   1393c:	90c8d83a 	srl	r4,r18,r3
   13940:	9084983a 	sll	r2,r18,r2
   13944:	88e2d83a 	srl	r17,r17,r3
   13948:	2906b03a 	or	r3,r5,r4
   1394c:	1004c03a 	cmpne	r2,r2,zero
   13950:	1886b03a 	or	r3,r3,r2
   13954:	188001cc 	andi	r2,r3,7
   13958:	10000726 	beq	r2,zero,13978 <__muldf3+0x7a8>
   1395c:	188003cc 	andi	r2,r3,15
   13960:	01000104 	movi	r4,4
   13964:	11000426 	beq	r2,r4,13978 <__muldf3+0x7a8>
   13968:	1805883a 	mov	r2,r3
   1396c:	10c00104 	addi	r3,r2,4
   13970:	1885803a 	cmpltu	r2,r3,r2
   13974:	88a3883a 	add	r17,r17,r2
   13978:	8880202c 	andhi	r2,r17,128
   1397c:	10001c26 	beq	r2,zero,139f0 <__muldf3+0x820>
   13980:	3027883a 	mov	r19,r6
   13984:	00800044 	movi	r2,1
   13988:	0021883a 	mov	r16,zero
   1398c:	002d883a 	mov	r22,zero
   13990:	003e6e06 	br	1334c <_gp+0xfffec244>
   13994:	4007883a 	mov	r3,r8
   13998:	003f9706 	br	137f8 <_gp+0xfffec6f0>
   1399c:	017ff844 	movi	r5,-31
   139a0:	2885c83a 	sub	r2,r5,r2
   139a4:	888ad83a 	srl	r5,r17,r2
   139a8:	00800804 	movi	r2,32
   139ac:	18801a26 	beq	r3,r2,13a18 <__muldf3+0x848>
   139b0:	01001004 	movi	r4,64
   139b4:	20c7c83a 	sub	r3,r4,r3
   139b8:	88e2983a 	sll	r17,r17,r3
   139bc:	8ca4b03a 	or	r18,r17,r18
   139c0:	9004c03a 	cmpne	r2,r18,zero
   139c4:	2884b03a 	or	r2,r5,r2
   139c8:	144001cc 	andi	r17,r2,7
   139cc:	88000d1e 	bne	r17,zero,13a04 <__muldf3+0x834>
   139d0:	0021883a 	mov	r16,zero
   139d4:	102cd0fa 	srli	r22,r2,3
   139d8:	3027883a 	mov	r19,r6
   139dc:	0005883a 	mov	r2,zero
   139e0:	b46cb03a 	or	r22,r22,r17
   139e4:	003e5906 	br	1334c <_gp+0xfffec244>
   139e8:	1007883a 	mov	r3,r2
   139ec:	0023883a 	mov	r17,zero
   139f0:	8820927a 	slli	r16,r17,9
   139f4:	1805883a 	mov	r2,r3
   139f8:	8822977a 	slli	r17,r17,29
   139fc:	8020d33a 	srli	r16,r16,12
   13a00:	003ff406 	br	139d4 <_gp+0xfffec8cc>
   13a04:	10c003cc 	andi	r3,r2,15
   13a08:	01000104 	movi	r4,4
   13a0c:	193ff626 	beq	r3,r4,139e8 <_gp+0xfffec8e0>
   13a10:	0023883a 	mov	r17,zero
   13a14:	003fd506 	br	1396c <_gp+0xfffec864>
   13a18:	0023883a 	mov	r17,zero
   13a1c:	003fe706 	br	139bc <_gp+0xfffec8b4>
   13a20:	00800434 	movhi	r2,16
   13a24:	8c000234 	orhi	r16,r17,8
   13a28:	10bfffc4 	addi	r2,r2,-1
   13a2c:	3027883a 	mov	r19,r6
   13a30:	80a0703a 	and	r16,r16,r2
   13a34:	902d883a 	mov	r22,r18
   13a38:	003eac06 	br	134ec <_gp+0xfffec3e4>

00013a3c <__subdf3>:
   13a3c:	02000434 	movhi	r8,16
   13a40:	423fffc4 	addi	r8,r8,-1
   13a44:	defffb04 	addi	sp,sp,-20
   13a48:	2a14703a 	and	r10,r5,r8
   13a4c:	3812d53a 	srli	r9,r7,20
   13a50:	3a10703a 	and	r8,r7,r8
   13a54:	2006d77a 	srli	r3,r4,29
   13a58:	3004d77a 	srli	r2,r6,29
   13a5c:	dc000015 	stw	r16,0(sp)
   13a60:	501490fa 	slli	r10,r10,3
   13a64:	2820d53a 	srli	r16,r5,20
   13a68:	401090fa 	slli	r8,r8,3
   13a6c:	dc800215 	stw	r18,8(sp)
   13a70:	dc400115 	stw	r17,4(sp)
   13a74:	dfc00415 	stw	ra,16(sp)
   13a78:	202290fa 	slli	r17,r4,3
   13a7c:	dcc00315 	stw	r19,12(sp)
   13a80:	4a41ffcc 	andi	r9,r9,2047
   13a84:	0101ffc4 	movi	r4,2047
   13a88:	2824d7fa 	srli	r18,r5,31
   13a8c:	8401ffcc 	andi	r16,r16,2047
   13a90:	50c6b03a 	or	r3,r10,r3
   13a94:	380ed7fa 	srli	r7,r7,31
   13a98:	408ab03a 	or	r5,r8,r2
   13a9c:	300c90fa 	slli	r6,r6,3
   13aa0:	49009626 	beq	r9,r4,13cfc <__subdf3+0x2c0>
   13aa4:	39c0005c 	xori	r7,r7,1
   13aa8:	8245c83a 	sub	r2,r16,r9
   13aac:	3c807426 	beq	r7,r18,13c80 <__subdf3+0x244>
   13ab0:	0080af0e 	bge	zero,r2,13d70 <__subdf3+0x334>
   13ab4:	48002a1e 	bne	r9,zero,13b60 <__subdf3+0x124>
   13ab8:	2988b03a 	or	r4,r5,r6
   13abc:	20009a1e 	bne	r4,zero,13d28 <__subdf3+0x2ec>
   13ac0:	888001cc 	andi	r2,r17,7
   13ac4:	10000726 	beq	r2,zero,13ae4 <__subdf3+0xa8>
   13ac8:	888003cc 	andi	r2,r17,15
   13acc:	01000104 	movi	r4,4
   13ad0:	11000426 	beq	r2,r4,13ae4 <__subdf3+0xa8>
   13ad4:	890b883a 	add	r5,r17,r4
   13ad8:	2c63803a 	cmpltu	r17,r5,r17
   13adc:	1c47883a 	add	r3,r3,r17
   13ae0:	2823883a 	mov	r17,r5
   13ae4:	1880202c 	andhi	r2,r3,128
   13ae8:	10005926 	beq	r2,zero,13c50 <__subdf3+0x214>
   13aec:	84000044 	addi	r16,r16,1
   13af0:	0081ffc4 	movi	r2,2047
   13af4:	8080be26 	beq	r16,r2,13df0 <__subdf3+0x3b4>
   13af8:	017fe034 	movhi	r5,65408
   13afc:	297fffc4 	addi	r5,r5,-1
   13b00:	1946703a 	and	r3,r3,r5
   13b04:	1804977a 	slli	r2,r3,29
   13b08:	1806927a 	slli	r3,r3,9
   13b0c:	8822d0fa 	srli	r17,r17,3
   13b10:	8401ffcc 	andi	r16,r16,2047
   13b14:	180ad33a 	srli	r5,r3,12
   13b18:	9100004c 	andi	r4,r18,1
   13b1c:	1444b03a 	or	r2,r2,r17
   13b20:	80c1ffcc 	andi	r3,r16,2047
   13b24:	1820953a 	slli	r16,r3,20
   13b28:	20c03fcc 	andi	r3,r4,255
   13b2c:	180897fa 	slli	r4,r3,31
   13b30:	00c00434 	movhi	r3,16
   13b34:	18ffffc4 	addi	r3,r3,-1
   13b38:	28c6703a 	and	r3,r5,r3
   13b3c:	1c06b03a 	or	r3,r3,r16
   13b40:	1906b03a 	or	r3,r3,r4
   13b44:	dfc00417 	ldw	ra,16(sp)
   13b48:	dcc00317 	ldw	r19,12(sp)
   13b4c:	dc800217 	ldw	r18,8(sp)
   13b50:	dc400117 	ldw	r17,4(sp)
   13b54:	dc000017 	ldw	r16,0(sp)
   13b58:	dec00504 	addi	sp,sp,20
   13b5c:	f800283a 	ret
   13b60:	0101ffc4 	movi	r4,2047
   13b64:	813fd626 	beq	r16,r4,13ac0 <_gp+0xfffec9b8>
   13b68:	29402034 	orhi	r5,r5,128
   13b6c:	01000e04 	movi	r4,56
   13b70:	2080a316 	blt	r4,r2,13e00 <__subdf3+0x3c4>
   13b74:	010007c4 	movi	r4,31
   13b78:	2080c616 	blt	r4,r2,13e94 <__subdf3+0x458>
   13b7c:	01000804 	movi	r4,32
   13b80:	2089c83a 	sub	r4,r4,r2
   13b84:	2910983a 	sll	r8,r5,r4
   13b88:	308ed83a 	srl	r7,r6,r2
   13b8c:	3108983a 	sll	r4,r6,r4
   13b90:	2884d83a 	srl	r2,r5,r2
   13b94:	41ccb03a 	or	r6,r8,r7
   13b98:	2008c03a 	cmpne	r4,r4,zero
   13b9c:	310cb03a 	or	r6,r6,r4
   13ba0:	898dc83a 	sub	r6,r17,r6
   13ba4:	89a3803a 	cmpltu	r17,r17,r6
   13ba8:	1887c83a 	sub	r3,r3,r2
   13bac:	1c47c83a 	sub	r3,r3,r17
   13bb0:	3023883a 	mov	r17,r6
   13bb4:	1880202c 	andhi	r2,r3,128
   13bb8:	10002326 	beq	r2,zero,13c48 <__subdf3+0x20c>
   13bbc:	04c02034 	movhi	r19,128
   13bc0:	9cffffc4 	addi	r19,r19,-1
   13bc4:	1ce6703a 	and	r19,r3,r19
   13bc8:	98007a26 	beq	r19,zero,13db4 <__subdf3+0x378>
   13bcc:	9809883a 	mov	r4,r19
   13bd0:	00144940 	call	14494 <__clzsi2>
   13bd4:	113ffe04 	addi	r4,r2,-8
   13bd8:	00c007c4 	movi	r3,31
   13bdc:	19007b16 	blt	r3,r4,13dcc <__subdf3+0x390>
   13be0:	00800804 	movi	r2,32
   13be4:	1105c83a 	sub	r2,r2,r4
   13be8:	8884d83a 	srl	r2,r17,r2
   13bec:	9906983a 	sll	r3,r19,r4
   13bf0:	8922983a 	sll	r17,r17,r4
   13bf4:	10c4b03a 	or	r2,r2,r3
   13bf8:	24007816 	blt	r4,r16,13ddc <__subdf3+0x3a0>
   13bfc:	2421c83a 	sub	r16,r4,r16
   13c00:	80c00044 	addi	r3,r16,1
   13c04:	010007c4 	movi	r4,31
   13c08:	20c09516 	blt	r4,r3,13e60 <__subdf3+0x424>
   13c0c:	01400804 	movi	r5,32
   13c10:	28cbc83a 	sub	r5,r5,r3
   13c14:	88c8d83a 	srl	r4,r17,r3
   13c18:	8962983a 	sll	r17,r17,r5
   13c1c:	114a983a 	sll	r5,r2,r5
   13c20:	10c6d83a 	srl	r3,r2,r3
   13c24:	8804c03a 	cmpne	r2,r17,zero
   13c28:	290ab03a 	or	r5,r5,r4
   13c2c:	28a2b03a 	or	r17,r5,r2
   13c30:	0021883a 	mov	r16,zero
   13c34:	003fa206 	br	13ac0 <_gp+0xfffec9b8>
   13c38:	2090b03a 	or	r8,r4,r2
   13c3c:	40018e26 	beq	r8,zero,14278 <__subdf3+0x83c>
   13c40:	1007883a 	mov	r3,r2
   13c44:	2023883a 	mov	r17,r4
   13c48:	888001cc 	andi	r2,r17,7
   13c4c:	103f9e1e 	bne	r2,zero,13ac8 <_gp+0xfffec9c0>
   13c50:	1804977a 	slli	r2,r3,29
   13c54:	8822d0fa 	srli	r17,r17,3
   13c58:	1810d0fa 	srli	r8,r3,3
   13c5c:	9100004c 	andi	r4,r18,1
   13c60:	1444b03a 	or	r2,r2,r17
   13c64:	00c1ffc4 	movi	r3,2047
   13c68:	80c02826 	beq	r16,r3,13d0c <__subdf3+0x2d0>
   13c6c:	01400434 	movhi	r5,16
   13c70:	297fffc4 	addi	r5,r5,-1
   13c74:	80e0703a 	and	r16,r16,r3
   13c78:	414a703a 	and	r5,r8,r5
   13c7c:	003fa806 	br	13b20 <_gp+0xfffeca18>
   13c80:	0080630e 	bge	zero,r2,13e10 <__subdf3+0x3d4>
   13c84:	48003026 	beq	r9,zero,13d48 <__subdf3+0x30c>
   13c88:	0101ffc4 	movi	r4,2047
   13c8c:	813f8c26 	beq	r16,r4,13ac0 <_gp+0xfffec9b8>
   13c90:	29402034 	orhi	r5,r5,128
   13c94:	01000e04 	movi	r4,56
   13c98:	2080a90e 	bge	r4,r2,13f40 <__subdf3+0x504>
   13c9c:	298cb03a 	or	r6,r5,r6
   13ca0:	3012c03a 	cmpne	r9,r6,zero
   13ca4:	0005883a 	mov	r2,zero
   13ca8:	4c53883a 	add	r9,r9,r17
   13cac:	4c63803a 	cmpltu	r17,r9,r17
   13cb0:	10c7883a 	add	r3,r2,r3
   13cb4:	88c7883a 	add	r3,r17,r3
   13cb8:	4823883a 	mov	r17,r9
   13cbc:	1880202c 	andhi	r2,r3,128
   13cc0:	1000d026 	beq	r2,zero,14004 <__subdf3+0x5c8>
   13cc4:	84000044 	addi	r16,r16,1
   13cc8:	0081ffc4 	movi	r2,2047
   13ccc:	8080fe26 	beq	r16,r2,140c8 <__subdf3+0x68c>
   13cd0:	00bfe034 	movhi	r2,65408
   13cd4:	10bfffc4 	addi	r2,r2,-1
   13cd8:	1886703a 	and	r3,r3,r2
   13cdc:	880ad07a 	srli	r5,r17,1
   13ce0:	180497fa 	slli	r2,r3,31
   13ce4:	8900004c 	andi	r4,r17,1
   13ce8:	2922b03a 	or	r17,r5,r4
   13cec:	1806d07a 	srli	r3,r3,1
   13cf0:	1462b03a 	or	r17,r2,r17
   13cf4:	3825883a 	mov	r18,r7
   13cf8:	003f7106 	br	13ac0 <_gp+0xfffec9b8>
   13cfc:	2984b03a 	or	r2,r5,r6
   13d00:	103f6826 	beq	r2,zero,13aa4 <_gp+0xfffec99c>
   13d04:	39c03fcc 	andi	r7,r7,255
   13d08:	003f6706 	br	13aa8 <_gp+0xfffec9a0>
   13d0c:	4086b03a 	or	r3,r8,r2
   13d10:	18015226 	beq	r3,zero,1425c <__subdf3+0x820>
   13d14:	00c00434 	movhi	r3,16
   13d18:	41400234 	orhi	r5,r8,8
   13d1c:	18ffffc4 	addi	r3,r3,-1
   13d20:	28ca703a 	and	r5,r5,r3
   13d24:	003f7e06 	br	13b20 <_gp+0xfffeca18>
   13d28:	10bfffc4 	addi	r2,r2,-1
   13d2c:	1000491e 	bne	r2,zero,13e54 <__subdf3+0x418>
   13d30:	898fc83a 	sub	r7,r17,r6
   13d34:	89e3803a 	cmpltu	r17,r17,r7
   13d38:	1947c83a 	sub	r3,r3,r5
   13d3c:	1c47c83a 	sub	r3,r3,r17
   13d40:	3823883a 	mov	r17,r7
   13d44:	003f9b06 	br	13bb4 <_gp+0xfffecaac>
   13d48:	2988b03a 	or	r4,r5,r6
   13d4c:	203f5c26 	beq	r4,zero,13ac0 <_gp+0xfffec9b8>
   13d50:	10bfffc4 	addi	r2,r2,-1
   13d54:	1000931e 	bne	r2,zero,13fa4 <__subdf3+0x568>
   13d58:	898d883a 	add	r6,r17,r6
   13d5c:	3463803a 	cmpltu	r17,r6,r17
   13d60:	1947883a 	add	r3,r3,r5
   13d64:	88c7883a 	add	r3,r17,r3
   13d68:	3023883a 	mov	r17,r6
   13d6c:	003fd306 	br	13cbc <_gp+0xfffecbb4>
   13d70:	1000541e 	bne	r2,zero,13ec4 <__subdf3+0x488>
   13d74:	80800044 	addi	r2,r16,1
   13d78:	1081ffcc 	andi	r2,r2,2047
   13d7c:	01000044 	movi	r4,1
   13d80:	2080a20e 	bge	r4,r2,1400c <__subdf3+0x5d0>
   13d84:	8989c83a 	sub	r4,r17,r6
   13d88:	8905803a 	cmpltu	r2,r17,r4
   13d8c:	1967c83a 	sub	r19,r3,r5
   13d90:	98a7c83a 	sub	r19,r19,r2
   13d94:	9880202c 	andhi	r2,r19,128
   13d98:	10006326 	beq	r2,zero,13f28 <__subdf3+0x4ec>
   13d9c:	3463c83a 	sub	r17,r6,r17
   13da0:	28c7c83a 	sub	r3,r5,r3
   13da4:	344d803a 	cmpltu	r6,r6,r17
   13da8:	19a7c83a 	sub	r19,r3,r6
   13dac:	3825883a 	mov	r18,r7
   13db0:	983f861e 	bne	r19,zero,13bcc <_gp+0xfffecac4>
   13db4:	8809883a 	mov	r4,r17
   13db8:	00144940 	call	14494 <__clzsi2>
   13dbc:	10800804 	addi	r2,r2,32
   13dc0:	113ffe04 	addi	r4,r2,-8
   13dc4:	00c007c4 	movi	r3,31
   13dc8:	193f850e 	bge	r3,r4,13be0 <_gp+0xfffecad8>
   13dcc:	10bff604 	addi	r2,r2,-40
   13dd0:	8884983a 	sll	r2,r17,r2
   13dd4:	0023883a 	mov	r17,zero
   13dd8:	243f880e 	bge	r4,r16,13bfc <_gp+0xfffecaf4>
   13ddc:	00ffe034 	movhi	r3,65408
   13de0:	18ffffc4 	addi	r3,r3,-1
   13de4:	8121c83a 	sub	r16,r16,r4
   13de8:	10c6703a 	and	r3,r2,r3
   13dec:	003f3406 	br	13ac0 <_gp+0xfffec9b8>
   13df0:	9100004c 	andi	r4,r18,1
   13df4:	000b883a 	mov	r5,zero
   13df8:	0005883a 	mov	r2,zero
   13dfc:	003f4806 	br	13b20 <_gp+0xfffeca18>
   13e00:	298cb03a 	or	r6,r5,r6
   13e04:	300cc03a 	cmpne	r6,r6,zero
   13e08:	0005883a 	mov	r2,zero
   13e0c:	003f6406 	br	13ba0 <_gp+0xfffeca98>
   13e10:	10009a1e 	bne	r2,zero,1407c <__subdf3+0x640>
   13e14:	82400044 	addi	r9,r16,1
   13e18:	4881ffcc 	andi	r2,r9,2047
   13e1c:	02800044 	movi	r10,1
   13e20:	5080670e 	bge	r10,r2,13fc0 <__subdf3+0x584>
   13e24:	0081ffc4 	movi	r2,2047
   13e28:	4880af26 	beq	r9,r2,140e8 <__subdf3+0x6ac>
   13e2c:	898d883a 	add	r6,r17,r6
   13e30:	1945883a 	add	r2,r3,r5
   13e34:	3447803a 	cmpltu	r3,r6,r17
   13e38:	1887883a 	add	r3,r3,r2
   13e3c:	182297fa 	slli	r17,r3,31
   13e40:	300cd07a 	srli	r6,r6,1
   13e44:	1806d07a 	srli	r3,r3,1
   13e48:	4821883a 	mov	r16,r9
   13e4c:	89a2b03a 	or	r17,r17,r6
   13e50:	003f1b06 	br	13ac0 <_gp+0xfffec9b8>
   13e54:	0101ffc4 	movi	r4,2047
   13e58:	813f441e 	bne	r16,r4,13b6c <_gp+0xfffeca64>
   13e5c:	003f1806 	br	13ac0 <_gp+0xfffec9b8>
   13e60:	843ff844 	addi	r16,r16,-31
   13e64:	01400804 	movi	r5,32
   13e68:	1408d83a 	srl	r4,r2,r16
   13e6c:	19405026 	beq	r3,r5,13fb0 <__subdf3+0x574>
   13e70:	01401004 	movi	r5,64
   13e74:	28c7c83a 	sub	r3,r5,r3
   13e78:	10c4983a 	sll	r2,r2,r3
   13e7c:	88a2b03a 	or	r17,r17,r2
   13e80:	8822c03a 	cmpne	r17,r17,zero
   13e84:	2462b03a 	or	r17,r4,r17
   13e88:	0007883a 	mov	r3,zero
   13e8c:	0021883a 	mov	r16,zero
   13e90:	003f6d06 	br	13c48 <_gp+0xfffecb40>
   13e94:	11fff804 	addi	r7,r2,-32
   13e98:	01000804 	movi	r4,32
   13e9c:	29ced83a 	srl	r7,r5,r7
   13ea0:	11004526 	beq	r2,r4,13fb8 <__subdf3+0x57c>
   13ea4:	01001004 	movi	r4,64
   13ea8:	2089c83a 	sub	r4,r4,r2
   13eac:	2904983a 	sll	r2,r5,r4
   13eb0:	118cb03a 	or	r6,r2,r6
   13eb4:	300cc03a 	cmpne	r6,r6,zero
   13eb8:	398cb03a 	or	r6,r7,r6
   13ebc:	0005883a 	mov	r2,zero
   13ec0:	003f3706 	br	13ba0 <_gp+0xfffeca98>
   13ec4:	80002a26 	beq	r16,zero,13f70 <__subdf3+0x534>
   13ec8:	0101ffc4 	movi	r4,2047
   13ecc:	49006626 	beq	r9,r4,14068 <__subdf3+0x62c>
   13ed0:	0085c83a 	sub	r2,zero,r2
   13ed4:	18c02034 	orhi	r3,r3,128
   13ed8:	01000e04 	movi	r4,56
   13edc:	20807e16 	blt	r4,r2,140d8 <__subdf3+0x69c>
   13ee0:	010007c4 	movi	r4,31
   13ee4:	2080e716 	blt	r4,r2,14284 <__subdf3+0x848>
   13ee8:	01000804 	movi	r4,32
   13eec:	2089c83a 	sub	r4,r4,r2
   13ef0:	1914983a 	sll	r10,r3,r4
   13ef4:	8890d83a 	srl	r8,r17,r2
   13ef8:	8908983a 	sll	r4,r17,r4
   13efc:	1884d83a 	srl	r2,r3,r2
   13f00:	5222b03a 	or	r17,r10,r8
   13f04:	2006c03a 	cmpne	r3,r4,zero
   13f08:	88e2b03a 	or	r17,r17,r3
   13f0c:	3463c83a 	sub	r17,r6,r17
   13f10:	2885c83a 	sub	r2,r5,r2
   13f14:	344d803a 	cmpltu	r6,r6,r17
   13f18:	1187c83a 	sub	r3,r2,r6
   13f1c:	4821883a 	mov	r16,r9
   13f20:	3825883a 	mov	r18,r7
   13f24:	003f2306 	br	13bb4 <_gp+0xfffecaac>
   13f28:	24d0b03a 	or	r8,r4,r19
   13f2c:	40001b1e 	bne	r8,zero,13f9c <__subdf3+0x560>
   13f30:	0005883a 	mov	r2,zero
   13f34:	0009883a 	mov	r4,zero
   13f38:	0021883a 	mov	r16,zero
   13f3c:	003f4906 	br	13c64 <_gp+0xfffecb5c>
   13f40:	010007c4 	movi	r4,31
   13f44:	20803a16 	blt	r4,r2,14030 <__subdf3+0x5f4>
   13f48:	01000804 	movi	r4,32
   13f4c:	2089c83a 	sub	r4,r4,r2
   13f50:	2912983a 	sll	r9,r5,r4
   13f54:	3090d83a 	srl	r8,r6,r2
   13f58:	3108983a 	sll	r4,r6,r4
   13f5c:	2884d83a 	srl	r2,r5,r2
   13f60:	4a12b03a 	or	r9,r9,r8
   13f64:	2008c03a 	cmpne	r4,r4,zero
   13f68:	4912b03a 	or	r9,r9,r4
   13f6c:	003f4e06 	br	13ca8 <_gp+0xfffecba0>
   13f70:	1c48b03a 	or	r4,r3,r17
   13f74:	20003c26 	beq	r4,zero,14068 <__subdf3+0x62c>
   13f78:	0084303a 	nor	r2,zero,r2
   13f7c:	1000381e 	bne	r2,zero,14060 <__subdf3+0x624>
   13f80:	3463c83a 	sub	r17,r6,r17
   13f84:	28c5c83a 	sub	r2,r5,r3
   13f88:	344d803a 	cmpltu	r6,r6,r17
   13f8c:	1187c83a 	sub	r3,r2,r6
   13f90:	4821883a 	mov	r16,r9
   13f94:	3825883a 	mov	r18,r7
   13f98:	003f0606 	br	13bb4 <_gp+0xfffecaac>
   13f9c:	2023883a 	mov	r17,r4
   13fa0:	003f0906 	br	13bc8 <_gp+0xfffecac0>
   13fa4:	0101ffc4 	movi	r4,2047
   13fa8:	813f3a1e 	bne	r16,r4,13c94 <_gp+0xfffecb8c>
   13fac:	003ec406 	br	13ac0 <_gp+0xfffec9b8>
   13fb0:	0005883a 	mov	r2,zero
   13fb4:	003fb106 	br	13e7c <_gp+0xfffecd74>
   13fb8:	0005883a 	mov	r2,zero
   13fbc:	003fbc06 	br	13eb0 <_gp+0xfffecda8>
   13fc0:	1c44b03a 	or	r2,r3,r17
   13fc4:	80008e1e 	bne	r16,zero,14200 <__subdf3+0x7c4>
   13fc8:	1000c826 	beq	r2,zero,142ec <__subdf3+0x8b0>
   13fcc:	2984b03a 	or	r2,r5,r6
   13fd0:	103ebb26 	beq	r2,zero,13ac0 <_gp+0xfffec9b8>
   13fd4:	8989883a 	add	r4,r17,r6
   13fd8:	1945883a 	add	r2,r3,r5
   13fdc:	2447803a 	cmpltu	r3,r4,r17
   13fe0:	1887883a 	add	r3,r3,r2
   13fe4:	1880202c 	andhi	r2,r3,128
   13fe8:	2023883a 	mov	r17,r4
   13fec:	103f1626 	beq	r2,zero,13c48 <_gp+0xfffecb40>
   13ff0:	00bfe034 	movhi	r2,65408
   13ff4:	10bfffc4 	addi	r2,r2,-1
   13ff8:	5021883a 	mov	r16,r10
   13ffc:	1886703a 	and	r3,r3,r2
   14000:	003eaf06 	br	13ac0 <_gp+0xfffec9b8>
   14004:	3825883a 	mov	r18,r7
   14008:	003f0f06 	br	13c48 <_gp+0xfffecb40>
   1400c:	1c44b03a 	or	r2,r3,r17
   14010:	8000251e 	bne	r16,zero,140a8 <__subdf3+0x66c>
   14014:	1000661e 	bne	r2,zero,141b0 <__subdf3+0x774>
   14018:	2990b03a 	or	r8,r5,r6
   1401c:	40009626 	beq	r8,zero,14278 <__subdf3+0x83c>
   14020:	2807883a 	mov	r3,r5
   14024:	3023883a 	mov	r17,r6
   14028:	3825883a 	mov	r18,r7
   1402c:	003ea406 	br	13ac0 <_gp+0xfffec9b8>
   14030:	127ff804 	addi	r9,r2,-32
   14034:	01000804 	movi	r4,32
   14038:	2a52d83a 	srl	r9,r5,r9
   1403c:	11008c26 	beq	r2,r4,14270 <__subdf3+0x834>
   14040:	01001004 	movi	r4,64
   14044:	2085c83a 	sub	r2,r4,r2
   14048:	2884983a 	sll	r2,r5,r2
   1404c:	118cb03a 	or	r6,r2,r6
   14050:	300cc03a 	cmpne	r6,r6,zero
   14054:	4992b03a 	or	r9,r9,r6
   14058:	0005883a 	mov	r2,zero
   1405c:	003f1206 	br	13ca8 <_gp+0xfffecba0>
   14060:	0101ffc4 	movi	r4,2047
   14064:	493f9c1e 	bne	r9,r4,13ed8 <_gp+0xfffecdd0>
   14068:	2807883a 	mov	r3,r5
   1406c:	3023883a 	mov	r17,r6
   14070:	4821883a 	mov	r16,r9
   14074:	3825883a 	mov	r18,r7
   14078:	003e9106 	br	13ac0 <_gp+0xfffec9b8>
   1407c:	80001f1e 	bne	r16,zero,140fc <__subdf3+0x6c0>
   14080:	1c48b03a 	or	r4,r3,r17
   14084:	20005a26 	beq	r4,zero,141f0 <__subdf3+0x7b4>
   14088:	0084303a 	nor	r2,zero,r2
   1408c:	1000561e 	bne	r2,zero,141e8 <__subdf3+0x7ac>
   14090:	89a3883a 	add	r17,r17,r6
   14094:	1945883a 	add	r2,r3,r5
   14098:	898d803a 	cmpltu	r6,r17,r6
   1409c:	3087883a 	add	r3,r6,r2
   140a0:	4821883a 	mov	r16,r9
   140a4:	003f0506 	br	13cbc <_gp+0xfffecbb4>
   140a8:	10002b1e 	bne	r2,zero,14158 <__subdf3+0x71c>
   140ac:	2984b03a 	or	r2,r5,r6
   140b0:	10008026 	beq	r2,zero,142b4 <__subdf3+0x878>
   140b4:	2807883a 	mov	r3,r5
   140b8:	3023883a 	mov	r17,r6
   140bc:	3825883a 	mov	r18,r7
   140c0:	0401ffc4 	movi	r16,2047
   140c4:	003e7e06 	br	13ac0 <_gp+0xfffec9b8>
   140c8:	3809883a 	mov	r4,r7
   140cc:	0011883a 	mov	r8,zero
   140d0:	0005883a 	mov	r2,zero
   140d4:	003ee306 	br	13c64 <_gp+0xfffecb5c>
   140d8:	1c62b03a 	or	r17,r3,r17
   140dc:	8822c03a 	cmpne	r17,r17,zero
   140e0:	0005883a 	mov	r2,zero
   140e4:	003f8906 	br	13f0c <_gp+0xfffece04>
   140e8:	3809883a 	mov	r4,r7
   140ec:	4821883a 	mov	r16,r9
   140f0:	0011883a 	mov	r8,zero
   140f4:	0005883a 	mov	r2,zero
   140f8:	003eda06 	br	13c64 <_gp+0xfffecb5c>
   140fc:	0101ffc4 	movi	r4,2047
   14100:	49003b26 	beq	r9,r4,141f0 <__subdf3+0x7b4>
   14104:	0085c83a 	sub	r2,zero,r2
   14108:	18c02034 	orhi	r3,r3,128
   1410c:	01000e04 	movi	r4,56
   14110:	20806e16 	blt	r4,r2,142cc <__subdf3+0x890>
   14114:	010007c4 	movi	r4,31
   14118:	20807716 	blt	r4,r2,142f8 <__subdf3+0x8bc>
   1411c:	01000804 	movi	r4,32
   14120:	2089c83a 	sub	r4,r4,r2
   14124:	1914983a 	sll	r10,r3,r4
   14128:	8890d83a 	srl	r8,r17,r2
   1412c:	8908983a 	sll	r4,r17,r4
   14130:	1884d83a 	srl	r2,r3,r2
   14134:	5222b03a 	or	r17,r10,r8
   14138:	2006c03a 	cmpne	r3,r4,zero
   1413c:	88e2b03a 	or	r17,r17,r3
   14140:	89a3883a 	add	r17,r17,r6
   14144:	1145883a 	add	r2,r2,r5
   14148:	898d803a 	cmpltu	r6,r17,r6
   1414c:	3087883a 	add	r3,r6,r2
   14150:	4821883a 	mov	r16,r9
   14154:	003ed906 	br	13cbc <_gp+0xfffecbb4>
   14158:	2984b03a 	or	r2,r5,r6
   1415c:	10004226 	beq	r2,zero,14268 <__subdf3+0x82c>
   14160:	1808d0fa 	srli	r4,r3,3
   14164:	8822d0fa 	srli	r17,r17,3
   14168:	1806977a 	slli	r3,r3,29
   1416c:	2080022c 	andhi	r2,r4,8
   14170:	1c62b03a 	or	r17,r3,r17
   14174:	10000826 	beq	r2,zero,14198 <__subdf3+0x75c>
   14178:	2812d0fa 	srli	r9,r5,3
   1417c:	4880022c 	andhi	r2,r9,8
   14180:	1000051e 	bne	r2,zero,14198 <__subdf3+0x75c>
   14184:	300cd0fa 	srli	r6,r6,3
   14188:	2804977a 	slli	r2,r5,29
   1418c:	4809883a 	mov	r4,r9
   14190:	3825883a 	mov	r18,r7
   14194:	11a2b03a 	or	r17,r2,r6
   14198:	8806d77a 	srli	r3,r17,29
   1419c:	200890fa 	slli	r4,r4,3
   141a0:	882290fa 	slli	r17,r17,3
   141a4:	0401ffc4 	movi	r16,2047
   141a8:	1906b03a 	or	r3,r3,r4
   141ac:	003e4406 	br	13ac0 <_gp+0xfffec9b8>
   141b0:	2984b03a 	or	r2,r5,r6
   141b4:	103e4226 	beq	r2,zero,13ac0 <_gp+0xfffec9b8>
   141b8:	8989c83a 	sub	r4,r17,r6
   141bc:	8911803a 	cmpltu	r8,r17,r4
   141c0:	1945c83a 	sub	r2,r3,r5
   141c4:	1205c83a 	sub	r2,r2,r8
   141c8:	1200202c 	andhi	r8,r2,128
   141cc:	403e9a26 	beq	r8,zero,13c38 <_gp+0xfffecb30>
   141d0:	3463c83a 	sub	r17,r6,r17
   141d4:	28c5c83a 	sub	r2,r5,r3
   141d8:	344d803a 	cmpltu	r6,r6,r17
   141dc:	1187c83a 	sub	r3,r2,r6
   141e0:	3825883a 	mov	r18,r7
   141e4:	003e3606 	br	13ac0 <_gp+0xfffec9b8>
   141e8:	0101ffc4 	movi	r4,2047
   141ec:	493fc71e 	bne	r9,r4,1410c <_gp+0xfffed004>
   141f0:	2807883a 	mov	r3,r5
   141f4:	3023883a 	mov	r17,r6
   141f8:	4821883a 	mov	r16,r9
   141fc:	003e3006 	br	13ac0 <_gp+0xfffec9b8>
   14200:	10003626 	beq	r2,zero,142dc <__subdf3+0x8a0>
   14204:	2984b03a 	or	r2,r5,r6
   14208:	10001726 	beq	r2,zero,14268 <__subdf3+0x82c>
   1420c:	1808d0fa 	srli	r4,r3,3
   14210:	8822d0fa 	srli	r17,r17,3
   14214:	1806977a 	slli	r3,r3,29
   14218:	2080022c 	andhi	r2,r4,8
   1421c:	1c62b03a 	or	r17,r3,r17
   14220:	10000726 	beq	r2,zero,14240 <__subdf3+0x804>
   14224:	2812d0fa 	srli	r9,r5,3
   14228:	4880022c 	andhi	r2,r9,8
   1422c:	1000041e 	bne	r2,zero,14240 <__subdf3+0x804>
   14230:	300cd0fa 	srli	r6,r6,3
   14234:	2804977a 	slli	r2,r5,29
   14238:	4809883a 	mov	r4,r9
   1423c:	11a2b03a 	or	r17,r2,r6
   14240:	8806d77a 	srli	r3,r17,29
   14244:	200890fa 	slli	r4,r4,3
   14248:	882290fa 	slli	r17,r17,3
   1424c:	3825883a 	mov	r18,r7
   14250:	1906b03a 	or	r3,r3,r4
   14254:	0401ffc4 	movi	r16,2047
   14258:	003e1906 	br	13ac0 <_gp+0xfffec9b8>
   1425c:	000b883a 	mov	r5,zero
   14260:	0005883a 	mov	r2,zero
   14264:	003e2e06 	br	13b20 <_gp+0xfffeca18>
   14268:	0401ffc4 	movi	r16,2047
   1426c:	003e1406 	br	13ac0 <_gp+0xfffec9b8>
   14270:	0005883a 	mov	r2,zero
   14274:	003f7506 	br	1404c <_gp+0xfffecf44>
   14278:	0005883a 	mov	r2,zero
   1427c:	0009883a 	mov	r4,zero
   14280:	003e7806 	br	13c64 <_gp+0xfffecb5c>
   14284:	123ff804 	addi	r8,r2,-32
   14288:	01000804 	movi	r4,32
   1428c:	1a10d83a 	srl	r8,r3,r8
   14290:	11002526 	beq	r2,r4,14328 <__subdf3+0x8ec>
   14294:	01001004 	movi	r4,64
   14298:	2085c83a 	sub	r2,r4,r2
   1429c:	1884983a 	sll	r2,r3,r2
   142a0:	1444b03a 	or	r2,r2,r17
   142a4:	1004c03a 	cmpne	r2,r2,zero
   142a8:	40a2b03a 	or	r17,r8,r2
   142ac:	0005883a 	mov	r2,zero
   142b0:	003f1606 	br	13f0c <_gp+0xfffece04>
   142b4:	02000434 	movhi	r8,16
   142b8:	0009883a 	mov	r4,zero
   142bc:	423fffc4 	addi	r8,r8,-1
   142c0:	00bfffc4 	movi	r2,-1
   142c4:	0401ffc4 	movi	r16,2047
   142c8:	003e6606 	br	13c64 <_gp+0xfffecb5c>
   142cc:	1c62b03a 	or	r17,r3,r17
   142d0:	8822c03a 	cmpne	r17,r17,zero
   142d4:	0005883a 	mov	r2,zero
   142d8:	003f9906 	br	14140 <_gp+0xfffed038>
   142dc:	2807883a 	mov	r3,r5
   142e0:	3023883a 	mov	r17,r6
   142e4:	0401ffc4 	movi	r16,2047
   142e8:	003df506 	br	13ac0 <_gp+0xfffec9b8>
   142ec:	2807883a 	mov	r3,r5
   142f0:	3023883a 	mov	r17,r6
   142f4:	003df206 	br	13ac0 <_gp+0xfffec9b8>
   142f8:	123ff804 	addi	r8,r2,-32
   142fc:	01000804 	movi	r4,32
   14300:	1a10d83a 	srl	r8,r3,r8
   14304:	11000a26 	beq	r2,r4,14330 <__subdf3+0x8f4>
   14308:	01001004 	movi	r4,64
   1430c:	2085c83a 	sub	r2,r4,r2
   14310:	1884983a 	sll	r2,r3,r2
   14314:	1444b03a 	or	r2,r2,r17
   14318:	1004c03a 	cmpne	r2,r2,zero
   1431c:	40a2b03a 	or	r17,r8,r2
   14320:	0005883a 	mov	r2,zero
   14324:	003f8606 	br	14140 <_gp+0xfffed038>
   14328:	0005883a 	mov	r2,zero
   1432c:	003fdc06 	br	142a0 <_gp+0xfffed198>
   14330:	0005883a 	mov	r2,zero
   14334:	003ff706 	br	14314 <_gp+0xfffed20c>

00014338 <__fixdfsi>:
   14338:	280cd53a 	srli	r6,r5,20
   1433c:	00c00434 	movhi	r3,16
   14340:	18ffffc4 	addi	r3,r3,-1
   14344:	3181ffcc 	andi	r6,r6,2047
   14348:	01c0ff84 	movi	r7,1022
   1434c:	28c6703a 	and	r3,r5,r3
   14350:	280ad7fa 	srli	r5,r5,31
   14354:	3980120e 	bge	r7,r6,143a0 <__fixdfsi+0x68>
   14358:	00810744 	movi	r2,1053
   1435c:	11800c16 	blt	r2,r6,14390 <__fixdfsi+0x58>
   14360:	00810cc4 	movi	r2,1075
   14364:	1185c83a 	sub	r2,r2,r6
   14368:	01c007c4 	movi	r7,31
   1436c:	18c00434 	orhi	r3,r3,16
   14370:	38800d16 	blt	r7,r2,143a8 <__fixdfsi+0x70>
   14374:	31befb44 	addi	r6,r6,-1043
   14378:	2084d83a 	srl	r2,r4,r2
   1437c:	1986983a 	sll	r3,r3,r6
   14380:	1884b03a 	or	r2,r3,r2
   14384:	28000726 	beq	r5,zero,143a4 <__fixdfsi+0x6c>
   14388:	0085c83a 	sub	r2,zero,r2
   1438c:	f800283a 	ret
   14390:	00a00034 	movhi	r2,32768
   14394:	10bfffc4 	addi	r2,r2,-1
   14398:	2885883a 	add	r2,r5,r2
   1439c:	f800283a 	ret
   143a0:	0005883a 	mov	r2,zero
   143a4:	f800283a 	ret
   143a8:	008104c4 	movi	r2,1043
   143ac:	1185c83a 	sub	r2,r2,r6
   143b0:	1884d83a 	srl	r2,r3,r2
   143b4:	003ff306 	br	14384 <_gp+0xfffed27c>

000143b8 <__floatsidf>:
   143b8:	defffd04 	addi	sp,sp,-12
   143bc:	dfc00215 	stw	ra,8(sp)
   143c0:	dc400115 	stw	r17,4(sp)
   143c4:	dc000015 	stw	r16,0(sp)
   143c8:	20002b26 	beq	r4,zero,14478 <__floatsidf+0xc0>
   143cc:	2023883a 	mov	r17,r4
   143d0:	2020d7fa 	srli	r16,r4,31
   143d4:	20002d16 	blt	r4,zero,1448c <__floatsidf+0xd4>
   143d8:	8809883a 	mov	r4,r17
   143dc:	00144940 	call	14494 <__clzsi2>
   143e0:	01410784 	movi	r5,1054
   143e4:	288bc83a 	sub	r5,r5,r2
   143e8:	01010cc4 	movi	r4,1075
   143ec:	2149c83a 	sub	r4,r4,r5
   143f0:	00c007c4 	movi	r3,31
   143f4:	1900160e 	bge	r3,r4,14450 <__floatsidf+0x98>
   143f8:	00c104c4 	movi	r3,1043
   143fc:	1947c83a 	sub	r3,r3,r5
   14400:	88c6983a 	sll	r3,r17,r3
   14404:	00800434 	movhi	r2,16
   14408:	10bfffc4 	addi	r2,r2,-1
   1440c:	1886703a 	and	r3,r3,r2
   14410:	2941ffcc 	andi	r5,r5,2047
   14414:	800d883a 	mov	r6,r16
   14418:	0005883a 	mov	r2,zero
   1441c:	280a953a 	slli	r5,r5,20
   14420:	31803fcc 	andi	r6,r6,255
   14424:	01000434 	movhi	r4,16
   14428:	300c97fa 	slli	r6,r6,31
   1442c:	213fffc4 	addi	r4,r4,-1
   14430:	1906703a 	and	r3,r3,r4
   14434:	1946b03a 	or	r3,r3,r5
   14438:	1986b03a 	or	r3,r3,r6
   1443c:	dfc00217 	ldw	ra,8(sp)
   14440:	dc400117 	ldw	r17,4(sp)
   14444:	dc000017 	ldw	r16,0(sp)
   14448:	dec00304 	addi	sp,sp,12
   1444c:	f800283a 	ret
   14450:	00c002c4 	movi	r3,11
   14454:	1887c83a 	sub	r3,r3,r2
   14458:	88c6d83a 	srl	r3,r17,r3
   1445c:	8904983a 	sll	r2,r17,r4
   14460:	01000434 	movhi	r4,16
   14464:	213fffc4 	addi	r4,r4,-1
   14468:	2941ffcc 	andi	r5,r5,2047
   1446c:	1906703a 	and	r3,r3,r4
   14470:	800d883a 	mov	r6,r16
   14474:	003fe906 	br	1441c <_gp+0xfffed314>
   14478:	000d883a 	mov	r6,zero
   1447c:	000b883a 	mov	r5,zero
   14480:	0007883a 	mov	r3,zero
   14484:	0005883a 	mov	r2,zero
   14488:	003fe406 	br	1441c <_gp+0xfffed314>
   1448c:	0123c83a 	sub	r17,zero,r4
   14490:	003fd106 	br	143d8 <_gp+0xfffed2d0>

00014494 <__clzsi2>:
   14494:	00bfffd4 	movui	r2,65535
   14498:	11000536 	bltu	r2,r4,144b0 <__clzsi2+0x1c>
   1449c:	00803fc4 	movi	r2,255
   144a0:	11000f36 	bltu	r2,r4,144e0 <__clzsi2+0x4c>
   144a4:	00800804 	movi	r2,32
   144a8:	0007883a 	mov	r3,zero
   144ac:	00000506 	br	144c4 <__clzsi2+0x30>
   144b0:	00804034 	movhi	r2,256
   144b4:	10bfffc4 	addi	r2,r2,-1
   144b8:	11000c2e 	bgeu	r2,r4,144ec <__clzsi2+0x58>
   144bc:	00800204 	movi	r2,8
   144c0:	00c00604 	movi	r3,24
   144c4:	20c8d83a 	srl	r4,r4,r3
   144c8:	00c000b4 	movhi	r3,2
   144cc:	18f94304 	addi	r3,r3,-6900
   144d0:	1909883a 	add	r4,r3,r4
   144d4:	20c00003 	ldbu	r3,0(r4)
   144d8:	10c5c83a 	sub	r2,r2,r3
   144dc:	f800283a 	ret
   144e0:	00800604 	movi	r2,24
   144e4:	00c00204 	movi	r3,8
   144e8:	003ff606 	br	144c4 <_gp+0xfffed3bc>
   144ec:	00800404 	movi	r2,16
   144f0:	1007883a 	mov	r3,r2
   144f4:	003ff306 	br	144c4 <_gp+0xfffed3bc>

000144f8 <__mulsi3>:
   144f8:	0005883a 	mov	r2,zero
   144fc:	20000726 	beq	r4,zero,1451c <__mulsi3+0x24>
   14500:	20c0004c 	andi	r3,r4,1
   14504:	2008d07a 	srli	r4,r4,1
   14508:	18000126 	beq	r3,zero,14510 <__mulsi3+0x18>
   1450c:	1145883a 	add	r2,r2,r5
   14510:	294b883a 	add	r5,r5,r5
   14514:	203ffa1e 	bne	r4,zero,14500 <_gp+0xfffed3f8>
   14518:	f800283a 	ret
   1451c:	f800283a 	ret

00014520 <_asprintf_r>:
   14520:	deffe304 	addi	sp,sp,-116
   14524:	dc001a15 	stw	r16,104(sp)
   14528:	2821883a 	mov	r16,r5
   1452c:	dfc01b15 	stw	ra,108(sp)
   14530:	d9c01c15 	stw	r7,112(sp)
   14534:	0080a204 	movi	r2,648
   14538:	d880030d 	sth	r2,12(sp)
   1453c:	d9c01c04 	addi	r7,sp,112
   14540:	00bfffc4 	movi	r2,-1
   14544:	d80b883a 	mov	r5,sp
   14548:	d8000015 	stw	zero,0(sp)
   1454c:	d8000415 	stw	zero,16(sp)
   14550:	d8000215 	stw	zero,8(sp)
   14554:	d8000515 	stw	zero,20(sp)
   14558:	d880038d 	sth	r2,14(sp)
   1455c:	0015b700 	call	15b70 <___svfprintf_internal_r>
   14560:	10000416 	blt	r2,zero,14574 <_asprintf_r+0x54>
   14564:	d8c00017 	ldw	r3,0(sp)
   14568:	18000005 	stb	zero,0(r3)
   1456c:	d8c00417 	ldw	r3,16(sp)
   14570:	80c00015 	stw	r3,0(r16)
   14574:	dfc01b17 	ldw	ra,108(sp)
   14578:	dc001a17 	ldw	r16,104(sp)
   1457c:	dec01d04 	addi	sp,sp,116
   14580:	f800283a 	ret

00014584 <asprintf>:
   14584:	deffe204 	addi	sp,sp,-120
   14588:	dc001a15 	stw	r16,104(sp)
   1458c:	2021883a 	mov	r16,r4
   14590:	dfc01b15 	stw	ra,108(sp)
   14594:	d9801c15 	stw	r6,112(sp)
   14598:	d9c01d15 	stw	r7,116(sp)
   1459c:	008000b4 	movhi	r2,2
   145a0:	10bc4604 	addi	r2,r2,-3816
   145a4:	11000017 	ldw	r4,0(r2)
   145a8:	0080a204 	movi	r2,648
   145ac:	280d883a 	mov	r6,r5
   145b0:	d880030d 	sth	r2,12(sp)
   145b4:	d9c01c04 	addi	r7,sp,112
   145b8:	00bfffc4 	movi	r2,-1
   145bc:	d80b883a 	mov	r5,sp
   145c0:	d8000015 	stw	zero,0(sp)
   145c4:	d8000415 	stw	zero,16(sp)
   145c8:	d8000215 	stw	zero,8(sp)
   145cc:	d8000515 	stw	zero,20(sp)
   145d0:	d880038d 	sth	r2,14(sp)
   145d4:	0015b700 	call	15b70 <___svfprintf_internal_r>
   145d8:	10000416 	blt	r2,zero,145ec <asprintf+0x68>
   145dc:	d8c00017 	ldw	r3,0(sp)
   145e0:	18000005 	stb	zero,0(r3)
   145e4:	d8c00417 	ldw	r3,16(sp)
   145e8:	80c00015 	stw	r3,0(r16)
   145ec:	dfc01b17 	ldw	ra,108(sp)
   145f0:	dc001a17 	ldw	r16,104(sp)
   145f4:	dec01e04 	addi	sp,sp,120
   145f8:	f800283a 	ret

000145fc <__errno>:
   145fc:	008000b4 	movhi	r2,2
   14600:	10bc4604 	addi	r2,r2,-3816
   14604:	10800017 	ldw	r2,0(r2)
   14608:	f800283a 	ret

0001460c <malloc>:
   1460c:	008000b4 	movhi	r2,2
   14610:	10bc4604 	addi	r2,r2,-3816
   14614:	200b883a 	mov	r5,r4
   14618:	11000017 	ldw	r4,0(r2)
   1461c:	00146341 	jmpi	14634 <_malloc_r>

00014620 <free>:
   14620:	008000b4 	movhi	r2,2
   14624:	10bc4604 	addi	r2,r2,-3816
   14628:	200b883a 	mov	r5,r4
   1462c:	11000017 	ldw	r4,0(r2)
   14630:	00198001 	jmpi	19800 <_free_r>

00014634 <_malloc_r>:
   14634:	defff504 	addi	sp,sp,-44
   14638:	dc800315 	stw	r18,12(sp)
   1463c:	dfc00a15 	stw	ra,40(sp)
   14640:	df000915 	stw	fp,36(sp)
   14644:	ddc00815 	stw	r23,32(sp)
   14648:	dd800715 	stw	r22,28(sp)
   1464c:	dd400615 	stw	r21,24(sp)
   14650:	dd000515 	stw	r20,20(sp)
   14654:	dcc00415 	stw	r19,16(sp)
   14658:	dc400215 	stw	r17,8(sp)
   1465c:	dc000115 	stw	r16,4(sp)
   14660:	288002c4 	addi	r2,r5,11
   14664:	00c00584 	movi	r3,22
   14668:	2025883a 	mov	r18,r4
   1466c:	18807f2e 	bgeu	r3,r2,1486c <_malloc_r+0x238>
   14670:	047ffe04 	movi	r17,-8
   14674:	1462703a 	and	r17,r2,r17
   14678:	8800a316 	blt	r17,zero,14908 <_malloc_r+0x2d4>
   1467c:	8940a236 	bltu	r17,r5,14908 <_malloc_r+0x2d4>
   14680:	001dc740 	call	1dc74 <__malloc_lock>
   14684:	00807dc4 	movi	r2,503
   14688:	1441e92e 	bgeu	r2,r17,14e30 <_malloc_r+0x7fc>
   1468c:	8804d27a 	srli	r2,r17,9
   14690:	1000a126 	beq	r2,zero,14918 <_malloc_r+0x2e4>
   14694:	00c00104 	movi	r3,4
   14698:	18811e36 	bltu	r3,r2,14b14 <_malloc_r+0x4e0>
   1469c:	8804d1ba 	srli	r2,r17,6
   146a0:	12000e44 	addi	r8,r2,57
   146a4:	11c00e04 	addi	r7,r2,56
   146a8:	4209883a 	add	r4,r8,r8
   146ac:	04c000b4 	movhi	r19,2
   146b0:	2109883a 	add	r4,r4,r4
   146b4:	9cfb0104 	addi	r19,r19,-5116
   146b8:	2109883a 	add	r4,r4,r4
   146bc:	9909883a 	add	r4,r19,r4
   146c0:	24000117 	ldw	r16,4(r4)
   146c4:	213ffe04 	addi	r4,r4,-8
   146c8:	24009726 	beq	r4,r16,14928 <_malloc_r+0x2f4>
   146cc:	80800117 	ldw	r2,4(r16)
   146d0:	01bfff04 	movi	r6,-4
   146d4:	014003c4 	movi	r5,15
   146d8:	1184703a 	and	r2,r2,r6
   146dc:	1447c83a 	sub	r3,r2,r17
   146e0:	28c00716 	blt	r5,r3,14700 <_malloc_r+0xcc>
   146e4:	1800920e 	bge	r3,zero,14930 <_malloc_r+0x2fc>
   146e8:	84000317 	ldw	r16,12(r16)
   146ec:	24008e26 	beq	r4,r16,14928 <_malloc_r+0x2f4>
   146f0:	80800117 	ldw	r2,4(r16)
   146f4:	1184703a 	and	r2,r2,r6
   146f8:	1447c83a 	sub	r3,r2,r17
   146fc:	28fff90e 	bge	r5,r3,146e4 <_gp+0xfffed5dc>
   14700:	3809883a 	mov	r4,r7
   14704:	018000b4 	movhi	r6,2
   14708:	9c000417 	ldw	r16,16(r19)
   1470c:	31bb0104 	addi	r6,r6,-5116
   14710:	32000204 	addi	r8,r6,8
   14714:	82013426 	beq	r16,r8,14be8 <_malloc_r+0x5b4>
   14718:	80c00117 	ldw	r3,4(r16)
   1471c:	00bfff04 	movi	r2,-4
   14720:	188e703a 	and	r7,r3,r2
   14724:	3c45c83a 	sub	r2,r7,r17
   14728:	00c003c4 	movi	r3,15
   1472c:	18811f16 	blt	r3,r2,14bac <_malloc_r+0x578>
   14730:	32000515 	stw	r8,20(r6)
   14734:	32000415 	stw	r8,16(r6)
   14738:	10007f0e 	bge	r2,zero,14938 <_malloc_r+0x304>
   1473c:	00807fc4 	movi	r2,511
   14740:	11c0fd36 	bltu	r2,r7,14b38 <_malloc_r+0x504>
   14744:	3806d0fa 	srli	r3,r7,3
   14748:	01c00044 	movi	r7,1
   1474c:	30800117 	ldw	r2,4(r6)
   14750:	19400044 	addi	r5,r3,1
   14754:	294b883a 	add	r5,r5,r5
   14758:	1807d0ba 	srai	r3,r3,2
   1475c:	294b883a 	add	r5,r5,r5
   14760:	294b883a 	add	r5,r5,r5
   14764:	298b883a 	add	r5,r5,r6
   14768:	38c6983a 	sll	r3,r7,r3
   1476c:	29c00017 	ldw	r7,0(r5)
   14770:	2a7ffe04 	addi	r9,r5,-8
   14774:	1886b03a 	or	r3,r3,r2
   14778:	82400315 	stw	r9,12(r16)
   1477c:	81c00215 	stw	r7,8(r16)
   14780:	30c00115 	stw	r3,4(r6)
   14784:	2c000015 	stw	r16,0(r5)
   14788:	3c000315 	stw	r16,12(r7)
   1478c:	2005d0ba 	srai	r2,r4,2
   14790:	01400044 	movi	r5,1
   14794:	288a983a 	sll	r5,r5,r2
   14798:	19406f36 	bltu	r3,r5,14958 <_malloc_r+0x324>
   1479c:	28c4703a 	and	r2,r5,r3
   147a0:	10000a1e 	bne	r2,zero,147cc <_malloc_r+0x198>
   147a4:	00bfff04 	movi	r2,-4
   147a8:	294b883a 	add	r5,r5,r5
   147ac:	2088703a 	and	r4,r4,r2
   147b0:	28c4703a 	and	r2,r5,r3
   147b4:	21000104 	addi	r4,r4,4
   147b8:	1000041e 	bne	r2,zero,147cc <_malloc_r+0x198>
   147bc:	294b883a 	add	r5,r5,r5
   147c0:	28c4703a 	and	r2,r5,r3
   147c4:	21000104 	addi	r4,r4,4
   147c8:	103ffc26 	beq	r2,zero,147bc <_gp+0xfffed6b4>
   147cc:	02bfff04 	movi	r10,-4
   147d0:	024003c4 	movi	r9,15
   147d4:	21800044 	addi	r6,r4,1
   147d8:	318d883a 	add	r6,r6,r6
   147dc:	318d883a 	add	r6,r6,r6
   147e0:	318d883a 	add	r6,r6,r6
   147e4:	998d883a 	add	r6,r19,r6
   147e8:	333ffe04 	addi	r12,r6,-8
   147ec:	2017883a 	mov	r11,r4
   147f0:	31800104 	addi	r6,r6,4
   147f4:	34000017 	ldw	r16,0(r6)
   147f8:	31fffd04 	addi	r7,r6,-12
   147fc:	81c0041e 	bne	r16,r7,14810 <_malloc_r+0x1dc>
   14800:	0000fb06 	br	14bf0 <_malloc_r+0x5bc>
   14804:	1801030e 	bge	r3,zero,14c14 <_malloc_r+0x5e0>
   14808:	84000317 	ldw	r16,12(r16)
   1480c:	81c0f826 	beq	r16,r7,14bf0 <_malloc_r+0x5bc>
   14810:	80800117 	ldw	r2,4(r16)
   14814:	1284703a 	and	r2,r2,r10
   14818:	1447c83a 	sub	r3,r2,r17
   1481c:	48fff90e 	bge	r9,r3,14804 <_gp+0xfffed6fc>
   14820:	80800317 	ldw	r2,12(r16)
   14824:	81000217 	ldw	r4,8(r16)
   14828:	89400054 	ori	r5,r17,1
   1482c:	81400115 	stw	r5,4(r16)
   14830:	20800315 	stw	r2,12(r4)
   14834:	11000215 	stw	r4,8(r2)
   14838:	8463883a 	add	r17,r16,r17
   1483c:	9c400515 	stw	r17,20(r19)
   14840:	9c400415 	stw	r17,16(r19)
   14844:	18800054 	ori	r2,r3,1
   14848:	88800115 	stw	r2,4(r17)
   1484c:	8a000315 	stw	r8,12(r17)
   14850:	8a000215 	stw	r8,8(r17)
   14854:	88e3883a 	add	r17,r17,r3
   14858:	88c00015 	stw	r3,0(r17)
   1485c:	9009883a 	mov	r4,r18
   14860:	001dc780 	call	1dc78 <__malloc_unlock>
   14864:	80800204 	addi	r2,r16,8
   14868:	00001b06 	br	148d8 <_malloc_r+0x2a4>
   1486c:	04400404 	movi	r17,16
   14870:	89402536 	bltu	r17,r5,14908 <_malloc_r+0x2d4>
   14874:	001dc740 	call	1dc74 <__malloc_lock>
   14878:	00800184 	movi	r2,6
   1487c:	01000084 	movi	r4,2
   14880:	04c000b4 	movhi	r19,2
   14884:	1085883a 	add	r2,r2,r2
   14888:	9cfb0104 	addi	r19,r19,-5116
   1488c:	1085883a 	add	r2,r2,r2
   14890:	9885883a 	add	r2,r19,r2
   14894:	14000117 	ldw	r16,4(r2)
   14898:	10fffe04 	addi	r3,r2,-8
   1489c:	80c0d926 	beq	r16,r3,14c04 <_malloc_r+0x5d0>
   148a0:	80c00117 	ldw	r3,4(r16)
   148a4:	81000317 	ldw	r4,12(r16)
   148a8:	00bfff04 	movi	r2,-4
   148ac:	1884703a 	and	r2,r3,r2
   148b0:	81400217 	ldw	r5,8(r16)
   148b4:	8085883a 	add	r2,r16,r2
   148b8:	10c00117 	ldw	r3,4(r2)
   148bc:	29000315 	stw	r4,12(r5)
   148c0:	21400215 	stw	r5,8(r4)
   148c4:	18c00054 	ori	r3,r3,1
   148c8:	10c00115 	stw	r3,4(r2)
   148cc:	9009883a 	mov	r4,r18
   148d0:	001dc780 	call	1dc78 <__malloc_unlock>
   148d4:	80800204 	addi	r2,r16,8
   148d8:	dfc00a17 	ldw	ra,40(sp)
   148dc:	df000917 	ldw	fp,36(sp)
   148e0:	ddc00817 	ldw	r23,32(sp)
   148e4:	dd800717 	ldw	r22,28(sp)
   148e8:	dd400617 	ldw	r21,24(sp)
   148ec:	dd000517 	ldw	r20,20(sp)
   148f0:	dcc00417 	ldw	r19,16(sp)
   148f4:	dc800317 	ldw	r18,12(sp)
   148f8:	dc400217 	ldw	r17,8(sp)
   148fc:	dc000117 	ldw	r16,4(sp)
   14900:	dec00b04 	addi	sp,sp,44
   14904:	f800283a 	ret
   14908:	00800304 	movi	r2,12
   1490c:	90800015 	stw	r2,0(r18)
   14910:	0005883a 	mov	r2,zero
   14914:	003ff006 	br	148d8 <_gp+0xfffed7d0>
   14918:	01002004 	movi	r4,128
   1491c:	02001004 	movi	r8,64
   14920:	01c00fc4 	movi	r7,63
   14924:	003f6106 	br	146ac <_gp+0xfffed5a4>
   14928:	4009883a 	mov	r4,r8
   1492c:	003f7506 	br	14704 <_gp+0xfffed5fc>
   14930:	81000317 	ldw	r4,12(r16)
   14934:	003fde06 	br	148b0 <_gp+0xfffed7a8>
   14938:	81c5883a 	add	r2,r16,r7
   1493c:	11400117 	ldw	r5,4(r2)
   14940:	9009883a 	mov	r4,r18
   14944:	29400054 	ori	r5,r5,1
   14948:	11400115 	stw	r5,4(r2)
   1494c:	001dc780 	call	1dc78 <__malloc_unlock>
   14950:	80800204 	addi	r2,r16,8
   14954:	003fe006 	br	148d8 <_gp+0xfffed7d0>
   14958:	9c000217 	ldw	r16,8(r19)
   1495c:	00bfff04 	movi	r2,-4
   14960:	85800117 	ldw	r22,4(r16)
   14964:	b0ac703a 	and	r22,r22,r2
   14968:	b4400336 	bltu	r22,r17,14978 <_malloc_r+0x344>
   1496c:	b445c83a 	sub	r2,r22,r17
   14970:	00c003c4 	movi	r3,15
   14974:	18805d16 	blt	r3,r2,14aec <_malloc_r+0x4b8>
   14978:	05c000b4 	movhi	r23,2
   1497c:	008000b4 	movhi	r2,2
   14980:	10bec104 	addi	r2,r2,-1276
   14984:	bdfc4704 	addi	r23,r23,-3812
   14988:	15400017 	ldw	r21,0(r2)
   1498c:	b8c00017 	ldw	r3,0(r23)
   14990:	00bfffc4 	movi	r2,-1
   14994:	858d883a 	add	r6,r16,r22
   14998:	8d6b883a 	add	r21,r17,r21
   1499c:	1880ea26 	beq	r3,r2,14d48 <_malloc_r+0x714>
   149a0:	ad4403c4 	addi	r21,r21,4111
   149a4:	00bc0004 	movi	r2,-4096
   149a8:	a8aa703a 	and	r21,r21,r2
   149ac:	a80b883a 	mov	r5,r21
   149b0:	9009883a 	mov	r4,r18
   149b4:	d9800015 	stw	r6,0(sp)
   149b8:	0014f680 	call	14f68 <_sbrk_r>
   149bc:	1029883a 	mov	r20,r2
   149c0:	00bfffc4 	movi	r2,-1
   149c4:	d9800017 	ldw	r6,0(sp)
   149c8:	a080e826 	beq	r20,r2,14d6c <_malloc_r+0x738>
   149cc:	a180a636 	bltu	r20,r6,14c68 <_malloc_r+0x634>
   149d0:	070000b4 	movhi	fp,2
   149d4:	e73ed704 	addi	fp,fp,-1188
   149d8:	e0800017 	ldw	r2,0(fp)
   149dc:	a887883a 	add	r3,r21,r2
   149e0:	e0c00015 	stw	r3,0(fp)
   149e4:	3500e626 	beq	r6,r20,14d80 <_malloc_r+0x74c>
   149e8:	b9000017 	ldw	r4,0(r23)
   149ec:	00bfffc4 	movi	r2,-1
   149f0:	2080ee26 	beq	r4,r2,14dac <_malloc_r+0x778>
   149f4:	a185c83a 	sub	r2,r20,r6
   149f8:	10c5883a 	add	r2,r2,r3
   149fc:	e0800015 	stw	r2,0(fp)
   14a00:	a0c001cc 	andi	r3,r20,7
   14a04:	1800bc26 	beq	r3,zero,14cf8 <_malloc_r+0x6c4>
   14a08:	a0e9c83a 	sub	r20,r20,r3
   14a0c:	00840204 	movi	r2,4104
   14a10:	a5000204 	addi	r20,r20,8
   14a14:	10c7c83a 	sub	r3,r2,r3
   14a18:	a545883a 	add	r2,r20,r21
   14a1c:	1083ffcc 	andi	r2,r2,4095
   14a20:	18abc83a 	sub	r21,r3,r2
   14a24:	a80b883a 	mov	r5,r21
   14a28:	9009883a 	mov	r4,r18
   14a2c:	0014f680 	call	14f68 <_sbrk_r>
   14a30:	00ffffc4 	movi	r3,-1
   14a34:	10c0e126 	beq	r2,r3,14dbc <_malloc_r+0x788>
   14a38:	1505c83a 	sub	r2,r2,r20
   14a3c:	1545883a 	add	r2,r2,r21
   14a40:	10800054 	ori	r2,r2,1
   14a44:	e0c00017 	ldw	r3,0(fp)
   14a48:	9d000215 	stw	r20,8(r19)
   14a4c:	a0800115 	stw	r2,4(r20)
   14a50:	a8c7883a 	add	r3,r21,r3
   14a54:	e0c00015 	stw	r3,0(fp)
   14a58:	84c00e26 	beq	r16,r19,14a94 <_malloc_r+0x460>
   14a5c:	018003c4 	movi	r6,15
   14a60:	3580a72e 	bgeu	r6,r22,14d00 <_malloc_r+0x6cc>
   14a64:	81400117 	ldw	r5,4(r16)
   14a68:	013ffe04 	movi	r4,-8
   14a6c:	b0bffd04 	addi	r2,r22,-12
   14a70:	1104703a 	and	r2,r2,r4
   14a74:	2900004c 	andi	r4,r5,1
   14a78:	2088b03a 	or	r4,r4,r2
   14a7c:	81000115 	stw	r4,4(r16)
   14a80:	01400144 	movi	r5,5
   14a84:	8089883a 	add	r4,r16,r2
   14a88:	21400115 	stw	r5,4(r4)
   14a8c:	21400215 	stw	r5,8(r4)
   14a90:	3080cd36 	bltu	r6,r2,14dc8 <_malloc_r+0x794>
   14a94:	008000b4 	movhi	r2,2
   14a98:	10bec004 	addi	r2,r2,-1280
   14a9c:	11000017 	ldw	r4,0(r2)
   14aa0:	20c0012e 	bgeu	r4,r3,14aa8 <_malloc_r+0x474>
   14aa4:	10c00015 	stw	r3,0(r2)
   14aa8:	008000b4 	movhi	r2,2
   14aac:	10bebf04 	addi	r2,r2,-1284
   14ab0:	11000017 	ldw	r4,0(r2)
   14ab4:	9c000217 	ldw	r16,8(r19)
   14ab8:	20c0012e 	bgeu	r4,r3,14ac0 <_malloc_r+0x48c>
   14abc:	10c00015 	stw	r3,0(r2)
   14ac0:	80c00117 	ldw	r3,4(r16)
   14ac4:	00bfff04 	movi	r2,-4
   14ac8:	1886703a 	and	r3,r3,r2
   14acc:	1c45c83a 	sub	r2,r3,r17
   14ad0:	1c400236 	bltu	r3,r17,14adc <_malloc_r+0x4a8>
   14ad4:	00c003c4 	movi	r3,15
   14ad8:	18800416 	blt	r3,r2,14aec <_malloc_r+0x4b8>
   14adc:	9009883a 	mov	r4,r18
   14ae0:	001dc780 	call	1dc78 <__malloc_unlock>
   14ae4:	0005883a 	mov	r2,zero
   14ae8:	003f7b06 	br	148d8 <_gp+0xfffed7d0>
   14aec:	88c00054 	ori	r3,r17,1
   14af0:	80c00115 	stw	r3,4(r16)
   14af4:	8463883a 	add	r17,r16,r17
   14af8:	10800054 	ori	r2,r2,1
   14afc:	9c400215 	stw	r17,8(r19)
   14b00:	88800115 	stw	r2,4(r17)
   14b04:	9009883a 	mov	r4,r18
   14b08:	001dc780 	call	1dc78 <__malloc_unlock>
   14b0c:	80800204 	addi	r2,r16,8
   14b10:	003f7106 	br	148d8 <_gp+0xfffed7d0>
   14b14:	00c00504 	movi	r3,20
   14b18:	18804a2e 	bgeu	r3,r2,14c44 <_malloc_r+0x610>
   14b1c:	00c01504 	movi	r3,84
   14b20:	18806e36 	bltu	r3,r2,14cdc <_malloc_r+0x6a8>
   14b24:	8804d33a 	srli	r2,r17,12
   14b28:	12001bc4 	addi	r8,r2,111
   14b2c:	11c01b84 	addi	r7,r2,110
   14b30:	4209883a 	add	r4,r8,r8
   14b34:	003edd06 	br	146ac <_gp+0xfffed5a4>
   14b38:	3804d27a 	srli	r2,r7,9
   14b3c:	00c00104 	movi	r3,4
   14b40:	1880442e 	bgeu	r3,r2,14c54 <_malloc_r+0x620>
   14b44:	00c00504 	movi	r3,20
   14b48:	18808136 	bltu	r3,r2,14d50 <_malloc_r+0x71c>
   14b4c:	11401704 	addi	r5,r2,92
   14b50:	10c016c4 	addi	r3,r2,91
   14b54:	294b883a 	add	r5,r5,r5
   14b58:	294b883a 	add	r5,r5,r5
   14b5c:	294b883a 	add	r5,r5,r5
   14b60:	994b883a 	add	r5,r19,r5
   14b64:	28800017 	ldw	r2,0(r5)
   14b68:	018000b4 	movhi	r6,2
   14b6c:	297ffe04 	addi	r5,r5,-8
   14b70:	31bb0104 	addi	r6,r6,-5116
   14b74:	28806526 	beq	r5,r2,14d0c <_malloc_r+0x6d8>
   14b78:	01bfff04 	movi	r6,-4
   14b7c:	10c00117 	ldw	r3,4(r2)
   14b80:	1986703a 	and	r3,r3,r6
   14b84:	38c0022e 	bgeu	r7,r3,14b90 <_malloc_r+0x55c>
   14b88:	10800217 	ldw	r2,8(r2)
   14b8c:	28bffb1e 	bne	r5,r2,14b7c <_gp+0xfffeda74>
   14b90:	11400317 	ldw	r5,12(r2)
   14b94:	98c00117 	ldw	r3,4(r19)
   14b98:	81400315 	stw	r5,12(r16)
   14b9c:	80800215 	stw	r2,8(r16)
   14ba0:	2c000215 	stw	r16,8(r5)
   14ba4:	14000315 	stw	r16,12(r2)
   14ba8:	003ef806 	br	1478c <_gp+0xfffed684>
   14bac:	88c00054 	ori	r3,r17,1
   14bb0:	80c00115 	stw	r3,4(r16)
   14bb4:	8463883a 	add	r17,r16,r17
   14bb8:	34400515 	stw	r17,20(r6)
   14bbc:	34400415 	stw	r17,16(r6)
   14bc0:	10c00054 	ori	r3,r2,1
   14bc4:	8a000315 	stw	r8,12(r17)
   14bc8:	8a000215 	stw	r8,8(r17)
   14bcc:	88c00115 	stw	r3,4(r17)
   14bd0:	88a3883a 	add	r17,r17,r2
   14bd4:	88800015 	stw	r2,0(r17)
   14bd8:	9009883a 	mov	r4,r18
   14bdc:	001dc780 	call	1dc78 <__malloc_unlock>
   14be0:	80800204 	addi	r2,r16,8
   14be4:	003f3c06 	br	148d8 <_gp+0xfffed7d0>
   14be8:	30c00117 	ldw	r3,4(r6)
   14bec:	003ee706 	br	1478c <_gp+0xfffed684>
   14bf0:	5ac00044 	addi	r11,r11,1
   14bf4:	588000cc 	andi	r2,r11,3
   14bf8:	31800204 	addi	r6,r6,8
   14bfc:	103efd1e 	bne	r2,zero,147f4 <_gp+0xfffed6ec>
   14c00:	00002406 	br	14c94 <_malloc_r+0x660>
   14c04:	14000317 	ldw	r16,12(r2)
   14c08:	143f251e 	bne	r2,r16,148a0 <_gp+0xfffed798>
   14c0c:	21000084 	addi	r4,r4,2
   14c10:	003ebc06 	br	14704 <_gp+0xfffed5fc>
   14c14:	8085883a 	add	r2,r16,r2
   14c18:	10c00117 	ldw	r3,4(r2)
   14c1c:	81000317 	ldw	r4,12(r16)
   14c20:	81400217 	ldw	r5,8(r16)
   14c24:	18c00054 	ori	r3,r3,1
   14c28:	10c00115 	stw	r3,4(r2)
   14c2c:	29000315 	stw	r4,12(r5)
   14c30:	21400215 	stw	r5,8(r4)
   14c34:	9009883a 	mov	r4,r18
   14c38:	001dc780 	call	1dc78 <__malloc_unlock>
   14c3c:	80800204 	addi	r2,r16,8
   14c40:	003f2506 	br	148d8 <_gp+0xfffed7d0>
   14c44:	12001704 	addi	r8,r2,92
   14c48:	11c016c4 	addi	r7,r2,91
   14c4c:	4209883a 	add	r4,r8,r8
   14c50:	003e9606 	br	146ac <_gp+0xfffed5a4>
   14c54:	3804d1ba 	srli	r2,r7,6
   14c58:	11400e44 	addi	r5,r2,57
   14c5c:	10c00e04 	addi	r3,r2,56
   14c60:	294b883a 	add	r5,r5,r5
   14c64:	003fbc06 	br	14b58 <_gp+0xfffeda50>
   14c68:	84ff5926 	beq	r16,r19,149d0 <_gp+0xfffed8c8>
   14c6c:	008000b4 	movhi	r2,2
   14c70:	10bb0104 	addi	r2,r2,-5116
   14c74:	14000217 	ldw	r16,8(r2)
   14c78:	00bfff04 	movi	r2,-4
   14c7c:	80c00117 	ldw	r3,4(r16)
   14c80:	1886703a 	and	r3,r3,r2
   14c84:	003f9106 	br	14acc <_gp+0xfffed9c4>
   14c88:	60800217 	ldw	r2,8(r12)
   14c8c:	213fffc4 	addi	r4,r4,-1
   14c90:	1300651e 	bne	r2,r12,14e28 <_malloc_r+0x7f4>
   14c94:	208000cc 	andi	r2,r4,3
   14c98:	633ffe04 	addi	r12,r12,-8
   14c9c:	103ffa1e 	bne	r2,zero,14c88 <_gp+0xfffedb80>
   14ca0:	98800117 	ldw	r2,4(r19)
   14ca4:	0146303a 	nor	r3,zero,r5
   14ca8:	1884703a 	and	r2,r3,r2
   14cac:	98800115 	stw	r2,4(r19)
   14cb0:	294b883a 	add	r5,r5,r5
   14cb4:	117f2836 	bltu	r2,r5,14958 <_gp+0xfffed850>
   14cb8:	283f2726 	beq	r5,zero,14958 <_gp+0xfffed850>
   14cbc:	2886703a 	and	r3,r5,r2
   14cc0:	5809883a 	mov	r4,r11
   14cc4:	183ec31e 	bne	r3,zero,147d4 <_gp+0xfffed6cc>
   14cc8:	294b883a 	add	r5,r5,r5
   14ccc:	2886703a 	and	r3,r5,r2
   14cd0:	21000104 	addi	r4,r4,4
   14cd4:	183ffc26 	beq	r3,zero,14cc8 <_gp+0xfffedbc0>
   14cd8:	003ebe06 	br	147d4 <_gp+0xfffed6cc>
   14cdc:	00c05504 	movi	r3,340
   14ce0:	18801236 	bltu	r3,r2,14d2c <_malloc_r+0x6f8>
   14ce4:	8804d3fa 	srli	r2,r17,15
   14ce8:	12001e04 	addi	r8,r2,120
   14cec:	11c01dc4 	addi	r7,r2,119
   14cf0:	4209883a 	add	r4,r8,r8
   14cf4:	003e6d06 	br	146ac <_gp+0xfffed5a4>
   14cf8:	00c40004 	movi	r3,4096
   14cfc:	003f4606 	br	14a18 <_gp+0xfffed910>
   14d00:	00800044 	movi	r2,1
   14d04:	a0800115 	stw	r2,4(r20)
   14d08:	003f7406 	br	14adc <_gp+0xfffed9d4>
   14d0c:	1805d0ba 	srai	r2,r3,2
   14d10:	01c00044 	movi	r7,1
   14d14:	30c00117 	ldw	r3,4(r6)
   14d18:	388e983a 	sll	r7,r7,r2
   14d1c:	2805883a 	mov	r2,r5
   14d20:	38c6b03a 	or	r3,r7,r3
   14d24:	30c00115 	stw	r3,4(r6)
   14d28:	003f9b06 	br	14b98 <_gp+0xfffeda90>
   14d2c:	00c15504 	movi	r3,1364
   14d30:	18801a36 	bltu	r3,r2,14d9c <_malloc_r+0x768>
   14d34:	8804d4ba 	srli	r2,r17,18
   14d38:	12001f44 	addi	r8,r2,125
   14d3c:	11c01f04 	addi	r7,r2,124
   14d40:	4209883a 	add	r4,r8,r8
   14d44:	003e5906 	br	146ac <_gp+0xfffed5a4>
   14d48:	ad400404 	addi	r21,r21,16
   14d4c:	003f1706 	br	149ac <_gp+0xfffed8a4>
   14d50:	00c01504 	movi	r3,84
   14d54:	18802336 	bltu	r3,r2,14de4 <_malloc_r+0x7b0>
   14d58:	3804d33a 	srli	r2,r7,12
   14d5c:	11401bc4 	addi	r5,r2,111
   14d60:	10c01b84 	addi	r3,r2,110
   14d64:	294b883a 	add	r5,r5,r5
   14d68:	003f7b06 	br	14b58 <_gp+0xfffeda50>
   14d6c:	9c000217 	ldw	r16,8(r19)
   14d70:	00bfff04 	movi	r2,-4
   14d74:	80c00117 	ldw	r3,4(r16)
   14d78:	1886703a 	and	r3,r3,r2
   14d7c:	003f5306 	br	14acc <_gp+0xfffed9c4>
   14d80:	3083ffcc 	andi	r2,r6,4095
   14d84:	103f181e 	bne	r2,zero,149e8 <_gp+0xfffed8e0>
   14d88:	99000217 	ldw	r4,8(r19)
   14d8c:	b545883a 	add	r2,r22,r21
   14d90:	10800054 	ori	r2,r2,1
   14d94:	20800115 	stw	r2,4(r4)
   14d98:	003f3e06 	br	14a94 <_gp+0xfffed98c>
   14d9c:	01003f84 	movi	r4,254
   14da0:	02001fc4 	movi	r8,127
   14da4:	01c01f84 	movi	r7,126
   14da8:	003e4006 	br	146ac <_gp+0xfffed5a4>
   14dac:	008000b4 	movhi	r2,2
   14db0:	10bc4704 	addi	r2,r2,-3812
   14db4:	15000015 	stw	r20,0(r2)
   14db8:	003f1106 	br	14a00 <_gp+0xfffed8f8>
   14dbc:	00800044 	movi	r2,1
   14dc0:	002b883a 	mov	r21,zero
   14dc4:	003f1f06 	br	14a44 <_gp+0xfffed93c>
   14dc8:	81400204 	addi	r5,r16,8
   14dcc:	9009883a 	mov	r4,r18
   14dd0:	00198000 	call	19800 <_free_r>
   14dd4:	008000b4 	movhi	r2,2
   14dd8:	10bed704 	addi	r2,r2,-1188
   14ddc:	10c00017 	ldw	r3,0(r2)
   14de0:	003f2c06 	br	14a94 <_gp+0xfffed98c>
   14de4:	00c05504 	movi	r3,340
   14de8:	18800536 	bltu	r3,r2,14e00 <_malloc_r+0x7cc>
   14dec:	3804d3fa 	srli	r2,r7,15
   14df0:	11401e04 	addi	r5,r2,120
   14df4:	10c01dc4 	addi	r3,r2,119
   14df8:	294b883a 	add	r5,r5,r5
   14dfc:	003f5606 	br	14b58 <_gp+0xfffeda50>
   14e00:	00c15504 	movi	r3,1364
   14e04:	18800536 	bltu	r3,r2,14e1c <_malloc_r+0x7e8>
   14e08:	3804d4ba 	srli	r2,r7,18
   14e0c:	11401f44 	addi	r5,r2,125
   14e10:	10c01f04 	addi	r3,r2,124
   14e14:	294b883a 	add	r5,r5,r5
   14e18:	003f4f06 	br	14b58 <_gp+0xfffeda50>
   14e1c:	01403f84 	movi	r5,254
   14e20:	00c01f84 	movi	r3,126
   14e24:	003f4c06 	br	14b58 <_gp+0xfffeda50>
   14e28:	98800117 	ldw	r2,4(r19)
   14e2c:	003fa006 	br	14cb0 <_gp+0xfffedba8>
   14e30:	8808d0fa 	srli	r4,r17,3
   14e34:	20800044 	addi	r2,r4,1
   14e38:	1085883a 	add	r2,r2,r2
   14e3c:	003e9006 	br	14880 <_gp+0xfffed778>

00014e40 <memset>:
   14e40:	20c000cc 	andi	r3,r4,3
   14e44:	2005883a 	mov	r2,r4
   14e48:	18004426 	beq	r3,zero,14f5c <memset+0x11c>
   14e4c:	31ffffc4 	addi	r7,r6,-1
   14e50:	30004026 	beq	r6,zero,14f54 <memset+0x114>
   14e54:	2813883a 	mov	r9,r5
   14e58:	200d883a 	mov	r6,r4
   14e5c:	2007883a 	mov	r3,r4
   14e60:	00000406 	br	14e74 <memset+0x34>
   14e64:	3a3fffc4 	addi	r8,r7,-1
   14e68:	31800044 	addi	r6,r6,1
   14e6c:	38003926 	beq	r7,zero,14f54 <memset+0x114>
   14e70:	400f883a 	mov	r7,r8
   14e74:	18c00044 	addi	r3,r3,1
   14e78:	32400005 	stb	r9,0(r6)
   14e7c:	1a0000cc 	andi	r8,r3,3
   14e80:	403ff81e 	bne	r8,zero,14e64 <_gp+0xfffedd5c>
   14e84:	010000c4 	movi	r4,3
   14e88:	21c02d2e 	bgeu	r4,r7,14f40 <memset+0x100>
   14e8c:	29003fcc 	andi	r4,r5,255
   14e90:	200c923a 	slli	r6,r4,8
   14e94:	3108b03a 	or	r4,r6,r4
   14e98:	200c943a 	slli	r6,r4,16
   14e9c:	218cb03a 	or	r6,r4,r6
   14ea0:	010003c4 	movi	r4,15
   14ea4:	21c0182e 	bgeu	r4,r7,14f08 <memset+0xc8>
   14ea8:	3b3ffc04 	addi	r12,r7,-16
   14eac:	6018d13a 	srli	r12,r12,4
   14eb0:	1a000104 	addi	r8,r3,4
   14eb4:	1ac00204 	addi	r11,r3,8
   14eb8:	6008913a 	slli	r4,r12,4
   14ebc:	1a800304 	addi	r10,r3,12
   14ec0:	1813883a 	mov	r9,r3
   14ec4:	21000504 	addi	r4,r4,20
   14ec8:	1909883a 	add	r4,r3,r4
   14ecc:	49800015 	stw	r6,0(r9)
   14ed0:	41800015 	stw	r6,0(r8)
   14ed4:	59800015 	stw	r6,0(r11)
   14ed8:	51800015 	stw	r6,0(r10)
   14edc:	42000404 	addi	r8,r8,16
   14ee0:	4a400404 	addi	r9,r9,16
   14ee4:	5ac00404 	addi	r11,r11,16
   14ee8:	52800404 	addi	r10,r10,16
   14eec:	413ff71e 	bne	r8,r4,14ecc <_gp+0xfffeddc4>
   14ef0:	63000044 	addi	r12,r12,1
   14ef4:	6018913a 	slli	r12,r12,4
   14ef8:	39c003cc 	andi	r7,r7,15
   14efc:	010000c4 	movi	r4,3
   14f00:	1b07883a 	add	r3,r3,r12
   14f04:	21c00e2e 	bgeu	r4,r7,14f40 <memset+0x100>
   14f08:	1813883a 	mov	r9,r3
   14f0c:	3811883a 	mov	r8,r7
   14f10:	010000c4 	movi	r4,3
   14f14:	49800015 	stw	r6,0(r9)
   14f18:	423fff04 	addi	r8,r8,-4
   14f1c:	4a400104 	addi	r9,r9,4
   14f20:	223ffc36 	bltu	r4,r8,14f14 <_gp+0xfffede0c>
   14f24:	393fff04 	addi	r4,r7,-4
   14f28:	2008d0ba 	srli	r4,r4,2
   14f2c:	39c000cc 	andi	r7,r7,3
   14f30:	21000044 	addi	r4,r4,1
   14f34:	2109883a 	add	r4,r4,r4
   14f38:	2109883a 	add	r4,r4,r4
   14f3c:	1907883a 	add	r3,r3,r4
   14f40:	38000526 	beq	r7,zero,14f58 <memset+0x118>
   14f44:	19cf883a 	add	r7,r3,r7
   14f48:	19400005 	stb	r5,0(r3)
   14f4c:	18c00044 	addi	r3,r3,1
   14f50:	38fffd1e 	bne	r7,r3,14f48 <_gp+0xfffede40>
   14f54:	f800283a 	ret
   14f58:	f800283a 	ret
   14f5c:	2007883a 	mov	r3,r4
   14f60:	300f883a 	mov	r7,r6
   14f64:	003fc706 	br	14e84 <_gp+0xfffedd7c>

00014f68 <_sbrk_r>:
   14f68:	defffd04 	addi	sp,sp,-12
   14f6c:	dc000015 	stw	r16,0(sp)
   14f70:	040000b4 	movhi	r16,2
   14f74:	dc400115 	stw	r17,4(sp)
   14f78:	843ec204 	addi	r16,r16,-1272
   14f7c:	2023883a 	mov	r17,r4
   14f80:	2809883a 	mov	r4,r5
   14f84:	dfc00215 	stw	ra,8(sp)
   14f88:	80000015 	stw	zero,0(r16)
   14f8c:	001de6c0 	call	1de6c <sbrk>
   14f90:	00ffffc4 	movi	r3,-1
   14f94:	10c00526 	beq	r2,r3,14fac <_sbrk_r+0x44>
   14f98:	dfc00217 	ldw	ra,8(sp)
   14f9c:	dc400117 	ldw	r17,4(sp)
   14fa0:	dc000017 	ldw	r16,0(sp)
   14fa4:	dec00304 	addi	sp,sp,12
   14fa8:	f800283a 	ret
   14fac:	80c00017 	ldw	r3,0(r16)
   14fb0:	183ff926 	beq	r3,zero,14f98 <_gp+0xfffede90>
   14fb4:	88c00015 	stw	r3,0(r17)
   14fb8:	003ff706 	br	14f98 <_gp+0xfffede90>

00014fbc <_sprintf_r>:
   14fbc:	deffe404 	addi	sp,sp,-112
   14fc0:	2807883a 	mov	r3,r5
   14fc4:	dfc01a15 	stw	ra,104(sp)
   14fc8:	d9c01b15 	stw	r7,108(sp)
   14fcc:	00a00034 	movhi	r2,32768
   14fd0:	10bfffc4 	addi	r2,r2,-1
   14fd4:	02008204 	movi	r8,520
   14fd8:	d8800215 	stw	r2,8(sp)
   14fdc:	d8800515 	stw	r2,20(sp)
   14fe0:	d9c01b04 	addi	r7,sp,108
   14fe4:	d80b883a 	mov	r5,sp
   14fe8:	00bfffc4 	movi	r2,-1
   14fec:	d8c00015 	stw	r3,0(sp)
   14ff0:	d8c00415 	stw	r3,16(sp)
   14ff4:	da00030d 	sth	r8,12(sp)
   14ff8:	d880038d 	sth	r2,14(sp)
   14ffc:	0015b700 	call	15b70 <___svfprintf_internal_r>
   15000:	d8c00017 	ldw	r3,0(sp)
   15004:	18000005 	stb	zero,0(r3)
   15008:	dfc01a17 	ldw	ra,104(sp)
   1500c:	dec01c04 	addi	sp,sp,112
   15010:	f800283a 	ret

00015014 <sprintf>:
   15014:	deffe304 	addi	sp,sp,-116
   15018:	2007883a 	mov	r3,r4
   1501c:	dfc01a15 	stw	ra,104(sp)
   15020:	d9801b15 	stw	r6,108(sp)
   15024:	d9c01c15 	stw	r7,112(sp)
   15028:	010000b4 	movhi	r4,2
   1502c:	213c4604 	addi	r4,r4,-3816
   15030:	21000017 	ldw	r4,0(r4)
   15034:	00a00034 	movhi	r2,32768
   15038:	10bfffc4 	addi	r2,r2,-1
   1503c:	280d883a 	mov	r6,r5
   15040:	02008204 	movi	r8,520
   15044:	d8800215 	stw	r2,8(sp)
   15048:	d8800515 	stw	r2,20(sp)
   1504c:	d9c01b04 	addi	r7,sp,108
   15050:	d80b883a 	mov	r5,sp
   15054:	00bfffc4 	movi	r2,-1
   15058:	d8c00015 	stw	r3,0(sp)
   1505c:	d8c00415 	stw	r3,16(sp)
   15060:	da00030d 	sth	r8,12(sp)
   15064:	d880038d 	sth	r2,14(sp)
   15068:	0015b700 	call	15b70 <___svfprintf_internal_r>
   1506c:	d8c00017 	ldw	r3,0(sp)
   15070:	18000005 	stb	zero,0(r3)
   15074:	dfc01a17 	ldw	ra,104(sp)
   15078:	dec01d04 	addi	sp,sp,116
   1507c:	f800283a 	ret

00015080 <strchr>:
   15080:	2ac03fcc 	andi	r11,r5,255
   15084:	2813883a 	mov	r9,r5
   15088:	208000cc 	andi	r2,r4,3
   1508c:	58003726 	beq	r11,zero,1516c <strchr+0xec>
   15090:	10000b26 	beq	r2,zero,150c0 <strchr+0x40>
   15094:	20800003 	ldbu	r2,0(r4)
   15098:	10003226 	beq	r2,zero,15164 <strchr+0xe4>
   1509c:	28c03fcc 	andi	r3,r5,255
   150a0:	5880041e 	bne	r11,r2,150b4 <strchr+0x34>
   150a4:	00004d06 	br	151dc <strchr+0x15c>
   150a8:	20800003 	ldbu	r2,0(r4)
   150ac:	10002d26 	beq	r2,zero,15164 <strchr+0xe4>
   150b0:	18804a26 	beq	r3,r2,151dc <strchr+0x15c>
   150b4:	21000044 	addi	r4,r4,1
   150b8:	208000cc 	andi	r2,r4,3
   150bc:	103ffa1e 	bne	r2,zero,150a8 <_gp+0xfffedfa0>
   150c0:	29403fcc 	andi	r5,r5,255
   150c4:	2814923a 	slli	r10,r5,8
   150c8:	20800017 	ldw	r2,0(r4)
   150cc:	01bfbff4 	movhi	r6,65279
   150d0:	2a8ab03a 	or	r5,r5,r10
   150d4:	2814943a 	slli	r10,r5,16
   150d8:	31bfbfc4 	addi	r6,r6,-257
   150dc:	119b883a 	add	r13,r2,r6
   150e0:	5154b03a 	or	r10,r10,r5
   150e4:	008e303a 	nor	r7,zero,r2
   150e8:	5084f03a 	xor	r2,r10,r2
   150ec:	1191883a 	add	r8,r2,r6
   150f0:	0086303a 	nor	r3,zero,r2
   150f4:	03202074 	movhi	r12,32897
   150f8:	69ca703a 	and	r5,r13,r7
   150fc:	40c4703a 	and	r2,r8,r3
   15100:	63202004 	addi	r12,r12,-32640
   15104:	2884b03a 	or	r2,r5,r2
   15108:	1304703a 	and	r2,r2,r12
   1510c:	10000c1e 	bne	r2,zero,15140 <strchr+0xc0>
   15110:	21000104 	addi	r4,r4,4
   15114:	20c00017 	ldw	r3,0(r4)
   15118:	50c4f03a 	xor	r2,r10,r3
   1511c:	1991883a 	add	r8,r3,r6
   15120:	00ca303a 	nor	r5,zero,r3
   15124:	118f883a 	add	r7,r2,r6
   15128:	0086303a 	nor	r3,zero,r2
   1512c:	414a703a 	and	r5,r8,r5
   15130:	38c4703a 	and	r2,r7,r3
   15134:	2884b03a 	or	r2,r5,r2
   15138:	1304703a 	and	r2,r2,r12
   1513c:	103ff426 	beq	r2,zero,15110 <_gp+0xfffee008>
   15140:	20800003 	ldbu	r2,0(r4)
   15144:	10000726 	beq	r2,zero,15164 <strchr+0xe4>
   15148:	58802426 	beq	r11,r2,151dc <strchr+0x15c>
   1514c:	48c03fcc 	andi	r3,r9,255
   15150:	00000106 	br	15158 <strchr+0xd8>
   15154:	18802126 	beq	r3,r2,151dc <strchr+0x15c>
   15158:	21000044 	addi	r4,r4,1
   1515c:	20800003 	ldbu	r2,0(r4)
   15160:	103ffc1e 	bne	r2,zero,15154 <_gp+0xfffee04c>
   15164:	0005883a 	mov	r2,zero
   15168:	f800283a 	ret
   1516c:	10000526 	beq	r2,zero,15184 <strchr+0x104>
   15170:	20800003 	ldbu	r2,0(r4)
   15174:	10001926 	beq	r2,zero,151dc <strchr+0x15c>
   15178:	21000044 	addi	r4,r4,1
   1517c:	208000cc 	andi	r2,r4,3
   15180:	103ffb1e 	bne	r2,zero,15170 <_gp+0xfffee068>
   15184:	20800017 	ldw	r2,0(r4)
   15188:	01bfbff4 	movhi	r6,65279
   1518c:	31bfbfc4 	addi	r6,r6,-257
   15190:	0086303a 	nor	r3,zero,r2
   15194:	01602074 	movhi	r5,32897
   15198:	1185883a 	add	r2,r2,r6
   1519c:	29602004 	addi	r5,r5,-32640
   151a0:	10c4703a 	and	r2,r2,r3
   151a4:	1144703a 	and	r2,r2,r5
   151a8:	1000071e 	bne	r2,zero,151c8 <strchr+0x148>
   151ac:	21000104 	addi	r4,r4,4
   151b0:	20800017 	ldw	r2,0(r4)
   151b4:	1187883a 	add	r3,r2,r6
   151b8:	0084303a 	nor	r2,zero,r2
   151bc:	1884703a 	and	r2,r3,r2
   151c0:	1144703a 	and	r2,r2,r5
   151c4:	103ff926 	beq	r2,zero,151ac <_gp+0xfffee0a4>
   151c8:	20800003 	ldbu	r2,0(r4)
   151cc:	10000326 	beq	r2,zero,151dc <strchr+0x15c>
   151d0:	21000044 	addi	r4,r4,1
   151d4:	20800003 	ldbu	r2,0(r4)
   151d8:	103ffd1e 	bne	r2,zero,151d0 <_gp+0xfffee0c8>
   151dc:	2005883a 	mov	r2,r4
   151e0:	f800283a 	ret

000151e4 <strcpy>:
   151e4:	2906b03a 	or	r3,r5,r4
   151e8:	18c000cc 	andi	r3,r3,3
   151ec:	2005883a 	mov	r2,r4
   151f0:	1800161e 	bne	r3,zero,1524c <strcpy+0x68>
   151f4:	29c00017 	ldw	r7,0(r5)
   151f8:	02ffbff4 	movhi	r11,65279
   151fc:	5affbfc4 	addi	r11,r11,-257
   15200:	02a02074 	movhi	r10,32897
   15204:	01c6303a 	nor	r3,zero,r7
   15208:	3ac9883a 	add	r4,r7,r11
   1520c:	52a02004 	addi	r10,r10,-32640
   15210:	20c6703a 	and	r3,r4,r3
   15214:	1a86703a 	and	r3,r3,r10
   15218:	18000c1e 	bne	r3,zero,1524c <strcpy+0x68>
   1521c:	1011883a 	mov	r8,r2
   15220:	41c00015 	stw	r7,0(r8)
   15224:	29400104 	addi	r5,r5,4
   15228:	29c00017 	ldw	r7,0(r5)
   1522c:	41800104 	addi	r6,r8,4
   15230:	3011883a 	mov	r8,r6
   15234:	3ad3883a 	add	r9,r7,r11
   15238:	01c6303a 	nor	r3,zero,r7
   1523c:	48c6703a 	and	r3,r9,r3
   15240:	1a86703a 	and	r3,r3,r10
   15244:	183ff626 	beq	r3,zero,15220 <_gp+0xfffee118>
   15248:	00000106 	br	15250 <strcpy+0x6c>
   1524c:	100d883a 	mov	r6,r2
   15250:	28c00003 	ldbu	r3,0(r5)
   15254:	31800044 	addi	r6,r6,1
   15258:	29400044 	addi	r5,r5,1
   1525c:	30ffffc5 	stb	r3,-1(r6)
   15260:	18c03fcc 	andi	r3,r3,255
   15264:	18c0201c 	xori	r3,r3,128
   15268:	18ffe004 	addi	r3,r3,-128
   1526c:	183ff81e 	bne	r3,zero,15250 <_gp+0xfffee148>
   15270:	f800283a 	ret

00015274 <strlen>:
   15274:	208000cc 	andi	r2,r4,3
   15278:	10002026 	beq	r2,zero,152fc <strlen+0x88>
   1527c:	20800007 	ldb	r2,0(r4)
   15280:	10002026 	beq	r2,zero,15304 <strlen+0x90>
   15284:	2005883a 	mov	r2,r4
   15288:	00000206 	br	15294 <strlen+0x20>
   1528c:	10c00007 	ldb	r3,0(r2)
   15290:	18001826 	beq	r3,zero,152f4 <strlen+0x80>
   15294:	10800044 	addi	r2,r2,1
   15298:	10c000cc 	andi	r3,r2,3
   1529c:	183ffb1e 	bne	r3,zero,1528c <_gp+0xfffee184>
   152a0:	10c00017 	ldw	r3,0(r2)
   152a4:	01ffbff4 	movhi	r7,65279
   152a8:	39ffbfc4 	addi	r7,r7,-257
   152ac:	00ca303a 	nor	r5,zero,r3
   152b0:	01a02074 	movhi	r6,32897
   152b4:	19c7883a 	add	r3,r3,r7
   152b8:	31a02004 	addi	r6,r6,-32640
   152bc:	1946703a 	and	r3,r3,r5
   152c0:	1986703a 	and	r3,r3,r6
   152c4:	1800091e 	bne	r3,zero,152ec <strlen+0x78>
   152c8:	10800104 	addi	r2,r2,4
   152cc:	10c00017 	ldw	r3,0(r2)
   152d0:	19cb883a 	add	r5,r3,r7
   152d4:	00c6303a 	nor	r3,zero,r3
   152d8:	28c6703a 	and	r3,r5,r3
   152dc:	1986703a 	and	r3,r3,r6
   152e0:	183ff926 	beq	r3,zero,152c8 <_gp+0xfffee1c0>
   152e4:	00000106 	br	152ec <strlen+0x78>
   152e8:	10800044 	addi	r2,r2,1
   152ec:	10c00007 	ldb	r3,0(r2)
   152f0:	183ffd1e 	bne	r3,zero,152e8 <_gp+0xfffee1e0>
   152f4:	1105c83a 	sub	r2,r2,r4
   152f8:	f800283a 	ret
   152fc:	2005883a 	mov	r2,r4
   15300:	003fe706 	br	152a0 <_gp+0xfffee198>
   15304:	0005883a 	mov	r2,zero
   15308:	f800283a 	ret

0001530c <critical_factorization>:
   1530c:	02c00044 	movi	r11,1
   15310:	5811883a 	mov	r8,r11
   15314:	0013883a 	mov	r9,zero
   15318:	00bfffc4 	movi	r2,-1
   1531c:	2087883a 	add	r3,r4,r2
   15320:	1a0f883a 	add	r7,r3,r8
   15324:	4a07883a 	add	r3,r9,r8
   15328:	20d5883a 	add	r10,r4,r3
   1532c:	1940102e 	bgeu	r3,r5,15370 <critical_factorization+0x64>
   15330:	52800003 	ldbu	r10,0(r10)
   15334:	39c00003 	ldbu	r7,0(r7)
   15338:	51c0042e 	bgeu	r10,r7,1534c <critical_factorization+0x40>
   1533c:	1897c83a 	sub	r11,r3,r2
   15340:	1813883a 	mov	r9,r3
   15344:	02000044 	movi	r8,1
   15348:	003ff406 	br	1531c <_gp+0xfffee214>
   1534c:	51c00526 	beq	r10,r7,15364 <critical_factorization+0x58>
   15350:	02c00044 	movi	r11,1
   15354:	4805883a 	mov	r2,r9
   15358:	5811883a 	mov	r8,r11
   1535c:	4ad3883a 	add	r9,r9,r11
   15360:	003fee06 	br	1531c <_gp+0xfffee214>
   15364:	42c02226 	beq	r8,r11,153f0 <critical_factorization+0xe4>
   15368:	42000044 	addi	r8,r8,1
   1536c:	003feb06 	br	1531c <_gp+0xfffee214>
   15370:	03000044 	movi	r12,1
   15374:	32c00015 	stw	r11,0(r6)
   15378:	6011883a 	mov	r8,r12
   1537c:	0013883a 	mov	r9,zero
   15380:	02ffffc4 	movi	r11,-1
   15384:	22c7883a 	add	r3,r4,r11
   15388:	1a0f883a 	add	r7,r3,r8
   1538c:	4a07883a 	add	r3,r9,r8
   15390:	20d5883a 	add	r10,r4,r3
   15394:	1940102e 	bgeu	r3,r5,153d8 <critical_factorization+0xcc>
   15398:	52800003 	ldbu	r10,0(r10)
   1539c:	39c00003 	ldbu	r7,0(r7)
   153a0:	3a80042e 	bgeu	r7,r10,153b4 <critical_factorization+0xa8>
   153a4:	1ad9c83a 	sub	r12,r3,r11
   153a8:	1813883a 	mov	r9,r3
   153ac:	02000044 	movi	r8,1
   153b0:	003ff406 	br	15384 <_gp+0xfffee27c>
   153b4:	51c00526 	beq	r10,r7,153cc <critical_factorization+0xc0>
   153b8:	03000044 	movi	r12,1
   153bc:	4817883a 	mov	r11,r9
   153c0:	6011883a 	mov	r8,r12
   153c4:	4b13883a 	add	r9,r9,r12
   153c8:	003fee06 	br	15384 <_gp+0xfffee27c>
   153cc:	43000c26 	beq	r8,r12,15400 <critical_factorization+0xf4>
   153d0:	42000044 	addi	r8,r8,1
   153d4:	003feb06 	br	15384 <_gp+0xfffee27c>
   153d8:	5ac00044 	addi	r11,r11,1
   153dc:	10800044 	addi	r2,r2,1
   153e0:	58800236 	bltu	r11,r2,153ec <critical_factorization+0xe0>
   153e4:	33000015 	stw	r12,0(r6)
   153e8:	5805883a 	mov	r2,r11
   153ec:	f800283a 	ret
   153f0:	4017883a 	mov	r11,r8
   153f4:	1813883a 	mov	r9,r3
   153f8:	02000044 	movi	r8,1
   153fc:	003fc706 	br	1531c <_gp+0xfffee214>
   15400:	4019883a 	mov	r12,r8
   15404:	1813883a 	mov	r9,r3
   15408:	02000044 	movi	r8,1
   1540c:	003fdd06 	br	15384 <_gp+0xfffee27c>

00015410 <two_way_long_needle>:
   15410:	defef104 	addi	sp,sp,-1084
   15414:	dc810715 	stw	r18,1052(sp)
   15418:	dc410615 	stw	r17,1048(sp)
   1541c:	dc810004 	addi	r18,sp,1024
   15420:	3023883a 	mov	r17,r6
   15424:	2807883a 	mov	r3,r5
   15428:	ddc10c15 	stw	r23,1072(sp)
   1542c:	900d883a 	mov	r6,r18
   15430:	202f883a 	mov	r23,r4
   15434:	380b883a 	mov	r5,r7
   15438:	8809883a 	mov	r4,r17
   1543c:	dd810b15 	stw	r22,1068(sp)
   15440:	dc010515 	stw	r16,1044(sp)
   15444:	d8c10415 	stw	r3,1040(sp)
   15448:	dfc10e15 	stw	ra,1080(sp)
   1544c:	df010d15 	stw	fp,1076(sp)
   15450:	dd410a15 	stw	r21,1064(sp)
   15454:	dd010915 	stw	r20,1060(sp)
   15458:	dcc10815 	stw	r19,1056(sp)
   1545c:	382d883a 	mov	r22,r7
   15460:	001530c0 	call	1530c <critical_factorization>
   15464:	d8c10417 	ldw	r3,1040(sp)
   15468:	1021883a 	mov	r16,r2
   1546c:	d805883a 	mov	r2,sp
   15470:	15800015 	stw	r22,0(r2)
   15474:	10800104 	addi	r2,r2,4
   15478:	90bffd1e 	bne	r18,r2,15470 <_gp+0xfffee368>
   1547c:	b0000b26 	beq	r22,zero,154ac <two_way_long_needle+0x9c>
   15480:	b17fffc4 	addi	r5,r22,-1
   15484:	8809883a 	mov	r4,r17
   15488:	8d8d883a 	add	r6,r17,r22
   1548c:	20800003 	ldbu	r2,0(r4)
   15490:	21000044 	addi	r4,r4,1
   15494:	1085883a 	add	r2,r2,r2
   15498:	1085883a 	add	r2,r2,r2
   1549c:	d885883a 	add	r2,sp,r2
   154a0:	11400015 	stw	r5,0(r2)
   154a4:	297fffc4 	addi	r5,r5,-1
   154a8:	21bff81e 	bne	r4,r6,1548c <_gp+0xfffee384>
   154ac:	d9410017 	ldw	r5,1024(sp)
   154b0:	800d883a 	mov	r6,r16
   154b4:	8809883a 	mov	r4,r17
   154b8:	894b883a 	add	r5,r17,r5
   154bc:	d8c10415 	stw	r3,1040(sp)
   154c0:	0019cd00 	call	19cd0 <memcmp>
   154c4:	d8c10417 	ldw	r3,1040(sp)
   154c8:	10006a1e 	bne	r2,zero,15674 <two_way_long_needle+0x264>
   154cc:	84bfffc4 	addi	r18,r16,-1
   154d0:	8c85883a 	add	r2,r17,r18
   154d4:	d8810215 	stw	r2,1032(sp)
   154d8:	00800044 	movi	r2,1
   154dc:	813fff84 	addi	r4,r16,-2
   154e0:	1405c83a 	sub	r2,r2,r16
   154e4:	0029883a 	mov	r20,zero
   154e8:	0039883a 	mov	fp,zero
   154ec:	b57fffc4 	addi	r21,r22,-1
   154f0:	d9010115 	stw	r4,1028(sp)
   154f4:	d8810315 	stw	r2,1036(sp)
   154f8:	00000706 	br	15518 <two_way_long_needle+0x108>
   154fc:	a0000326 	beq	r20,zero,1550c <two_way_long_needle+0xfc>
   15500:	d8c10017 	ldw	r3,1024(sp)
   15504:	10c0012e 	bgeu	r2,r3,1550c <two_way_long_needle+0xfc>
   15508:	b0c5c83a 	sub	r2,r22,r3
   1550c:	e0b9883a 	add	fp,fp,r2
   15510:	0029883a 	mov	r20,zero
   15514:	9807883a 	mov	r3,r19
   15518:	e5a7883a 	add	r19,fp,r22
   1551c:	98cdc83a 	sub	r6,r19,r3
   15520:	000b883a 	mov	r5,zero
   15524:	b8c9883a 	add	r4,r23,r3
   15528:	0019bec0 	call	19bec <memchr>
   1552c:	1000441e 	bne	r2,zero,15640 <two_way_long_needle+0x230>
   15530:	98004326 	beq	r19,zero,15640 <two_way_long_needle+0x230>
   15534:	bcc5883a 	add	r2,r23,r19
   15538:	10bfffc3 	ldbu	r2,-1(r2)
   1553c:	1085883a 	add	r2,r2,r2
   15540:	1085883a 	add	r2,r2,r2
   15544:	d885883a 	add	r2,sp,r2
   15548:	10800017 	ldw	r2,0(r2)
   1554c:	103feb1e 	bne	r2,zero,154fc <_gp+0xfffee3f4>
   15550:	a015883a 	mov	r10,r20
   15554:	a400012e 	bgeu	r20,r16,1555c <two_way_long_needle+0x14c>
   15558:	8015883a 	mov	r10,r16
   1555c:	5540152e 	bgeu	r10,r21,155b4 <two_way_long_needle+0x1a4>
   15560:	bf05883a 	add	r2,r23,fp
   15564:	8a87883a 	add	r3,r17,r10
   15568:	1285883a 	add	r2,r2,r10
   1556c:	18c00003 	ldbu	r3,0(r3)
   15570:	10800003 	ldbu	r2,0(r2)
   15574:	18802d1e 	bne	r3,r2,1562c <two_way_long_needle+0x21c>
   15578:	e1400044 	addi	r5,fp,1
   1557c:	50800044 	addi	r2,r10,1
   15580:	2a8b883a 	add	r5,r5,r10
   15584:	888d883a 	add	r6,r17,r2
   15588:	b94b883a 	add	r5,r23,r5
   1558c:	00000706 	br	155ac <two_way_long_needle+0x19c>
   15590:	31000003 	ldbu	r4,0(r6)
   15594:	28c00003 	ldbu	r3,0(r5)
   15598:	31800044 	addi	r6,r6,1
   1559c:	21003fcc 	andi	r4,r4,255
   155a0:	29400044 	addi	r5,r5,1
   155a4:	20c0211e 	bne	r4,r3,1562c <two_way_long_needle+0x21c>
   155a8:	10800044 	addi	r2,r2,1
   155ac:	1015883a 	mov	r10,r2
   155b0:	157ff736 	bltu	r2,r21,15590 <_gp+0xfffee488>
   155b4:	900d883a 	mov	r6,r18
   155b8:	a4007d2e 	bgeu	r20,r16,157b0 <two_way_long_needle+0x3a0>
   155bc:	d9410217 	ldw	r5,1032(sp)
   155c0:	bf05883a 	add	r2,r23,fp
   155c4:	1485883a 	add	r2,r2,r18
   155c8:	28c00003 	ldbu	r3,0(r5)
   155cc:	10800003 	ldbu	r2,0(r2)
   155d0:	1880771e 	bne	r3,r2,157b0 <two_way_long_needle+0x3a0>
   155d4:	d8c10117 	ldw	r3,1028(sp)
   155d8:	a2ffffc4 	addi	r11,r20,-1
   155dc:	8ad7883a 	add	r11,r17,r11
   155e0:	e0cb883a 	add	r5,fp,r3
   155e4:	88c5883a 	add	r2,r17,r3
   155e8:	b94b883a 	add	r5,r23,r5
   155ec:	00000706 	br	1560c <two_way_long_needle+0x1fc>
   155f0:	11000003 	ldbu	r4,0(r2)
   155f4:	28c00003 	ldbu	r3,0(r5)
   155f8:	10bfffc4 	addi	r2,r2,-1
   155fc:	21003fcc 	andi	r4,r4,255
   15600:	297fffc4 	addi	r5,r5,-1
   15604:	20c0031e 	bne	r4,r3,15614 <two_way_long_needle+0x204>
   15608:	500d883a 	mov	r6,r10
   1560c:	32bfffc4 	addi	r10,r6,-1
   15610:	58bff71e 	bne	r11,r2,155f0 <_gp+0xfffee4e8>
   15614:	a2400044 	addi	r9,r20,1
   15618:	32406736 	bltu	r6,r9,157b8 <two_way_long_needle+0x3a8>
   1561c:	da410017 	ldw	r9,1024(sp)
   15620:	e279883a 	add	fp,fp,r9
   15624:	b269c83a 	sub	r20,r22,r9
   15628:	003fba06 	br	15514 <_gp+0xfffee40c>
   1562c:	d8c10317 	ldw	r3,1036(sp)
   15630:	0029883a 	mov	r20,zero
   15634:	1f39883a 	add	fp,r3,fp
   15638:	e2b9883a 	add	fp,fp,r10
   1563c:	003fb506 	br	15514 <_gp+0xfffee40c>
   15640:	0005883a 	mov	r2,zero
   15644:	dfc10e17 	ldw	ra,1080(sp)
   15648:	df010d17 	ldw	fp,1076(sp)
   1564c:	ddc10c17 	ldw	r23,1072(sp)
   15650:	dd810b17 	ldw	r22,1068(sp)
   15654:	dd410a17 	ldw	r21,1064(sp)
   15658:	dd010917 	ldw	r20,1060(sp)
   1565c:	dcc10817 	ldw	r19,1056(sp)
   15660:	dc810717 	ldw	r18,1052(sp)
   15664:	dc410617 	ldw	r17,1048(sp)
   15668:	dc010517 	ldw	r16,1044(sp)
   1566c:	dec10f04 	addi	sp,sp,1084
   15670:	f800283a 	ret
   15674:	b405c83a 	sub	r2,r22,r16
   15678:	14004b36 	bltu	r2,r16,157a8 <two_way_long_needle+0x398>
   1567c:	10800044 	addi	r2,r2,1
   15680:	84bfffc4 	addi	r18,r16,-1
   15684:	d8810015 	stw	r2,1024(sp)
   15688:	00800044 	movi	r2,1
   1568c:	8c89883a 	add	r4,r17,r18
   15690:	817fff84 	addi	r5,r16,-2
   15694:	1405c83a 	sub	r2,r2,r16
   15698:	0029883a 	mov	r20,zero
   1569c:	b73fffc4 	addi	fp,r22,-1
   156a0:	d9010215 	stw	r4,1032(sp)
   156a4:	d9410115 	stw	r5,1028(sp)
   156a8:	8d7fffc4 	addi	r21,r17,-1
   156ac:	d8810315 	stw	r2,1036(sp)
   156b0:	a5a7883a 	add	r19,r20,r22
   156b4:	98cdc83a 	sub	r6,r19,r3
   156b8:	000b883a 	mov	r5,zero
   156bc:	b8c9883a 	add	r4,r23,r3
   156c0:	0019bec0 	call	19bec <memchr>
   156c4:	103fde1e 	bne	r2,zero,15640 <_gp+0xfffee538>
   156c8:	983fdd26 	beq	r19,zero,15640 <_gp+0xfffee538>
   156cc:	bcc5883a 	add	r2,r23,r19
   156d0:	10bfffc3 	ldbu	r2,-1(r2)
   156d4:	1085883a 	add	r2,r2,r2
   156d8:	1085883a 	add	r2,r2,r2
   156dc:	d885883a 	add	r2,sp,r2
   156e0:	10800017 	ldw	r2,0(r2)
   156e4:	1000291e 	bne	r2,zero,1578c <two_way_long_needle+0x37c>
   156e8:	bd05883a 	add	r2,r23,r20
   156ec:	8700142e 	bgeu	r16,fp,15740 <two_way_long_needle+0x330>
   156f0:	8c07883a 	add	r3,r17,r16
   156f4:	140b883a 	add	r5,r2,r16
   156f8:	19000003 	ldbu	r4,0(r3)
   156fc:	28c00003 	ldbu	r3,0(r5)
   15700:	800d883a 	mov	r6,r16
   15704:	20c0241e 	bne	r4,r3,15798 <two_way_long_needle+0x388>
   15708:	81400044 	addi	r5,r16,1
   1570c:	a155883a 	add	r10,r20,r5
   15710:	ba95883a 	add	r10,r23,r10
   15714:	894b883a 	add	r5,r17,r5
   15718:	800d883a 	mov	r6,r16
   1571c:	00000606 	br	15738 <two_way_long_needle+0x328>
   15720:	29000003 	ldbu	r4,0(r5)
   15724:	50c00003 	ldbu	r3,0(r10)
   15728:	29400044 	addi	r5,r5,1
   1572c:	21003fcc 	andi	r4,r4,255
   15730:	52800044 	addi	r10,r10,1
   15734:	20c0181e 	bne	r4,r3,15798 <two_way_long_needle+0x388>
   15738:	31800044 	addi	r6,r6,1
   1573c:	373ff836 	bltu	r6,fp,15720 <_gp+0xfffee618>
   15740:	00ffffc4 	movi	r3,-1
   15744:	90ffbf26 	beq	r18,r3,15644 <_gp+0xfffee53c>
   15748:	d9410217 	ldw	r5,1032(sp)
   1574c:	1487883a 	add	r3,r2,r18
   15750:	18c00003 	ldbu	r3,0(r3)
   15754:	29000003 	ldbu	r4,0(r5)
   15758:	20c00b1e 	bne	r4,r3,15788 <two_way_long_needle+0x378>
   1575c:	d8c10117 	ldw	r3,1028(sp)
   15760:	a0cd883a 	add	r6,r20,r3
   15764:	b98d883a 	add	r6,r23,r6
   15768:	88c7883a 	add	r3,r17,r3
   1576c:	1d7fb526 	beq	r3,r21,15644 <_gp+0xfffee53c>
   15770:	19400003 	ldbu	r5,0(r3)
   15774:	31000003 	ldbu	r4,0(r6)
   15778:	18ffffc4 	addi	r3,r3,-1
   1577c:	29403fcc 	andi	r5,r5,255
   15780:	31bfffc4 	addi	r6,r6,-1
   15784:	293ff926 	beq	r5,r4,1576c <_gp+0xfffee664>
   15788:	d8810017 	ldw	r2,1024(sp)
   1578c:	a0a9883a 	add	r20,r20,r2
   15790:	9807883a 	mov	r3,r19
   15794:	003fc606 	br	156b0 <_gp+0xfffee5a8>
   15798:	d8c10317 	ldw	r3,1036(sp)
   1579c:	1d11883a 	add	r8,r3,r20
   157a0:	41a9883a 	add	r20,r8,r6
   157a4:	003ffa06 	br	15790 <_gp+0xfffee688>
   157a8:	8005883a 	mov	r2,r16
   157ac:	003fb306 	br	1567c <_gp+0xfffee574>
   157b0:	800d883a 	mov	r6,r16
   157b4:	003f9706 	br	15614 <_gp+0xfffee50c>
   157b8:	bf05883a 	add	r2,r23,fp
   157bc:	003fa106 	br	15644 <_gp+0xfffee53c>

000157c0 <strstr>:
   157c0:	21800007 	ldb	r6,0(r4)
   157c4:	30009226 	beq	r6,zero,15a10 <strstr+0x250>
   157c8:	28c00007 	ldb	r3,0(r5)
   157cc:	18000f26 	beq	r3,zero,1580c <strstr+0x4c>
   157d0:	280f883a 	mov	r7,r5
   157d4:	2011883a 	mov	r8,r4
   157d8:	02400044 	movi	r9,1
   157dc:	00000206 	br	157e8 <strstr+0x28>
   157e0:	38c00007 	ldb	r3,0(r7)
   157e4:	18000826 	beq	r3,zero,15808 <strstr+0x48>
   157e8:	42000044 	addi	r8,r8,1
   157ec:	1987003a 	cmpeq	r3,r3,r6
   157f0:	41800007 	ldb	r6,0(r8)
   157f4:	39c00044 	addi	r7,r7,1
   157f8:	48d2703a 	and	r9,r9,r3
   157fc:	303ff81e 	bne	r6,zero,157e0 <_gp+0xfffee6d8>
   15800:	38800007 	ldb	r2,0(r7)
   15804:	1000841e 	bne	r2,zero,15a18 <strstr+0x258>
   15808:	48000226 	beq	r9,zero,15814 <strstr+0x54>
   1580c:	2005883a 	mov	r2,r4
   15810:	f800283a 	ret
   15814:	defff104 	addi	sp,sp,-60
   15818:	ddc00c15 	stw	r23,48(sp)
   1581c:	dd800b15 	stw	r22,44(sp)
   15820:	dd400a15 	stw	r21,40(sp)
   15824:	dc000515 	stw	r16,20(sp)
   15828:	dfc00e15 	stw	ra,56(sp)
   1582c:	df000d15 	stw	fp,52(sp)
   15830:	dd000915 	stw	r20,36(sp)
   15834:	dcc00815 	stw	r19,32(sp)
   15838:	dc800715 	stw	r18,28(sp)
   1583c:	dc400615 	stw	r17,24(sp)
   15840:	282d883a 	mov	r22,r5
   15844:	29400007 	ldb	r5,0(r5)
   15848:	202b883a 	mov	r21,r4
   1584c:	21000044 	addi	r4,r4,1
   15850:	3da1c83a 	sub	r16,r7,r22
   15854:	00150800 	call	15080 <strchr>
   15858:	102f883a 	mov	r23,r2
   1585c:	10007526 	beq	r2,zero,15a34 <strstr+0x274>
   15860:	00c00044 	movi	r3,1
   15864:	80c00a26 	beq	r16,r3,15890 <strstr+0xd0>
   15868:	ac09883a 	add	r4,r21,r16
   1586c:	20800136 	bltu	r4,r2,15874 <strstr+0xb4>
   15870:	2087c83a 	sub	r3,r4,r2
   15874:	008007c4 	movi	r2,31
   15878:	1400112e 	bgeu	r2,r16,158c0 <strstr+0x100>
   1587c:	800f883a 	mov	r7,r16
   15880:	b00d883a 	mov	r6,r22
   15884:	180b883a 	mov	r5,r3
   15888:	b809883a 	mov	r4,r23
   1588c:	00154100 	call	15410 <two_way_long_needle>
   15890:	dfc00e17 	ldw	ra,56(sp)
   15894:	df000d17 	ldw	fp,52(sp)
   15898:	ddc00c17 	ldw	r23,48(sp)
   1589c:	dd800b17 	ldw	r22,44(sp)
   158a0:	dd400a17 	ldw	r21,40(sp)
   158a4:	dd000917 	ldw	r20,36(sp)
   158a8:	dcc00817 	ldw	r19,32(sp)
   158ac:	dc800717 	ldw	r18,28(sp)
   158b0:	dc400617 	ldw	r17,24(sp)
   158b4:	dc000517 	ldw	r16,20(sp)
   158b8:	dec00f04 	addi	sp,sp,60
   158bc:	f800283a 	ret
   158c0:	d80d883a 	mov	r6,sp
   158c4:	800b883a 	mov	r5,r16
   158c8:	b009883a 	mov	r4,r22
   158cc:	d8c00415 	stw	r3,16(sp)
   158d0:	001530c0 	call	1530c <critical_factorization>
   158d4:	d9400017 	ldw	r5,0(sp)
   158d8:	100d883a 	mov	r6,r2
   158dc:	b009883a 	mov	r4,r22
   158e0:	b14b883a 	add	r5,r22,r5
   158e4:	1039883a 	mov	fp,r2
   158e8:	0019cd00 	call	19cd0 <memcmp>
   158ec:	d8c00417 	ldw	r3,16(sp)
   158f0:	1000521e 	bne	r2,zero,15a3c <strstr+0x27c>
   158f4:	e47fffc4 	addi	r17,fp,-1
   158f8:	04c00044 	movi	r19,1
   158fc:	b445883a 	add	r2,r22,r17
   15900:	9f27c83a 	sub	r19,r19,fp
   15904:	0029883a 	mov	r20,zero
   15908:	002b883a 	mov	r21,zero
   1590c:	d8800215 	stw	r2,8(sp)
   15910:	e4bfff84 	addi	r18,fp,-2
   15914:	dcc00115 	stw	r19,4(sp)
   15918:	8567883a 	add	r19,r16,r21
   1591c:	98cdc83a 	sub	r6,r19,r3
   15920:	000b883a 	mov	r5,zero
   15924:	b8c9883a 	add	r4,r23,r3
   15928:	0019bec0 	call	19bec <memchr>
   1592c:	1000411e 	bne	r2,zero,15a34 <strstr+0x274>
   15930:	98004026 	beq	r19,zero,15a34 <strstr+0x274>
   15934:	e00b883a 	mov	r5,fp
   15938:	e500012e 	bgeu	fp,r20,15940 <strstr+0x180>
   1593c:	a00b883a 	mov	r5,r20
   15940:	2c00152e 	bgeu	r5,r16,15998 <strstr+0x1d8>
   15944:	b947883a 	add	r3,r23,r5
   15948:	1d47883a 	add	r3,r3,r21
   1594c:	b145883a 	add	r2,r22,r5
   15950:	18c00003 	ldbu	r3,0(r3)
   15954:	10800003 	ldbu	r2,0(r2)
   15958:	1880311e 	bne	r3,r2,15a20 <strstr+0x260>
   1595c:	a8800044 	addi	r2,r21,1
   15960:	28c00044 	addi	r3,r5,1
   15964:	1145883a 	add	r2,r2,r5
   15968:	b0c9883a 	add	r4,r22,r3
   1596c:	b885883a 	add	r2,r23,r2
   15970:	00000706 	br	15990 <strstr+0x1d0>
   15974:	21c00003 	ldbu	r7,0(r4)
   15978:	11800003 	ldbu	r6,0(r2)
   1597c:	21000044 	addi	r4,r4,1
   15980:	39c03fcc 	andi	r7,r7,255
   15984:	10800044 	addi	r2,r2,1
   15988:	3980251e 	bne	r7,r6,15a20 <strstr+0x260>
   1598c:	18c00044 	addi	r3,r3,1
   15990:	180b883a 	mov	r5,r3
   15994:	1c3ff736 	bltu	r3,r16,15974 <_gp+0xfffee86c>
   15998:	880d883a 	mov	r6,r17
   1599c:	a700702e 	bgeu	r20,fp,15b60 <strstr+0x3a0>
   159a0:	d9000217 	ldw	r4,8(sp)
   159a4:	bd45883a 	add	r2,r23,r21
   159a8:	1445883a 	add	r2,r2,r17
   159ac:	20c00003 	ldbu	r3,0(r4)
   159b0:	10800003 	ldbu	r2,0(r2)
   159b4:	18806a1e 	bne	r3,r2,15b60 <strstr+0x3a0>
   159b8:	954b883a 	add	r5,r18,r21
   159bc:	a2bfffc4 	addi	r10,r20,-1
   159c0:	b485883a 	add	r2,r22,r18
   159c4:	b94b883a 	add	r5,r23,r5
   159c8:	b295883a 	add	r10,r22,r10
   159cc:	00000706 	br	159ec <strstr+0x22c>
   159d0:	11000003 	ldbu	r4,0(r2)
   159d4:	28c00003 	ldbu	r3,0(r5)
   159d8:	10bfffc4 	addi	r2,r2,-1
   159dc:	21003fcc 	andi	r4,r4,255
   159e0:	297fffc4 	addi	r5,r5,-1
   159e4:	20c0031e 	bne	r4,r3,159f4 <strstr+0x234>
   159e8:	380d883a 	mov	r6,r7
   159ec:	31ffffc4 	addi	r7,r6,-1
   159f0:	12bff71e 	bne	r2,r10,159d0 <_gp+0xfffee8c8>
   159f4:	a2000044 	addi	r8,r20,1
   159f8:	32005b36 	bltu	r6,r8,15b68 <strstr+0x3a8>
   159fc:	da000017 	ldw	r8,0(sp)
   15a00:	aa2b883a 	add	r21,r21,r8
   15a04:	8229c83a 	sub	r20,r16,r8
   15a08:	9807883a 	mov	r3,r19
   15a0c:	003fc206 	br	15918 <_gp+0xfffee810>
   15a10:	28800007 	ldb	r2,0(r5)
   15a14:	103f7d26 	beq	r2,zero,1580c <_gp+0xfffee704>
   15a18:	0005883a 	mov	r2,zero
   15a1c:	f800283a 	ret
   15a20:	d8c00117 	ldw	r3,4(sp)
   15a24:	0029883a 	mov	r20,zero
   15a28:	1d6b883a 	add	r21,r3,r21
   15a2c:	a96b883a 	add	r21,r21,r5
   15a30:	003ff506 	br	15a08 <_gp+0xfffee900>
   15a34:	0005883a 	mov	r2,zero
   15a38:	003f9506 	br	15890 <_gp+0xfffee788>
   15a3c:	8705c83a 	sub	r2,r16,fp
   15a40:	1700012e 	bgeu	r2,fp,15a48 <strstr+0x288>
   15a44:	e005883a 	mov	r2,fp
   15a48:	10800044 	addi	r2,r2,1
   15a4c:	e4bfffc4 	addi	r18,fp,-1
   15a50:	05000044 	movi	r20,1
   15a54:	a729c83a 	sub	r20,r20,fp
   15a58:	d8800015 	stw	r2,0(sp)
   15a5c:	b48b883a 	add	r5,r22,r18
   15a60:	e0bfff84 	addi	r2,fp,-2
   15a64:	dd000215 	stw	r20,8(sp)
   15a68:	002b883a 	mov	r21,zero
   15a6c:	e4400044 	addi	r17,fp,1
   15a70:	d9400315 	stw	r5,12(sp)
   15a74:	d8800115 	stw	r2,4(sp)
   15a78:	b53fffc4 	addi	r20,r22,-1
   15a7c:	8567883a 	add	r19,r16,r21
   15a80:	98cdc83a 	sub	r6,r19,r3
   15a84:	000b883a 	mov	r5,zero
   15a88:	b8c9883a 	add	r4,r23,r3
   15a8c:	0019bec0 	call	19bec <memchr>
   15a90:	103fe81e 	bne	r2,zero,15a34 <_gp+0xfffee92c>
   15a94:	983fe726 	beq	r19,zero,15a34 <_gp+0xfffee92c>
   15a98:	e400132e 	bgeu	fp,r16,15ae8 <strstr+0x328>
   15a9c:	bf07883a 	add	r3,r23,fp
   15aa0:	1d47883a 	add	r3,r3,r21
   15aa4:	b705883a 	add	r2,r22,fp
   15aa8:	18c00003 	ldbu	r3,0(r3)
   15aac:	10800003 	ldbu	r2,0(r2)
   15ab0:	1880241e 	bne	r3,r2,15b44 <strstr+0x384>
   15ab4:	ac45883a 	add	r2,r21,r17
   15ab8:	b44b883a 	add	r5,r22,r17
   15abc:	b885883a 	add	r2,r23,r2
   15ac0:	e009883a 	mov	r4,fp
   15ac4:	00000606 	br	15ae0 <strstr+0x320>
   15ac8:	29800003 	ldbu	r6,0(r5)
   15acc:	10c00003 	ldbu	r3,0(r2)
   15ad0:	29400044 	addi	r5,r5,1
   15ad4:	31803fcc 	andi	r6,r6,255
   15ad8:	10800044 	addi	r2,r2,1
   15adc:	30c01a1e 	bne	r6,r3,15b48 <strstr+0x388>
   15ae0:	21000044 	addi	r4,r4,1
   15ae4:	243ff836 	bltu	r4,r16,15ac8 <_gp+0xfffee9c0>
   15ae8:	00bfffc4 	movi	r2,-1
   15aec:	bd49883a 	add	r4,r23,r21
   15af0:	90801926 	beq	r18,r2,15b58 <strstr+0x398>
   15af4:	d9400317 	ldw	r5,12(sp)
   15af8:	2485883a 	add	r2,r4,r18
   15afc:	10800003 	ldbu	r2,0(r2)
   15b00:	28c00003 	ldbu	r3,0(r5)
   15b04:	18800b1e 	bne	r3,r2,15b34 <strstr+0x374>
   15b08:	d8c00117 	ldw	r3,4(sp)
   15b0c:	a8c5883a 	add	r2,r21,r3
   15b10:	b885883a 	add	r2,r23,r2
   15b14:	b0c7883a 	add	r3,r22,r3
   15b18:	1d000f26 	beq	r3,r20,15b58 <strstr+0x398>
   15b1c:	19800003 	ldbu	r6,0(r3)
   15b20:	11400003 	ldbu	r5,0(r2)
   15b24:	18ffffc4 	addi	r3,r3,-1
   15b28:	31803fcc 	andi	r6,r6,255
   15b2c:	10bfffc4 	addi	r2,r2,-1
   15b30:	317ff926 	beq	r6,r5,15b18 <_gp+0xfffeea10>
   15b34:	d8800017 	ldw	r2,0(sp)
   15b38:	a8ab883a 	add	r21,r21,r2
   15b3c:	9807883a 	mov	r3,r19
   15b40:	003fce06 	br	15a7c <_gp+0xfffee974>
   15b44:	e009883a 	mov	r4,fp
   15b48:	d8c00217 	ldw	r3,8(sp)
   15b4c:	1d4f883a 	add	r7,r3,r21
   15b50:	392b883a 	add	r21,r7,r4
   15b54:	003ff906 	br	15b3c <_gp+0xfffeea34>
   15b58:	2005883a 	mov	r2,r4
   15b5c:	003f4c06 	br	15890 <_gp+0xfffee788>
   15b60:	e00d883a 	mov	r6,fp
   15b64:	003fa306 	br	159f4 <_gp+0xfffee8ec>
   15b68:	bd45883a 	add	r2,r23,r21
   15b6c:	003f4806 	br	15890 <_gp+0xfffee788>

00015b70 <___svfprintf_internal_r>:
   15b70:	deffb704 	addi	sp,sp,-292
   15b74:	dfc04815 	stw	ra,288(sp)
   15b78:	ddc04615 	stw	r23,280(sp)
   15b7c:	d9402d15 	stw	r5,180(sp)
   15b80:	d9003915 	stw	r4,228(sp)
   15b84:	302f883a 	mov	r23,r6
   15b88:	d9c02e15 	stw	r7,184(sp)
   15b8c:	df004715 	stw	fp,284(sp)
   15b90:	dd804515 	stw	r22,276(sp)
   15b94:	dd404415 	stw	r21,272(sp)
   15b98:	dd004315 	stw	r20,268(sp)
   15b9c:	dcc04215 	stw	r19,264(sp)
   15ba0:	dc804115 	stw	r18,260(sp)
   15ba4:	dc404015 	stw	r17,256(sp)
   15ba8:	dc003f15 	stw	r16,252(sp)
   15bac:	0019bbc0 	call	19bbc <_localeconv_r>
   15bb0:	10800017 	ldw	r2,0(r2)
   15bb4:	1009883a 	mov	r4,r2
   15bb8:	d8803415 	stw	r2,208(sp)
   15bbc:	00152740 	call	15274 <strlen>
   15bc0:	d8c02d17 	ldw	r3,180(sp)
   15bc4:	d8803815 	stw	r2,224(sp)
   15bc8:	1880030b 	ldhu	r2,12(r3)
   15bcc:	1080200c 	andi	r2,r2,128
   15bd0:	10000226 	beq	r2,zero,15bdc <___svfprintf_internal_r+0x6c>
   15bd4:	18800417 	ldw	r2,16(r3)
   15bd8:	1006b126 	beq	r2,zero,176a0 <___svfprintf_internal_r+0x1b30>
   15bdc:	dcc03917 	ldw	r19,228(sp)
   15be0:	d8c00404 	addi	r3,sp,16
   15be4:	054000b4 	movhi	r21,2
   15be8:	d9001e04 	addi	r4,sp,120
   15bec:	ad799484 	addi	r21,r21,-6574
   15bf0:	d8c01e15 	stw	r3,120(sp)
   15bf4:	d8002015 	stw	zero,128(sp)
   15bf8:	d8001f15 	stw	zero,124(sp)
   15bfc:	d8003315 	stw	zero,204(sp)
   15c00:	d8003615 	stw	zero,216(sp)
   15c04:	d8003715 	stw	zero,220(sp)
   15c08:	1811883a 	mov	r8,r3
   15c0c:	d8003a15 	stw	zero,232(sp)
   15c10:	d8003b15 	stw	zero,236(sp)
   15c14:	d8002f15 	stw	zero,188(sp)
   15c18:	d9002815 	stw	r4,160(sp)
   15c1c:	b8800007 	ldb	r2,0(r23)
   15c20:	10027726 	beq	r2,zero,16600 <___svfprintf_internal_r+0xa90>
   15c24:	00c00944 	movi	r3,37
   15c28:	b823883a 	mov	r17,r23
   15c2c:	10c0021e 	bne	r2,r3,15c38 <___svfprintf_internal_r+0xc8>
   15c30:	00001406 	br	15c84 <___svfprintf_internal_r+0x114>
   15c34:	10c00326 	beq	r2,r3,15c44 <___svfprintf_internal_r+0xd4>
   15c38:	8c400044 	addi	r17,r17,1
   15c3c:	88800007 	ldb	r2,0(r17)
   15c40:	103ffc1e 	bne	r2,zero,15c34 <_gp+0xfffeeb2c>
   15c44:	8de1c83a 	sub	r16,r17,r23
   15c48:	80000e26 	beq	r16,zero,15c84 <___svfprintf_internal_r+0x114>
   15c4c:	d8c02017 	ldw	r3,128(sp)
   15c50:	d8801f17 	ldw	r2,124(sp)
   15c54:	45c00015 	stw	r23,0(r8)
   15c58:	1c07883a 	add	r3,r3,r16
   15c5c:	10800044 	addi	r2,r2,1
   15c60:	d8c02015 	stw	r3,128(sp)
   15c64:	44000115 	stw	r16,4(r8)
   15c68:	d8801f15 	stw	r2,124(sp)
   15c6c:	00c001c4 	movi	r3,7
   15c70:	18809916 	blt	r3,r2,15ed8 <___svfprintf_internal_r+0x368>
   15c74:	42000204 	addi	r8,r8,8
   15c78:	d9402f17 	ldw	r5,188(sp)
   15c7c:	2c0b883a 	add	r5,r5,r16
   15c80:	d9402f15 	stw	r5,188(sp)
   15c84:	88800007 	ldb	r2,0(r17)
   15c88:	10009a26 	beq	r2,zero,15ef4 <___svfprintf_internal_r+0x384>
   15c8c:	8dc00044 	addi	r23,r17,1
   15c90:	8c400047 	ldb	r17,1(r17)
   15c94:	0021883a 	mov	r16,zero
   15c98:	00bfffc4 	movi	r2,-1
   15c9c:	0025883a 	mov	r18,zero
   15ca0:	dc002905 	stb	r16,164(sp)
   15ca4:	d8002785 	stb	zero,158(sp)
   15ca8:	d8002b05 	stb	zero,172(sp)
   15cac:	d8802a15 	stw	r2,168(sp)
   15cb0:	d8003115 	stw	zero,196(sp)
   15cb4:	05001604 	movi	r20,88
   15cb8:	05800244 	movi	r22,9
   15cbc:	4039883a 	mov	fp,r8
   15cc0:	9021883a 	mov	r16,r18
   15cc4:	bdc00044 	addi	r23,r23,1
   15cc8:	88bff804 	addi	r2,r17,-32
   15ccc:	a0831e36 	bltu	r20,r2,16948 <___svfprintf_internal_r+0xdd8>
   15cd0:	100490ba 	slli	r2,r2,2
   15cd4:	00c00074 	movhi	r3,1
   15cd8:	18d73a04 	addi	r3,r3,23784
   15cdc:	10c5883a 	add	r2,r2,r3
   15ce0:	10800017 	ldw	r2,0(r2)
   15ce4:	1000683a 	jmp	r2
   15ce8:	00016890 	cmplti	zero,zero,1442
   15cec:	00016948 	cmpgei	zero,zero,1445
   15cf0:	00016948 	cmpgei	zero,zero,1445
   15cf4:	00016884 	movi	zero,1442
   15cf8:	00016948 	cmpgei	zero,zero,1445
   15cfc:	00016948 	cmpgei	zero,zero,1445
   15d00:	00016948 	cmpgei	zero,zero,1445
   15d04:	00016948 	cmpgei	zero,zero,1445
   15d08:	00016948 	cmpgei	zero,zero,1445
   15d0c:	00016948 	cmpgei	zero,zero,1445
   15d10:	00015f50 	cmplti	zero,zero,1405
   15d14:	00016794 	movui	zero,1438
   15d18:	00016948 	cmpgei	zero,zero,1445
   15d1c:	00015e5c 	xori	zero,zero,1401
   15d20:	00015f74 	movhi	zero,1405
   15d24:	00016948 	cmpgei	zero,zero,1445
   15d28:	00016000 	call	1600 <__alt_mem_onchip_memory-0xea00>
   15d2c:	00015fc4 	movi	zero,1407
   15d30:	00015fc4 	movi	zero,1407
   15d34:	00015fc4 	movi	zero,1407
   15d38:	00015fc4 	movi	zero,1407
   15d3c:	00015fc4 	movi	zero,1407
   15d40:	00015fc4 	movi	zero,1407
   15d44:	00015fc4 	movi	zero,1407
   15d48:	00015fc4 	movi	zero,1407
   15d4c:	00015fc4 	movi	zero,1407
   15d50:	00016948 	cmpgei	zero,zero,1445
   15d54:	00016948 	cmpgei	zero,zero,1445
   15d58:	00016948 	cmpgei	zero,zero,1445
   15d5c:	00016948 	cmpgei	zero,zero,1445
   15d60:	00016948 	cmpgei	zero,zero,1445
   15d64:	00016948 	cmpgei	zero,zero,1445
   15d68:	00016948 	cmpgei	zero,zero,1445
   15d6c:	00016948 	cmpgei	zero,zero,1445
   15d70:	00016948 	cmpgei	zero,zero,1445
   15d74:	00016948 	cmpgei	zero,zero,1445
   15d78:	000160c4 	movi	zero,1411
   15d7c:	0001600c 	andi	zero,zero,1408
   15d80:	00016948 	cmpgei	zero,zero,1445
   15d84:	0001600c 	andi	zero,zero,1408
   15d88:	00016948 	cmpgei	zero,zero,1445
   15d8c:	00016948 	cmpgei	zero,zero,1445
   15d90:	00016948 	cmpgei	zero,zero,1445
   15d94:	00016948 	cmpgei	zero,zero,1445
   15d98:	000160b8 	rdprs	zero,zero,1410
   15d9c:	00016948 	cmpgei	zero,zero,1445
   15da0:	00016948 	cmpgei	zero,zero,1445
   15da4:	0001618c 	andi	zero,zero,1414
   15da8:	00016948 	cmpgei	zero,zero,1445
   15dac:	00016948 	cmpgei	zero,zero,1445
   15db0:	00016948 	cmpgei	zero,zero,1445
   15db4:	00016948 	cmpgei	zero,zero,1445
   15db8:	00016948 	cmpgei	zero,zero,1445
   15dbc:	00016608 	cmpgei	zero,zero,1432
   15dc0:	00016948 	cmpgei	zero,zero,1445
   15dc4:	00016948 	cmpgei	zero,zero,1445
   15dc8:	00016674 	movhi	zero,1433
   15dcc:	00016948 	cmpgei	zero,zero,1445
   15dd0:	00016948 	cmpgei	zero,zero,1445
   15dd4:	00016948 	cmpgei	zero,zero,1445
   15dd8:	00016948 	cmpgei	zero,zero,1445
   15ddc:	00016948 	cmpgei	zero,zero,1445
   15de0:	00016948 	cmpgei	zero,zero,1445
   15de4:	00016948 	cmpgei	zero,zero,1445
   15de8:	00016948 	cmpgei	zero,zero,1445
   15dec:	00016948 	cmpgei	zero,zero,1445
   15df0:	00016948 	cmpgei	zero,zero,1445
   15df4:	00016730 	cmpltui	zero,zero,1436
   15df8:	000168b0 	cmpltui	zero,zero,1442
   15dfc:	0001600c 	andi	zero,zero,1408
   15e00:	0001600c 	andi	zero,zero,1408
   15e04:	0001600c 	andi	zero,zero,1408
   15e08:	00016924 	muli	zero,zero,1444
   15e0c:	000168b0 	cmpltui	zero,zero,1442
   15e10:	00016948 	cmpgei	zero,zero,1445
   15e14:	00016948 	cmpgei	zero,zero,1445
   15e18:	000168d0 	cmplti	zero,zero,1443
   15e1c:	00016948 	cmpgei	zero,zero,1445
   15e20:	000168e4 	muli	zero,zero,1443
   15e24:	00016774 	movhi	zero,1437
   15e28:	00015e68 	cmpgeui	zero,zero,1401
   15e2c:	000167ac 	andhi	zero,zero,1438
   15e30:	00016948 	cmpgei	zero,zero,1445
   15e34:	000167b8 	rdprs	zero,zero,1438
   15e38:	00016948 	cmpgei	zero,zero,1445
   15e3c:	0001681c 	xori	zero,zero,1440
   15e40:	00016948 	cmpgei	zero,zero,1445
   15e44:	00016948 	cmpgei	zero,zero,1445
   15e48:	0001683c 	xorhi	zero,zero,1440
   15e4c:	d8c03117 	ldw	r3,196(sp)
   15e50:	d8802e15 	stw	r2,184(sp)
   15e54:	00c7c83a 	sub	r3,zero,r3
   15e58:	d8c03115 	stw	r3,196(sp)
   15e5c:	84000114 	ori	r16,r16,4
   15e60:	bc400007 	ldb	r17,0(r23)
   15e64:	003f9706 	br	15cc4 <_gp+0xfffeebbc>
   15e68:	00800c04 	movi	r2,48
   15e6c:	d8802705 	stb	r2,156(sp)
   15e70:	00801e04 	movi	r2,120
   15e74:	d8802745 	stb	r2,157(sp)
   15e78:	d9002a17 	ldw	r4,168(sp)
   15e7c:	d8802e17 	ldw	r2,184(sp)
   15e80:	d8002785 	stb	zero,158(sp)
   15e84:	e011883a 	mov	r8,fp
   15e88:	10c00104 	addi	r3,r2,4
   15e8c:	15000017 	ldw	r20,0(r2)
   15e90:	002d883a 	mov	r22,zero
   15e94:	80800094 	ori	r2,r16,2
   15e98:	2002b616 	blt	r4,zero,16974 <___svfprintf_internal_r+0xe04>
   15e9c:	00bfdfc4 	movi	r2,-129
   15ea0:	80a4703a 	and	r18,r16,r2
   15ea4:	d8c02e15 	stw	r3,184(sp)
   15ea8:	94800094 	ori	r18,r18,2
   15eac:	a002a01e 	bne	r20,zero,16930 <___svfprintf_internal_r+0xdc0>
   15eb0:	014000b4 	movhi	r5,2
   15eb4:	29798d04 	addi	r5,r5,-6604
   15eb8:	d9403a15 	stw	r5,232(sp)
   15ebc:	04401e04 	movi	r17,120
   15ec0:	d8c02a17 	ldw	r3,168(sp)
   15ec4:	0039883a 	mov	fp,zero
   15ec8:	1801e626 	beq	r3,zero,16664 <___svfprintf_internal_r+0xaf4>
   15ecc:	0029883a 	mov	r20,zero
   15ed0:	002d883a 	mov	r22,zero
   15ed4:	00020506 	br	166ec <___svfprintf_internal_r+0xb7c>
   15ed8:	d9402d17 	ldw	r5,180(sp)
   15edc:	d9801e04 	addi	r6,sp,120
   15ee0:	9809883a 	mov	r4,r19
   15ee4:	001b0280 	call	1b028 <__ssprint_r>
   15ee8:	1000081e 	bne	r2,zero,15f0c <___svfprintf_internal_r+0x39c>
   15eec:	da000404 	addi	r8,sp,16
   15ef0:	003f6106 	br	15c78 <_gp+0xfffeeb70>
   15ef4:	d8802017 	ldw	r2,128(sp)
   15ef8:	10000426 	beq	r2,zero,15f0c <___svfprintf_internal_r+0x39c>
   15efc:	d9402d17 	ldw	r5,180(sp)
   15f00:	d9003917 	ldw	r4,228(sp)
   15f04:	d9801e04 	addi	r6,sp,120
   15f08:	001b0280 	call	1b028 <__ssprint_r>
   15f0c:	d8802d17 	ldw	r2,180(sp)
   15f10:	10c0030b 	ldhu	r3,12(r2)
   15f14:	d8802f17 	ldw	r2,188(sp)
   15f18:	18c0100c 	andi	r3,r3,64
   15f1c:	1806251e 	bne	r3,zero,177b4 <___svfprintf_internal_r+0x1c44>
   15f20:	dfc04817 	ldw	ra,288(sp)
   15f24:	df004717 	ldw	fp,284(sp)
   15f28:	ddc04617 	ldw	r23,280(sp)
   15f2c:	dd804517 	ldw	r22,276(sp)
   15f30:	dd404417 	ldw	r21,272(sp)
   15f34:	dd004317 	ldw	r20,268(sp)
   15f38:	dcc04217 	ldw	r19,264(sp)
   15f3c:	dc804117 	ldw	r18,260(sp)
   15f40:	dc404017 	ldw	r17,256(sp)
   15f44:	dc003f17 	ldw	r16,252(sp)
   15f48:	dec04904 	addi	sp,sp,292
   15f4c:	f800283a 	ret
   15f50:	d9002e17 	ldw	r4,184(sp)
   15f54:	d9402e17 	ldw	r5,184(sp)
   15f58:	21000017 	ldw	r4,0(r4)
   15f5c:	28800104 	addi	r2,r5,4
   15f60:	d9003115 	stw	r4,196(sp)
   15f64:	203fb916 	blt	r4,zero,15e4c <_gp+0xfffeed44>
   15f68:	d8802e15 	stw	r2,184(sp)
   15f6c:	bc400007 	ldb	r17,0(r23)
   15f70:	003f5406 	br	15cc4 <_gp+0xfffeebbc>
   15f74:	bc400007 	ldb	r17,0(r23)
   15f78:	01000a84 	movi	r4,42
   15f7c:	b8c00044 	addi	r3,r23,1
   15f80:	89076926 	beq	r17,r4,17d28 <___svfprintf_internal_r+0x21b8>
   15f84:	8cbff404 	addi	r18,r17,-48
   15f88:	b486b936 	bltu	r22,r18,17a70 <___svfprintf_internal_r+0x1f00>
   15f8c:	0009883a 	mov	r4,zero
   15f90:	1823883a 	mov	r17,r3
   15f94:	01400284 	movi	r5,10
   15f98:	00144f80 	call	144f8 <__mulsi3>
   15f9c:	88c00007 	ldb	r3,0(r17)
   15fa0:	1489883a 	add	r4,r2,r18
   15fa4:	8dc00044 	addi	r23,r17,1
   15fa8:	1cbff404 	addi	r18,r3,-48
   15fac:	b823883a 	mov	r17,r23
   15fb0:	b4bff82e 	bgeu	r22,r18,15f94 <_gp+0xfffeee8c>
   15fb4:	1823883a 	mov	r17,r3
   15fb8:	20060416 	blt	r4,zero,177cc <___svfprintf_internal_r+0x1c5c>
   15fbc:	d9002a15 	stw	r4,168(sp)
   15fc0:	003f4106 	br	15cc8 <_gp+0xfffeebc0>
   15fc4:	8cbff404 	addi	r18,r17,-48
   15fc8:	d8003115 	stw	zero,196(sp)
   15fcc:	0009883a 	mov	r4,zero
   15fd0:	b823883a 	mov	r17,r23
   15fd4:	01400284 	movi	r5,10
   15fd8:	00144f80 	call	144f8 <__mulsi3>
   15fdc:	88c00007 	ldb	r3,0(r17)
   15fe0:	9089883a 	add	r4,r18,r2
   15fe4:	bdc00044 	addi	r23,r23,1
   15fe8:	1cbff404 	addi	r18,r3,-48
   15fec:	b823883a 	mov	r17,r23
   15ff0:	b4bff82e 	bgeu	r22,r18,15fd4 <_gp+0xfffeeecc>
   15ff4:	1823883a 	mov	r17,r3
   15ff8:	d9003115 	stw	r4,196(sp)
   15ffc:	003f3206 	br	15cc8 <_gp+0xfffeebc0>
   16000:	84002014 	ori	r16,r16,128
   16004:	bc400007 	ldb	r17,0(r23)
   16008:	003f2e06 	br	15cc4 <_gp+0xfffeebbc>
   1600c:	8025883a 	mov	r18,r16
   16010:	dc002903 	ldbu	r16,164(sp)
   16014:	e011883a 	mov	r8,fp
   16018:	84003fcc 	andi	r16,r16,255
   1601c:	8007721e 	bne	r16,zero,17de8 <___svfprintf_internal_r+0x2278>
   16020:	9080020c 	andi	r2,r18,8
   16024:	1004a526 	beq	r2,zero,172bc <___svfprintf_internal_r+0x174c>
   16028:	d9002e17 	ldw	r4,184(sp)
   1602c:	d9402e17 	ldw	r5,184(sp)
   16030:	d8802e17 	ldw	r2,184(sp)
   16034:	21000017 	ldw	r4,0(r4)
   16038:	29400117 	ldw	r5,4(r5)
   1603c:	10800204 	addi	r2,r2,8
   16040:	d9003615 	stw	r4,216(sp)
   16044:	d9403715 	stw	r5,220(sp)
   16048:	d8802e15 	stw	r2,184(sp)
   1604c:	d9003617 	ldw	r4,216(sp)
   16050:	d9403717 	ldw	r5,220(sp)
   16054:	da003e15 	stw	r8,248(sp)
   16058:	04000044 	movi	r16,1
   1605c:	0011bb40 	call	11bb4 <__fpclassifyd>
   16060:	da003e17 	ldw	r8,248(sp)
   16064:	1404731e 	bne	r2,r16,17234 <___svfprintf_internal_r+0x16c4>
   16068:	d9003617 	ldw	r4,216(sp)
   1606c:	d9403717 	ldw	r5,220(sp)
   16070:	000d883a 	mov	r6,zero
   16074:	000f883a 	mov	r7,zero
   16078:	001d8f40 	call	1d8f4 <__ledf2>
   1607c:	da003e17 	ldw	r8,248(sp)
   16080:	10061b16 	blt	r2,zero,178f0 <___svfprintf_internal_r+0x1d80>
   16084:	df002783 	ldbu	fp,158(sp)
   16088:	008011c4 	movi	r2,71
   1608c:	1445810e 	bge	r2,r17,17694 <___svfprintf_internal_r+0x1b24>
   16090:	040000b4 	movhi	r16,2
   16094:	84398504 	addi	r16,r16,-6636
   16098:	00c000c4 	movi	r3,3
   1609c:	00bfdfc4 	movi	r2,-129
   160a0:	d8c02915 	stw	r3,164(sp)
   160a4:	90a4703a 	and	r18,r18,r2
   160a8:	d8c02b15 	stw	r3,172(sp)
   160ac:	d8002a15 	stw	zero,168(sp)
   160b0:	d8003215 	stw	zero,200(sp)
   160b4:	00006c06 	br	16268 <___svfprintf_internal_r+0x6f8>
   160b8:	84000214 	ori	r16,r16,8
   160bc:	bc400007 	ldb	r17,0(r23)
   160c0:	003f0006 	br	15cc4 <_gp+0xfffeebbc>
   160c4:	8025883a 	mov	r18,r16
   160c8:	dc002903 	ldbu	r16,164(sp)
   160cc:	e011883a 	mov	r8,fp
   160d0:	84003fcc 	andi	r16,r16,255
   160d4:	80073f1e 	bne	r16,zero,17dd4 <___svfprintf_internal_r+0x2264>
   160d8:	94800414 	ori	r18,r18,16
   160dc:	9080080c 	andi	r2,r18,32
   160e0:	1003bb26 	beq	r2,zero,16fd0 <___svfprintf_internal_r+0x1460>
   160e4:	d9002e17 	ldw	r4,184(sp)
   160e8:	20800117 	ldw	r2,4(r4)
   160ec:	25000017 	ldw	r20,0(r4)
   160f0:	21000204 	addi	r4,r4,8
   160f4:	d9002e15 	stw	r4,184(sp)
   160f8:	102d883a 	mov	r22,r2
   160fc:	1003bd16 	blt	r2,zero,16ff4 <___svfprintf_internal_r+0x1484>
   16100:	d9002a17 	ldw	r4,168(sp)
   16104:	df002783 	ldbu	fp,158(sp)
   16108:	2003d016 	blt	r4,zero,1704c <___svfprintf_internal_r+0x14dc>
   1610c:	00ffdfc4 	movi	r3,-129
   16110:	a584b03a 	or	r2,r20,r22
   16114:	90e4703a 	and	r18,r18,r3
   16118:	10015026 	beq	r2,zero,1665c <___svfprintf_internal_r+0xaec>
   1611c:	b0037026 	beq	r22,zero,16ee0 <___svfprintf_internal_r+0x1370>
   16120:	dc402915 	stw	r17,164(sp)
   16124:	dc001e04 	addi	r16,sp,120
   16128:	b023883a 	mov	r17,r22
   1612c:	402d883a 	mov	r22,r8
   16130:	a009883a 	mov	r4,r20
   16134:	880b883a 	mov	r5,r17
   16138:	01800284 	movi	r6,10
   1613c:	000f883a 	mov	r7,zero
   16140:	001d3300 	call	1d330 <__umoddi3>
   16144:	10800c04 	addi	r2,r2,48
   16148:	843fffc4 	addi	r16,r16,-1
   1614c:	a009883a 	mov	r4,r20
   16150:	880b883a 	mov	r5,r17
   16154:	80800005 	stb	r2,0(r16)
   16158:	01800284 	movi	r6,10
   1615c:	000f883a 	mov	r7,zero
   16160:	001cd340 	call	1cd34 <__udivdi3>
   16164:	1029883a 	mov	r20,r2
   16168:	10c4b03a 	or	r2,r2,r3
   1616c:	1823883a 	mov	r17,r3
   16170:	103fef1e 	bne	r2,zero,16130 <_gp+0xfffef028>
   16174:	d8c02817 	ldw	r3,160(sp)
   16178:	dc402917 	ldw	r17,164(sp)
   1617c:	b011883a 	mov	r8,r22
   16180:	1c07c83a 	sub	r3,r3,r16
   16184:	d8c02b15 	stw	r3,172(sp)
   16188:	00003106 	br	16250 <___svfprintf_internal_r+0x6e0>
   1618c:	8025883a 	mov	r18,r16
   16190:	dc002903 	ldbu	r16,164(sp)
   16194:	e011883a 	mov	r8,fp
   16198:	84003fcc 	andi	r16,r16,255
   1619c:	80070a1e 	bne	r16,zero,17dc8 <___svfprintf_internal_r+0x2258>
   161a0:	94800414 	ori	r18,r18,16
   161a4:	9080080c 	andi	r2,r18,32
   161a8:	1002f626 	beq	r2,zero,16d84 <___svfprintf_internal_r+0x1214>
   161ac:	d9002e17 	ldw	r4,184(sp)
   161b0:	d9402a17 	ldw	r5,168(sp)
   161b4:	d8002785 	stb	zero,158(sp)
   161b8:	20800204 	addi	r2,r4,8
   161bc:	25000017 	ldw	r20,0(r4)
   161c0:	25800117 	ldw	r22,4(r4)
   161c4:	28043716 	blt	r5,zero,172a4 <___svfprintf_internal_r+0x1734>
   161c8:	013fdfc4 	movi	r4,-129
   161cc:	a586b03a 	or	r3,r20,r22
   161d0:	d8802e15 	stw	r2,184(sp)
   161d4:	9124703a 	and	r18,r18,r4
   161d8:	1802f71e 	bne	r3,zero,16db8 <___svfprintf_internal_r+0x1248>
   161dc:	d9402a17 	ldw	r5,168(sp)
   161e0:	0039883a 	mov	fp,zero
   161e4:	2806df26 	beq	r5,zero,17d64 <___svfprintf_internal_r+0x21f4>
   161e8:	0029883a 	mov	r20,zero
   161ec:	002d883a 	mov	r22,zero
   161f0:	dc001e04 	addi	r16,sp,120
   161f4:	a006d0fa 	srli	r3,r20,3
   161f8:	b008977a 	slli	r4,r22,29
   161fc:	b02cd0fa 	srli	r22,r22,3
   16200:	a50001cc 	andi	r20,r20,7
   16204:	a0800c04 	addi	r2,r20,48
   16208:	843fffc4 	addi	r16,r16,-1
   1620c:	20e8b03a 	or	r20,r4,r3
   16210:	80800005 	stb	r2,0(r16)
   16214:	a586b03a 	or	r3,r20,r22
   16218:	183ff61e 	bne	r3,zero,161f4 <_gp+0xfffef0ec>
   1621c:	90c0004c 	andi	r3,r18,1
   16220:	18013f26 	beq	r3,zero,16720 <___svfprintf_internal_r+0xbb0>
   16224:	10803fcc 	andi	r2,r2,255
   16228:	1080201c 	xori	r2,r2,128
   1622c:	10bfe004 	addi	r2,r2,-128
   16230:	00c00c04 	movi	r3,48
   16234:	10c13a26 	beq	r2,r3,16720 <___svfprintf_internal_r+0xbb0>
   16238:	80ffffc5 	stb	r3,-1(r16)
   1623c:	d8c02817 	ldw	r3,160(sp)
   16240:	80bfffc4 	addi	r2,r16,-1
   16244:	1021883a 	mov	r16,r2
   16248:	1887c83a 	sub	r3,r3,r2
   1624c:	d8c02b15 	stw	r3,172(sp)
   16250:	d8802b17 	ldw	r2,172(sp)
   16254:	d9002a17 	ldw	r4,168(sp)
   16258:	1100010e 	bge	r2,r4,16260 <___svfprintf_internal_r+0x6f0>
   1625c:	2005883a 	mov	r2,r4
   16260:	d8802915 	stw	r2,164(sp)
   16264:	d8003215 	stw	zero,200(sp)
   16268:	e7003fcc 	andi	fp,fp,255
   1626c:	e700201c 	xori	fp,fp,128
   16270:	e73fe004 	addi	fp,fp,-128
   16274:	e0000326 	beq	fp,zero,16284 <___svfprintf_internal_r+0x714>
   16278:	d8c02917 	ldw	r3,164(sp)
   1627c:	18c00044 	addi	r3,r3,1
   16280:	d8c02915 	stw	r3,164(sp)
   16284:	90c0008c 	andi	r3,r18,2
   16288:	d8c02c15 	stw	r3,176(sp)
   1628c:	18000326 	beq	r3,zero,1629c <___svfprintf_internal_r+0x72c>
   16290:	d8c02917 	ldw	r3,164(sp)
   16294:	18c00084 	addi	r3,r3,2
   16298:	d8c02915 	stw	r3,164(sp)
   1629c:	90c0210c 	andi	r3,r18,132
   162a0:	d8c03015 	stw	r3,192(sp)
   162a4:	1801c31e 	bne	r3,zero,169b4 <___svfprintf_internal_r+0xe44>
   162a8:	d9003117 	ldw	r4,196(sp)
   162ac:	d8c02917 	ldw	r3,164(sp)
   162b0:	20e9c83a 	sub	r20,r4,r3
   162b4:	0501bf0e 	bge	zero,r20,169b4 <___svfprintf_internal_r+0xe44>
   162b8:	02400404 	movi	r9,16
   162bc:	d8c02017 	ldw	r3,128(sp)
   162c0:	d8801f17 	ldw	r2,124(sp)
   162c4:	4d053d0e 	bge	r9,r20,177bc <___svfprintf_internal_r+0x1c4c>
   162c8:	014000b4 	movhi	r5,2
   162cc:	29799884 	addi	r5,r5,-6558
   162d0:	dc403c15 	stw	r17,240(sp)
   162d4:	d9403515 	stw	r5,212(sp)
   162d8:	a023883a 	mov	r17,r20
   162dc:	482d883a 	mov	r22,r9
   162e0:	9029883a 	mov	r20,r18
   162e4:	070001c4 	movi	fp,7
   162e8:	8025883a 	mov	r18,r16
   162ec:	dc002d17 	ldw	r16,180(sp)
   162f0:	00000306 	br	16300 <___svfprintf_internal_r+0x790>
   162f4:	8c7ffc04 	addi	r17,r17,-16
   162f8:	42000204 	addi	r8,r8,8
   162fc:	b440130e 	bge	r22,r17,1634c <___svfprintf_internal_r+0x7dc>
   16300:	010000b4 	movhi	r4,2
   16304:	18c00404 	addi	r3,r3,16
   16308:	10800044 	addi	r2,r2,1
   1630c:	21399884 	addi	r4,r4,-6558
   16310:	41000015 	stw	r4,0(r8)
   16314:	45800115 	stw	r22,4(r8)
   16318:	d8c02015 	stw	r3,128(sp)
   1631c:	d8801f15 	stw	r2,124(sp)
   16320:	e0bff40e 	bge	fp,r2,162f4 <_gp+0xfffef1ec>
   16324:	d9801e04 	addi	r6,sp,120
   16328:	800b883a 	mov	r5,r16
   1632c:	9809883a 	mov	r4,r19
   16330:	001b0280 	call	1b028 <__ssprint_r>
   16334:	103ef51e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16338:	8c7ffc04 	addi	r17,r17,-16
   1633c:	d8c02017 	ldw	r3,128(sp)
   16340:	d8801f17 	ldw	r2,124(sp)
   16344:	da000404 	addi	r8,sp,16
   16348:	b47fed16 	blt	r22,r17,16300 <_gp+0xfffef1f8>
   1634c:	9021883a 	mov	r16,r18
   16350:	a025883a 	mov	r18,r20
   16354:	8829883a 	mov	r20,r17
   16358:	dc403c17 	ldw	r17,240(sp)
   1635c:	d9403517 	ldw	r5,212(sp)
   16360:	a0c7883a 	add	r3,r20,r3
   16364:	10800044 	addi	r2,r2,1
   16368:	41400015 	stw	r5,0(r8)
   1636c:	45000115 	stw	r20,4(r8)
   16370:	d8c02015 	stw	r3,128(sp)
   16374:	d8801f15 	stw	r2,124(sp)
   16378:	010001c4 	movi	r4,7
   1637c:	2082c116 	blt	r4,r2,16e84 <___svfprintf_internal_r+0x1314>
   16380:	df002787 	ldb	fp,158(sp)
   16384:	42000204 	addi	r8,r8,8
   16388:	e0000c26 	beq	fp,zero,163bc <___svfprintf_internal_r+0x84c>
   1638c:	d8801f17 	ldw	r2,124(sp)
   16390:	d9002784 	addi	r4,sp,158
   16394:	18c00044 	addi	r3,r3,1
   16398:	10800044 	addi	r2,r2,1
   1639c:	41000015 	stw	r4,0(r8)
   163a0:	01000044 	movi	r4,1
   163a4:	41000115 	stw	r4,4(r8)
   163a8:	d8c02015 	stw	r3,128(sp)
   163ac:	d8801f15 	stw	r2,124(sp)
   163b0:	010001c4 	movi	r4,7
   163b4:	20825a16 	blt	r4,r2,16d20 <___svfprintf_internal_r+0x11b0>
   163b8:	42000204 	addi	r8,r8,8
   163bc:	d8802c17 	ldw	r2,176(sp)
   163c0:	10000c26 	beq	r2,zero,163f4 <___svfprintf_internal_r+0x884>
   163c4:	d8801f17 	ldw	r2,124(sp)
   163c8:	d9002704 	addi	r4,sp,156
   163cc:	18c00084 	addi	r3,r3,2
   163d0:	10800044 	addi	r2,r2,1
   163d4:	41000015 	stw	r4,0(r8)
   163d8:	01000084 	movi	r4,2
   163dc:	41000115 	stw	r4,4(r8)
   163e0:	d8c02015 	stw	r3,128(sp)
   163e4:	d8801f15 	stw	r2,124(sp)
   163e8:	010001c4 	movi	r4,7
   163ec:	20825416 	blt	r4,r2,16d40 <___svfprintf_internal_r+0x11d0>
   163f0:	42000204 	addi	r8,r8,8
   163f4:	d9003017 	ldw	r4,192(sp)
   163f8:	00802004 	movi	r2,128
   163fc:	2081b926 	beq	r4,r2,16ae4 <___svfprintf_internal_r+0xf74>
   16400:	d9402a17 	ldw	r5,168(sp)
   16404:	d8802b17 	ldw	r2,172(sp)
   16408:	28adc83a 	sub	r22,r5,r2
   1640c:	05802f0e 	bge	zero,r22,164cc <___svfprintf_internal_r+0x95c>
   16410:	07000404 	movi	fp,16
   16414:	d8801f17 	ldw	r2,124(sp)
   16418:	e583e20e 	bge	fp,r22,173a4 <___svfprintf_internal_r+0x1834>
   1641c:	014000b4 	movhi	r5,2
   16420:	29799484 	addi	r5,r5,-6574
   16424:	dc402a15 	stw	r17,168(sp)
   16428:	d9402c15 	stw	r5,176(sp)
   1642c:	b023883a 	mov	r17,r22
   16430:	050001c4 	movi	r20,7
   16434:	902d883a 	mov	r22,r18
   16438:	8025883a 	mov	r18,r16
   1643c:	dc002d17 	ldw	r16,180(sp)
   16440:	00000306 	br	16450 <___svfprintf_internal_r+0x8e0>
   16444:	8c7ffc04 	addi	r17,r17,-16
   16448:	42000204 	addi	r8,r8,8
   1644c:	e440110e 	bge	fp,r17,16494 <___svfprintf_internal_r+0x924>
   16450:	18c00404 	addi	r3,r3,16
   16454:	10800044 	addi	r2,r2,1
   16458:	45400015 	stw	r21,0(r8)
   1645c:	47000115 	stw	fp,4(r8)
   16460:	d8c02015 	stw	r3,128(sp)
   16464:	d8801f15 	stw	r2,124(sp)
   16468:	a0bff60e 	bge	r20,r2,16444 <_gp+0xfffef33c>
   1646c:	d9801e04 	addi	r6,sp,120
   16470:	800b883a 	mov	r5,r16
   16474:	9809883a 	mov	r4,r19
   16478:	001b0280 	call	1b028 <__ssprint_r>
   1647c:	103ea31e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16480:	8c7ffc04 	addi	r17,r17,-16
   16484:	d8c02017 	ldw	r3,128(sp)
   16488:	d8801f17 	ldw	r2,124(sp)
   1648c:	da000404 	addi	r8,sp,16
   16490:	e47fef16 	blt	fp,r17,16450 <_gp+0xfffef348>
   16494:	9021883a 	mov	r16,r18
   16498:	b025883a 	mov	r18,r22
   1649c:	882d883a 	mov	r22,r17
   164a0:	dc402a17 	ldw	r17,168(sp)
   164a4:	d9002c17 	ldw	r4,176(sp)
   164a8:	1d87883a 	add	r3,r3,r22
   164ac:	10800044 	addi	r2,r2,1
   164b0:	41000015 	stw	r4,0(r8)
   164b4:	45800115 	stw	r22,4(r8)
   164b8:	d8c02015 	stw	r3,128(sp)
   164bc:	d8801f15 	stw	r2,124(sp)
   164c0:	010001c4 	movi	r4,7
   164c4:	20820e16 	blt	r4,r2,16d00 <___svfprintf_internal_r+0x1190>
   164c8:	42000204 	addi	r8,r8,8
   164cc:	9080400c 	andi	r2,r18,256
   164d0:	10013a1e 	bne	r2,zero,169bc <___svfprintf_internal_r+0xe4c>
   164d4:	d9402b17 	ldw	r5,172(sp)
   164d8:	d8801f17 	ldw	r2,124(sp)
   164dc:	44000015 	stw	r16,0(r8)
   164e0:	1947883a 	add	r3,r3,r5
   164e4:	10800044 	addi	r2,r2,1
   164e8:	41400115 	stw	r5,4(r8)
   164ec:	d8c02015 	stw	r3,128(sp)
   164f0:	d8801f15 	stw	r2,124(sp)
   164f4:	010001c4 	movi	r4,7
   164f8:	2081f316 	blt	r4,r2,16cc8 <___svfprintf_internal_r+0x1158>
   164fc:	42000204 	addi	r8,r8,8
   16500:	9480010c 	andi	r18,r18,4
   16504:	90003226 	beq	r18,zero,165d0 <___svfprintf_internal_r+0xa60>
   16508:	d9403117 	ldw	r5,196(sp)
   1650c:	d8802917 	ldw	r2,164(sp)
   16510:	28a1c83a 	sub	r16,r5,r2
   16514:	04002e0e 	bge	zero,r16,165d0 <___svfprintf_internal_r+0xa60>
   16518:	04400404 	movi	r17,16
   1651c:	d8801f17 	ldw	r2,124(sp)
   16520:	8c04db0e 	bge	r17,r16,17890 <___svfprintf_internal_r+0x1d20>
   16524:	014000b4 	movhi	r5,2
   16528:	29799884 	addi	r5,r5,-6558
   1652c:	d9403515 	stw	r5,212(sp)
   16530:	048001c4 	movi	r18,7
   16534:	dd002d17 	ldw	r20,180(sp)
   16538:	00000306 	br	16548 <___svfprintf_internal_r+0x9d8>
   1653c:	843ffc04 	addi	r16,r16,-16
   16540:	42000204 	addi	r8,r8,8
   16544:	8c00130e 	bge	r17,r16,16594 <___svfprintf_internal_r+0xa24>
   16548:	010000b4 	movhi	r4,2
   1654c:	18c00404 	addi	r3,r3,16
   16550:	10800044 	addi	r2,r2,1
   16554:	21399884 	addi	r4,r4,-6558
   16558:	41000015 	stw	r4,0(r8)
   1655c:	44400115 	stw	r17,4(r8)
   16560:	d8c02015 	stw	r3,128(sp)
   16564:	d8801f15 	stw	r2,124(sp)
   16568:	90bff40e 	bge	r18,r2,1653c <_gp+0xfffef434>
   1656c:	d9801e04 	addi	r6,sp,120
   16570:	a00b883a 	mov	r5,r20
   16574:	9809883a 	mov	r4,r19
   16578:	001b0280 	call	1b028 <__ssprint_r>
   1657c:	103e631e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16580:	843ffc04 	addi	r16,r16,-16
   16584:	d8c02017 	ldw	r3,128(sp)
   16588:	d8801f17 	ldw	r2,124(sp)
   1658c:	da000404 	addi	r8,sp,16
   16590:	8c3fed16 	blt	r17,r16,16548 <_gp+0xfffef440>
   16594:	d9403517 	ldw	r5,212(sp)
   16598:	1c07883a 	add	r3,r3,r16
   1659c:	10800044 	addi	r2,r2,1
   165a0:	41400015 	stw	r5,0(r8)
   165a4:	44000115 	stw	r16,4(r8)
   165a8:	d8c02015 	stw	r3,128(sp)
   165ac:	d8801f15 	stw	r2,124(sp)
   165b0:	010001c4 	movi	r4,7
   165b4:	2080060e 	bge	r4,r2,165d0 <___svfprintf_internal_r+0xa60>
   165b8:	d9402d17 	ldw	r5,180(sp)
   165bc:	d9801e04 	addi	r6,sp,120
   165c0:	9809883a 	mov	r4,r19
   165c4:	001b0280 	call	1b028 <__ssprint_r>
   165c8:	103e501e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   165cc:	d8c02017 	ldw	r3,128(sp)
   165d0:	d8803117 	ldw	r2,196(sp)
   165d4:	d9002917 	ldw	r4,164(sp)
   165d8:	1100010e 	bge	r2,r4,165e0 <___svfprintf_internal_r+0xa70>
   165dc:	2005883a 	mov	r2,r4
   165e0:	d9402f17 	ldw	r5,188(sp)
   165e4:	288b883a 	add	r5,r5,r2
   165e8:	d9402f15 	stw	r5,188(sp)
   165ec:	1801be1e 	bne	r3,zero,16ce8 <___svfprintf_internal_r+0x1178>
   165f0:	b8800007 	ldb	r2,0(r23)
   165f4:	d8001f15 	stw	zero,124(sp)
   165f8:	da000404 	addi	r8,sp,16
   165fc:	103d891e 	bne	r2,zero,15c24 <_gp+0xfffeeb1c>
   16600:	b823883a 	mov	r17,r23
   16604:	003d9f06 	br	15c84 <_gp+0xfffeeb7c>
   16608:	8025883a 	mov	r18,r16
   1660c:	dc002903 	ldbu	r16,164(sp)
   16610:	e011883a 	mov	r8,fp
   16614:	84003fcc 	andi	r16,r16,255
   16618:	8005e61e 	bne	r16,zero,17db4 <___svfprintf_internal_r+0x2244>
   1661c:	94800414 	ori	r18,r18,16
   16620:	9080080c 	andi	r2,r18,32
   16624:	10022026 	beq	r2,zero,16ea8 <___svfprintf_internal_r+0x1338>
   16628:	d9002e17 	ldw	r4,184(sp)
   1662c:	d9402a17 	ldw	r5,168(sp)
   16630:	d8002785 	stb	zero,158(sp)
   16634:	20c00204 	addi	r3,r4,8
   16638:	25000017 	ldw	r20,0(r4)
   1663c:	25800117 	ldw	r22,4(r4)
   16640:	2803ad16 	blt	r5,zero,174f8 <___svfprintf_internal_r+0x1988>
   16644:	013fdfc4 	movi	r4,-129
   16648:	a584b03a 	or	r2,r20,r22
   1664c:	d8c02e15 	stw	r3,184(sp)
   16650:	9124703a 	and	r18,r18,r4
   16654:	0039883a 	mov	fp,zero
   16658:	103eb01e 	bne	r2,zero,1611c <_gp+0xfffef014>
   1665c:	d8802a17 	ldw	r2,168(sp)
   16660:	1002e71e 	bne	r2,zero,17200 <___svfprintf_internal_r+0x1690>
   16664:	d8002a15 	stw	zero,168(sp)
   16668:	d8002b15 	stw	zero,172(sp)
   1666c:	dc001e04 	addi	r16,sp,120
   16670:	003ef706 	br	16250 <_gp+0xfffef148>
   16674:	8025883a 	mov	r18,r16
   16678:	dc002903 	ldbu	r16,164(sp)
   1667c:	e011883a 	mov	r8,fp
   16680:	84003fcc 	andi	r16,r16,255
   16684:	8005c81e 	bne	r16,zero,17da8 <___svfprintf_internal_r+0x2238>
   16688:	010000b4 	movhi	r4,2
   1668c:	21398804 	addi	r4,r4,-6624
   16690:	d9003a15 	stw	r4,232(sp)
   16694:	9080080c 	andi	r2,r18,32
   16698:	10007226 	beq	r2,zero,16864 <___svfprintf_internal_r+0xcf4>
   1669c:	d9402e17 	ldw	r5,184(sp)
   166a0:	2d000017 	ldw	r20,0(r5)
   166a4:	2d800117 	ldw	r22,4(r5)
   166a8:	29400204 	addi	r5,r5,8
   166ac:	d9402e15 	stw	r5,184(sp)
   166b0:	9080004c 	andi	r2,r18,1
   166b4:	1001aa26 	beq	r2,zero,16d60 <___svfprintf_internal_r+0x11f0>
   166b8:	a584b03a 	or	r2,r20,r22
   166bc:	10032526 	beq	r2,zero,17354 <___svfprintf_internal_r+0x17e4>
   166c0:	d8c02a17 	ldw	r3,168(sp)
   166c4:	00800c04 	movi	r2,48
   166c8:	d8802705 	stb	r2,156(sp)
   166cc:	dc402745 	stb	r17,157(sp)
   166d0:	d8002785 	stb	zero,158(sp)
   166d4:	90800094 	ori	r2,r18,2
   166d8:	1804a316 	blt	r3,zero,17968 <___svfprintf_internal_r+0x1df8>
   166dc:	00bfdfc4 	movi	r2,-129
   166e0:	90a4703a 	and	r18,r18,r2
   166e4:	94800094 	ori	r18,r18,2
   166e8:	0039883a 	mov	fp,zero
   166ec:	d9003a17 	ldw	r4,232(sp)
   166f0:	dc001e04 	addi	r16,sp,120
   166f4:	a08003cc 	andi	r2,r20,15
   166f8:	b006973a 	slli	r3,r22,28
   166fc:	2085883a 	add	r2,r4,r2
   16700:	a028d13a 	srli	r20,r20,4
   16704:	10800003 	ldbu	r2,0(r2)
   16708:	b02cd13a 	srli	r22,r22,4
   1670c:	843fffc4 	addi	r16,r16,-1
   16710:	1d28b03a 	or	r20,r3,r20
   16714:	80800005 	stb	r2,0(r16)
   16718:	a584b03a 	or	r2,r20,r22
   1671c:	103ff51e 	bne	r2,zero,166f4 <_gp+0xfffef5ec>
   16720:	d8c02817 	ldw	r3,160(sp)
   16724:	1c07c83a 	sub	r3,r3,r16
   16728:	d8c02b15 	stw	r3,172(sp)
   1672c:	003ec806 	br	16250 <_gp+0xfffef148>
   16730:	d8c02e17 	ldw	r3,184(sp)
   16734:	d9002e17 	ldw	r4,184(sp)
   16738:	8025883a 	mov	r18,r16
   1673c:	18800017 	ldw	r2,0(r3)
   16740:	21000104 	addi	r4,r4,4
   16744:	00c00044 	movi	r3,1
   16748:	e011883a 	mov	r8,fp
   1674c:	d8c02915 	stw	r3,164(sp)
   16750:	d8002785 	stb	zero,158(sp)
   16754:	d8801405 	stb	r2,80(sp)
   16758:	d9002e15 	stw	r4,184(sp)
   1675c:	d8c02b15 	stw	r3,172(sp)
   16760:	d8002a15 	stw	zero,168(sp)
   16764:	d8003215 	stw	zero,200(sp)
   16768:	dc001404 	addi	r16,sp,80
   1676c:	0039883a 	mov	fp,zero
   16770:	003ec406 	br	16284 <_gp+0xfffef17c>
   16774:	8025883a 	mov	r18,r16
   16778:	dc002903 	ldbu	r16,164(sp)
   1677c:	e011883a 	mov	r8,fp
   16780:	84003fcc 	andi	r16,r16,255
   16784:	803e8726 	beq	r16,zero,161a4 <_gp+0xfffef09c>
   16788:	d8c02b03 	ldbu	r3,172(sp)
   1678c:	d8c02785 	stb	r3,158(sp)
   16790:	003e8406 	br	161a4 <_gp+0xfffef09c>
   16794:	00c00044 	movi	r3,1
   16798:	d8c02905 	stb	r3,164(sp)
   1679c:	00c00ac4 	movi	r3,43
   167a0:	d8c02b05 	stb	r3,172(sp)
   167a4:	bc400007 	ldb	r17,0(r23)
   167a8:	003d4606 	br	15cc4 <_gp+0xfffeebbc>
   167ac:	84000814 	ori	r16,r16,32
   167b0:	bc400007 	ldb	r17,0(r23)
   167b4:	003d4306 	br	15cc4 <_gp+0xfffeebbc>
   167b8:	d8802e17 	ldw	r2,184(sp)
   167bc:	8025883a 	mov	r18,r16
   167c0:	d8002785 	stb	zero,158(sp)
   167c4:	14000017 	ldw	r16,0(r2)
   167c8:	e011883a 	mov	r8,fp
   167cc:	15000104 	addi	r20,r2,4
   167d0:	80042126 	beq	r16,zero,17858 <___svfprintf_internal_r+0x1ce8>
   167d4:	d8c02a17 	ldw	r3,168(sp)
   167d8:	1803ee16 	blt	r3,zero,17794 <___svfprintf_internal_r+0x1c24>
   167dc:	180d883a 	mov	r6,r3
   167e0:	000b883a 	mov	r5,zero
   167e4:	8009883a 	mov	r4,r16
   167e8:	df003e15 	stw	fp,248(sp)
   167ec:	0019bec0 	call	19bec <memchr>
   167f0:	da003e17 	ldw	r8,248(sp)
   167f4:	10046a26 	beq	r2,zero,179a0 <___svfprintf_internal_r+0x1e30>
   167f8:	1405c83a 	sub	r2,r2,r16
   167fc:	d8802b15 	stw	r2,172(sp)
   16800:	1003ea16 	blt	r2,zero,177ac <___svfprintf_internal_r+0x1c3c>
   16804:	df002783 	ldbu	fp,158(sp)
   16808:	d8802915 	stw	r2,164(sp)
   1680c:	dd002e15 	stw	r20,184(sp)
   16810:	d8002a15 	stw	zero,168(sp)
   16814:	d8003215 	stw	zero,200(sp)
   16818:	003e9306 	br	16268 <_gp+0xfffef160>
   1681c:	8025883a 	mov	r18,r16
   16820:	dc002903 	ldbu	r16,164(sp)
   16824:	e011883a 	mov	r8,fp
   16828:	84003fcc 	andi	r16,r16,255
   1682c:	803f7c26 	beq	r16,zero,16620 <_gp+0xfffef518>
   16830:	d8c02b03 	ldbu	r3,172(sp)
   16834:	d8c02785 	stb	r3,158(sp)
   16838:	003f7906 	br	16620 <_gp+0xfffef518>
   1683c:	8025883a 	mov	r18,r16
   16840:	dc002903 	ldbu	r16,164(sp)
   16844:	e011883a 	mov	r8,fp
   16848:	84003fcc 	andi	r16,r16,255
   1684c:	8005741e 	bne	r16,zero,17e20 <___svfprintf_internal_r+0x22b0>
   16850:	010000b4 	movhi	r4,2
   16854:	21398d04 	addi	r4,r4,-6604
   16858:	d9003a15 	stw	r4,232(sp)
   1685c:	9080080c 	andi	r2,r18,32
   16860:	103f8e1e 	bne	r2,zero,1669c <_gp+0xfffef594>
   16864:	9080040c 	andi	r2,r18,16
   16868:	1002a726 	beq	r2,zero,17308 <___svfprintf_internal_r+0x1798>
   1686c:	d8802e17 	ldw	r2,184(sp)
   16870:	002d883a 	mov	r22,zero
   16874:	15000017 	ldw	r20,0(r2)
   16878:	10800104 	addi	r2,r2,4
   1687c:	d8802e15 	stw	r2,184(sp)
   16880:	003f8b06 	br	166b0 <_gp+0xfffef5a8>
   16884:	84000054 	ori	r16,r16,1
   16888:	bc400007 	ldb	r17,0(r23)
   1688c:	003d0d06 	br	15cc4 <_gp+0xfffeebbc>
   16890:	d8802b07 	ldb	r2,172(sp)
   16894:	1002a41e 	bne	r2,zero,17328 <___svfprintf_internal_r+0x17b8>
   16898:	00c00044 	movi	r3,1
   1689c:	d8c02905 	stb	r3,164(sp)
   168a0:	00c00804 	movi	r3,32
   168a4:	d8c02b05 	stb	r3,172(sp)
   168a8:	bc400007 	ldb	r17,0(r23)
   168ac:	003d0506 	br	15cc4 <_gp+0xfffeebbc>
   168b0:	8025883a 	mov	r18,r16
   168b4:	dc002903 	ldbu	r16,164(sp)
   168b8:	e011883a 	mov	r8,fp
   168bc:	84003fcc 	andi	r16,r16,255
   168c0:	803e0626 	beq	r16,zero,160dc <_gp+0xfffeefd4>
   168c4:	d8c02b03 	ldbu	r3,172(sp)
   168c8:	d8c02785 	stb	r3,158(sp)
   168cc:	003e0306 	br	160dc <_gp+0xfffeefd4>
   168d0:	bc400007 	ldb	r17,0(r23)
   168d4:	00801b04 	movi	r2,108
   168d8:	88830a26 	beq	r17,r2,17504 <___svfprintf_internal_r+0x1994>
   168dc:	84000414 	ori	r16,r16,16
   168e0:	003cf806 	br	15cc4 <_gp+0xfffeebbc>
   168e4:	8025883a 	mov	r18,r16
   168e8:	dc002903 	ldbu	r16,164(sp)
   168ec:	e011883a 	mov	r8,fp
   168f0:	84003fcc 	andi	r16,r16,255
   168f4:	8005471e 	bne	r16,zero,17e14 <___svfprintf_internal_r+0x22a4>
   168f8:	9080080c 	andi	r2,r18,32
   168fc:	10028c26 	beq	r2,zero,17330 <___svfprintf_internal_r+0x17c0>
   16900:	d9002e17 	ldw	r4,184(sp)
   16904:	d9402f17 	ldw	r5,188(sp)
   16908:	20800017 	ldw	r2,0(r4)
   1690c:	2807d7fa 	srai	r3,r5,31
   16910:	21000104 	addi	r4,r4,4
   16914:	d9002e15 	stw	r4,184(sp)
   16918:	11400015 	stw	r5,0(r2)
   1691c:	10c00115 	stw	r3,4(r2)
   16920:	003cbe06 	br	15c1c <_gp+0xfffeeb14>
   16924:	84001014 	ori	r16,r16,64
   16928:	bc400007 	ldb	r17,0(r23)
   1692c:	003ce506 	br	15cc4 <_gp+0xfffeebbc>
   16930:	010000b4 	movhi	r4,2
   16934:	21398d04 	addi	r4,r4,-6604
   16938:	0039883a 	mov	fp,zero
   1693c:	d9003a15 	stw	r4,232(sp)
   16940:	04401e04 	movi	r17,120
   16944:	003f6906 	br	166ec <_gp+0xfffef5e4>
   16948:	8025883a 	mov	r18,r16
   1694c:	dc002903 	ldbu	r16,164(sp)
   16950:	e011883a 	mov	r8,fp
   16954:	84003fcc 	andi	r16,r16,255
   16958:	8005261e 	bne	r16,zero,17df4 <___svfprintf_internal_r+0x2284>
   1695c:	883d6526 	beq	r17,zero,15ef4 <_gp+0xfffeedec>
   16960:	00c00044 	movi	r3,1
   16964:	d8c02915 	stw	r3,164(sp)
   16968:	dc401405 	stb	r17,80(sp)
   1696c:	d8002785 	stb	zero,158(sp)
   16970:	003f7a06 	br	1675c <_gp+0xfffef654>
   16974:	010000b4 	movhi	r4,2
   16978:	21398d04 	addi	r4,r4,-6604
   1697c:	d9003a15 	stw	r4,232(sp)
   16980:	d8c02e15 	stw	r3,184(sp)
   16984:	1025883a 	mov	r18,r2
   16988:	04401e04 	movi	r17,120
   1698c:	a584b03a 	or	r2,r20,r22
   16990:	1000fa1e 	bne	r2,zero,16d7c <___svfprintf_internal_r+0x120c>
   16994:	0039883a 	mov	fp,zero
   16998:	00800084 	movi	r2,2
   1699c:	10803fcc 	andi	r2,r2,255
   169a0:	00c00044 	movi	r3,1
   169a4:	10c21626 	beq	r2,r3,17200 <___svfprintf_internal_r+0x1690>
   169a8:	00c00084 	movi	r3,2
   169ac:	10fe0e1e 	bne	r2,r3,161e8 <_gp+0xfffef0e0>
   169b0:	003d4606 	br	15ecc <_gp+0xfffeedc4>
   169b4:	d8c02017 	ldw	r3,128(sp)
   169b8:	003e7306 	br	16388 <_gp+0xfffef280>
   169bc:	00801944 	movi	r2,101
   169c0:	14407c0e 	bge	r2,r17,16bb4 <___svfprintf_internal_r+0x1044>
   169c4:	d9003617 	ldw	r4,216(sp)
   169c8:	d9403717 	ldw	r5,220(sp)
   169cc:	000d883a 	mov	r6,zero
   169d0:	000f883a 	mov	r7,zero
   169d4:	d8c03d15 	stw	r3,244(sp)
   169d8:	da003e15 	stw	r8,248(sp)
   169dc:	001306c0 	call	1306c <__eqdf2>
   169e0:	d8c03d17 	ldw	r3,244(sp)
   169e4:	da003e17 	ldw	r8,248(sp)
   169e8:	1000f51e 	bne	r2,zero,16dc0 <___svfprintf_internal_r+0x1250>
   169ec:	d8801f17 	ldw	r2,124(sp)
   169f0:	010000b4 	movhi	r4,2
   169f4:	21399404 	addi	r4,r4,-6576
   169f8:	18c00044 	addi	r3,r3,1
   169fc:	10800044 	addi	r2,r2,1
   16a00:	41000015 	stw	r4,0(r8)
   16a04:	01000044 	movi	r4,1
   16a08:	41000115 	stw	r4,4(r8)
   16a0c:	d8c02015 	stw	r3,128(sp)
   16a10:	d8801f15 	stw	r2,124(sp)
   16a14:	010001c4 	movi	r4,7
   16a18:	20826616 	blt	r4,r2,173b4 <___svfprintf_internal_r+0x1844>
   16a1c:	42000204 	addi	r8,r8,8
   16a20:	d8802617 	ldw	r2,152(sp)
   16a24:	d9403317 	ldw	r5,204(sp)
   16a28:	11400216 	blt	r2,r5,16a34 <___svfprintf_internal_r+0xec4>
   16a2c:	9080004c 	andi	r2,r18,1
   16a30:	103eb326 	beq	r2,zero,16500 <_gp+0xfffef3f8>
   16a34:	d8803817 	ldw	r2,224(sp)
   16a38:	d9003417 	ldw	r4,208(sp)
   16a3c:	d9403817 	ldw	r5,224(sp)
   16a40:	1887883a 	add	r3,r3,r2
   16a44:	d8801f17 	ldw	r2,124(sp)
   16a48:	41000015 	stw	r4,0(r8)
   16a4c:	41400115 	stw	r5,4(r8)
   16a50:	10800044 	addi	r2,r2,1
   16a54:	d8c02015 	stw	r3,128(sp)
   16a58:	d8801f15 	stw	r2,124(sp)
   16a5c:	010001c4 	movi	r4,7
   16a60:	2082af16 	blt	r4,r2,17520 <___svfprintf_internal_r+0x19b0>
   16a64:	42000204 	addi	r8,r8,8
   16a68:	d8803317 	ldw	r2,204(sp)
   16a6c:	143fffc4 	addi	r16,r2,-1
   16a70:	043ea30e 	bge	zero,r16,16500 <_gp+0xfffef3f8>
   16a74:	04400404 	movi	r17,16
   16a78:	d8801f17 	ldw	r2,124(sp)
   16a7c:	8c00860e 	bge	r17,r16,16c98 <___svfprintf_internal_r+0x1128>
   16a80:	014000b4 	movhi	r5,2
   16a84:	29799484 	addi	r5,r5,-6574
   16a88:	d9402c15 	stw	r5,176(sp)
   16a8c:	058001c4 	movi	r22,7
   16a90:	dd002d17 	ldw	r20,180(sp)
   16a94:	00000306 	br	16aa4 <___svfprintf_internal_r+0xf34>
   16a98:	42000204 	addi	r8,r8,8
   16a9c:	843ffc04 	addi	r16,r16,-16
   16aa0:	8c00800e 	bge	r17,r16,16ca4 <___svfprintf_internal_r+0x1134>
   16aa4:	18c00404 	addi	r3,r3,16
   16aa8:	10800044 	addi	r2,r2,1
   16aac:	45400015 	stw	r21,0(r8)
   16ab0:	44400115 	stw	r17,4(r8)
   16ab4:	d8c02015 	stw	r3,128(sp)
   16ab8:	d8801f15 	stw	r2,124(sp)
   16abc:	b0bff60e 	bge	r22,r2,16a98 <_gp+0xfffef990>
   16ac0:	d9801e04 	addi	r6,sp,120
   16ac4:	a00b883a 	mov	r5,r20
   16ac8:	9809883a 	mov	r4,r19
   16acc:	001b0280 	call	1b028 <__ssprint_r>
   16ad0:	103d0e1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16ad4:	d8c02017 	ldw	r3,128(sp)
   16ad8:	d8801f17 	ldw	r2,124(sp)
   16adc:	da000404 	addi	r8,sp,16
   16ae0:	003fee06 	br	16a9c <_gp+0xfffef994>
   16ae4:	d9403117 	ldw	r5,196(sp)
   16ae8:	d8802917 	ldw	r2,164(sp)
   16aec:	28adc83a 	sub	r22,r5,r2
   16af0:	05be430e 	bge	zero,r22,16400 <_gp+0xfffef2f8>
   16af4:	07000404 	movi	fp,16
   16af8:	d8801f17 	ldw	r2,124(sp)
   16afc:	e583a20e 	bge	fp,r22,17988 <___svfprintf_internal_r+0x1e18>
   16b00:	014000b4 	movhi	r5,2
   16b04:	29799484 	addi	r5,r5,-6574
   16b08:	dc403015 	stw	r17,192(sp)
   16b0c:	d9402c15 	stw	r5,176(sp)
   16b10:	b023883a 	mov	r17,r22
   16b14:	050001c4 	movi	r20,7
   16b18:	902d883a 	mov	r22,r18
   16b1c:	8025883a 	mov	r18,r16
   16b20:	dc002d17 	ldw	r16,180(sp)
   16b24:	00000306 	br	16b34 <___svfprintf_internal_r+0xfc4>
   16b28:	8c7ffc04 	addi	r17,r17,-16
   16b2c:	42000204 	addi	r8,r8,8
   16b30:	e440110e 	bge	fp,r17,16b78 <___svfprintf_internal_r+0x1008>
   16b34:	18c00404 	addi	r3,r3,16
   16b38:	10800044 	addi	r2,r2,1
   16b3c:	45400015 	stw	r21,0(r8)
   16b40:	47000115 	stw	fp,4(r8)
   16b44:	d8c02015 	stw	r3,128(sp)
   16b48:	d8801f15 	stw	r2,124(sp)
   16b4c:	a0bff60e 	bge	r20,r2,16b28 <_gp+0xfffefa20>
   16b50:	d9801e04 	addi	r6,sp,120
   16b54:	800b883a 	mov	r5,r16
   16b58:	9809883a 	mov	r4,r19
   16b5c:	001b0280 	call	1b028 <__ssprint_r>
   16b60:	103cea1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16b64:	8c7ffc04 	addi	r17,r17,-16
   16b68:	d8c02017 	ldw	r3,128(sp)
   16b6c:	d8801f17 	ldw	r2,124(sp)
   16b70:	da000404 	addi	r8,sp,16
   16b74:	e47fef16 	blt	fp,r17,16b34 <_gp+0xfffefa2c>
   16b78:	9021883a 	mov	r16,r18
   16b7c:	b025883a 	mov	r18,r22
   16b80:	882d883a 	mov	r22,r17
   16b84:	dc403017 	ldw	r17,192(sp)
   16b88:	d9002c17 	ldw	r4,176(sp)
   16b8c:	1d87883a 	add	r3,r3,r22
   16b90:	10800044 	addi	r2,r2,1
   16b94:	41000015 	stw	r4,0(r8)
   16b98:	45800115 	stw	r22,4(r8)
   16b9c:	d8c02015 	stw	r3,128(sp)
   16ba0:	d8801f15 	stw	r2,124(sp)
   16ba4:	010001c4 	movi	r4,7
   16ba8:	20819a16 	blt	r4,r2,17214 <___svfprintf_internal_r+0x16a4>
   16bac:	42000204 	addi	r8,r8,8
   16bb0:	003e1306 	br	16400 <_gp+0xfffef2f8>
   16bb4:	d9403317 	ldw	r5,204(sp)
   16bb8:	00800044 	movi	r2,1
   16bbc:	18c00044 	addi	r3,r3,1
   16bc0:	1141710e 	bge	r2,r5,17188 <___svfprintf_internal_r+0x1618>
   16bc4:	dc401f17 	ldw	r17,124(sp)
   16bc8:	00800044 	movi	r2,1
   16bcc:	40800115 	stw	r2,4(r8)
   16bd0:	8c400044 	addi	r17,r17,1
   16bd4:	44000015 	stw	r16,0(r8)
   16bd8:	d8c02015 	stw	r3,128(sp)
   16bdc:	dc401f15 	stw	r17,124(sp)
   16be0:	008001c4 	movi	r2,7
   16be4:	14417416 	blt	r2,r17,171b8 <___svfprintf_internal_r+0x1648>
   16be8:	42000204 	addi	r8,r8,8
   16bec:	d8803817 	ldw	r2,224(sp)
   16bf0:	d9003417 	ldw	r4,208(sp)
   16bf4:	8c400044 	addi	r17,r17,1
   16bf8:	10c7883a 	add	r3,r2,r3
   16bfc:	40800115 	stw	r2,4(r8)
   16c00:	41000015 	stw	r4,0(r8)
   16c04:	d8c02015 	stw	r3,128(sp)
   16c08:	dc401f15 	stw	r17,124(sp)
   16c0c:	008001c4 	movi	r2,7
   16c10:	14417216 	blt	r2,r17,171dc <___svfprintf_internal_r+0x166c>
   16c14:	45800204 	addi	r22,r8,8
   16c18:	d9003617 	ldw	r4,216(sp)
   16c1c:	d9403717 	ldw	r5,220(sp)
   16c20:	000d883a 	mov	r6,zero
   16c24:	000f883a 	mov	r7,zero
   16c28:	d8c03d15 	stw	r3,244(sp)
   16c2c:	001306c0 	call	1306c <__eqdf2>
   16c30:	d8c03d17 	ldw	r3,244(sp)
   16c34:	1000b326 	beq	r2,zero,16f04 <___svfprintf_internal_r+0x1394>
   16c38:	d9403317 	ldw	r5,204(sp)
   16c3c:	84000044 	addi	r16,r16,1
   16c40:	8c400044 	addi	r17,r17,1
   16c44:	28bfffc4 	addi	r2,r5,-1
   16c48:	1887883a 	add	r3,r3,r2
   16c4c:	b0800115 	stw	r2,4(r22)
   16c50:	b4000015 	stw	r16,0(r22)
   16c54:	d8c02015 	stw	r3,128(sp)
   16c58:	dc401f15 	stw	r17,124(sp)
   16c5c:	008001c4 	movi	r2,7
   16c60:	1440d216 	blt	r2,r17,16fac <___svfprintf_internal_r+0x143c>
   16c64:	b5800204 	addi	r22,r22,8
   16c68:	d9003b17 	ldw	r4,236(sp)
   16c6c:	df0022c4 	addi	fp,sp,139
   16c70:	8c400044 	addi	r17,r17,1
   16c74:	20c7883a 	add	r3,r4,r3
   16c78:	b7000015 	stw	fp,0(r22)
   16c7c:	b1000115 	stw	r4,4(r22)
   16c80:	d8c02015 	stw	r3,128(sp)
   16c84:	dc401f15 	stw	r17,124(sp)
   16c88:	008001c4 	movi	r2,7
   16c8c:	14400e16 	blt	r2,r17,16cc8 <___svfprintf_internal_r+0x1158>
   16c90:	b2000204 	addi	r8,r22,8
   16c94:	003e1a06 	br	16500 <_gp+0xfffef3f8>
   16c98:	010000b4 	movhi	r4,2
   16c9c:	21399484 	addi	r4,r4,-6574
   16ca0:	d9002c15 	stw	r4,176(sp)
   16ca4:	d9002c17 	ldw	r4,176(sp)
   16ca8:	1c07883a 	add	r3,r3,r16
   16cac:	44000115 	stw	r16,4(r8)
   16cb0:	41000015 	stw	r4,0(r8)
   16cb4:	10800044 	addi	r2,r2,1
   16cb8:	d8c02015 	stw	r3,128(sp)
   16cbc:	d8801f15 	stw	r2,124(sp)
   16cc0:	010001c4 	movi	r4,7
   16cc4:	20be0d0e 	bge	r4,r2,164fc <_gp+0xfffef3f4>
   16cc8:	d9402d17 	ldw	r5,180(sp)
   16ccc:	d9801e04 	addi	r6,sp,120
   16cd0:	9809883a 	mov	r4,r19
   16cd4:	001b0280 	call	1b028 <__ssprint_r>
   16cd8:	103c8c1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16cdc:	d8c02017 	ldw	r3,128(sp)
   16ce0:	da000404 	addi	r8,sp,16
   16ce4:	003e0606 	br	16500 <_gp+0xfffef3f8>
   16ce8:	d9402d17 	ldw	r5,180(sp)
   16cec:	d9801e04 	addi	r6,sp,120
   16cf0:	9809883a 	mov	r4,r19
   16cf4:	001b0280 	call	1b028 <__ssprint_r>
   16cf8:	103e3d26 	beq	r2,zero,165f0 <_gp+0xfffef4e8>
   16cfc:	003c8306 	br	15f0c <_gp+0xfffeee04>
   16d00:	d9402d17 	ldw	r5,180(sp)
   16d04:	d9801e04 	addi	r6,sp,120
   16d08:	9809883a 	mov	r4,r19
   16d0c:	001b0280 	call	1b028 <__ssprint_r>
   16d10:	103c7e1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16d14:	d8c02017 	ldw	r3,128(sp)
   16d18:	da000404 	addi	r8,sp,16
   16d1c:	003deb06 	br	164cc <_gp+0xfffef3c4>
   16d20:	d9402d17 	ldw	r5,180(sp)
   16d24:	d9801e04 	addi	r6,sp,120
   16d28:	9809883a 	mov	r4,r19
   16d2c:	001b0280 	call	1b028 <__ssprint_r>
   16d30:	103c761e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16d34:	d8c02017 	ldw	r3,128(sp)
   16d38:	da000404 	addi	r8,sp,16
   16d3c:	003d9f06 	br	163bc <_gp+0xfffef2b4>
   16d40:	d9402d17 	ldw	r5,180(sp)
   16d44:	d9801e04 	addi	r6,sp,120
   16d48:	9809883a 	mov	r4,r19
   16d4c:	001b0280 	call	1b028 <__ssprint_r>
   16d50:	103c6e1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16d54:	d8c02017 	ldw	r3,128(sp)
   16d58:	da000404 	addi	r8,sp,16
   16d5c:	003da506 	br	163f4 <_gp+0xfffef2ec>
   16d60:	d9402a17 	ldw	r5,168(sp)
   16d64:	d8002785 	stb	zero,158(sp)
   16d68:	283f0816 	blt	r5,zero,1698c <_gp+0xfffef884>
   16d6c:	00ffdfc4 	movi	r3,-129
   16d70:	a584b03a 	or	r2,r20,r22
   16d74:	90e4703a 	and	r18,r18,r3
   16d78:	103c5126 	beq	r2,zero,15ec0 <_gp+0xfffeedb8>
   16d7c:	0039883a 	mov	fp,zero
   16d80:	003e5a06 	br	166ec <_gp+0xfffef5e4>
   16d84:	9080040c 	andi	r2,r18,16
   16d88:	10013d26 	beq	r2,zero,17280 <___svfprintf_internal_r+0x1710>
   16d8c:	d8c02e17 	ldw	r3,184(sp)
   16d90:	d9002a17 	ldw	r4,168(sp)
   16d94:	d8002785 	stb	zero,158(sp)
   16d98:	18800104 	addi	r2,r3,4
   16d9c:	1d000017 	ldw	r20,0(r3)
   16da0:	002d883a 	mov	r22,zero
   16da4:	20013f16 	blt	r4,zero,172a4 <___svfprintf_internal_r+0x1734>
   16da8:	00ffdfc4 	movi	r3,-129
   16dac:	d8802e15 	stw	r2,184(sp)
   16db0:	90e4703a 	and	r18,r18,r3
   16db4:	a03d0926 	beq	r20,zero,161dc <_gp+0xfffef0d4>
   16db8:	0039883a 	mov	fp,zero
   16dbc:	003d0c06 	br	161f0 <_gp+0xfffef0e8>
   16dc0:	dc402617 	ldw	r17,152(sp)
   16dc4:	0441830e 	bge	zero,r17,173d4 <___svfprintf_internal_r+0x1864>
   16dc8:	dc403217 	ldw	r17,200(sp)
   16dcc:	d8803317 	ldw	r2,204(sp)
   16dd0:	1440010e 	bge	r2,r17,16dd8 <___svfprintf_internal_r+0x1268>
   16dd4:	1023883a 	mov	r17,r2
   16dd8:	04400a0e 	bge	zero,r17,16e04 <___svfprintf_internal_r+0x1294>
   16ddc:	d8801f17 	ldw	r2,124(sp)
   16de0:	1c47883a 	add	r3,r3,r17
   16de4:	44000015 	stw	r16,0(r8)
   16de8:	10800044 	addi	r2,r2,1
   16dec:	44400115 	stw	r17,4(r8)
   16df0:	d8c02015 	stw	r3,128(sp)
   16df4:	d8801f15 	stw	r2,124(sp)
   16df8:	010001c4 	movi	r4,7
   16dfc:	20827516 	blt	r4,r2,177d4 <___svfprintf_internal_r+0x1c64>
   16e00:	42000204 	addi	r8,r8,8
   16e04:	88027b16 	blt	r17,zero,177f4 <___svfprintf_internal_r+0x1c84>
   16e08:	d9003217 	ldw	r4,200(sp)
   16e0c:	2463c83a 	sub	r17,r4,r17
   16e10:	0440990e 	bge	zero,r17,17078 <___svfprintf_internal_r+0x1508>
   16e14:	05800404 	movi	r22,16
   16e18:	d8801f17 	ldw	r2,124(sp)
   16e1c:	b441530e 	bge	r22,r17,1736c <___svfprintf_internal_r+0x17fc>
   16e20:	010000b4 	movhi	r4,2
   16e24:	21399484 	addi	r4,r4,-6574
   16e28:	d9002c15 	stw	r4,176(sp)
   16e2c:	070001c4 	movi	fp,7
   16e30:	dd002d17 	ldw	r20,180(sp)
   16e34:	00000306 	br	16e44 <___svfprintf_internal_r+0x12d4>
   16e38:	42000204 	addi	r8,r8,8
   16e3c:	8c7ffc04 	addi	r17,r17,-16
   16e40:	b4414d0e 	bge	r22,r17,17378 <___svfprintf_internal_r+0x1808>
   16e44:	18c00404 	addi	r3,r3,16
   16e48:	10800044 	addi	r2,r2,1
   16e4c:	45400015 	stw	r21,0(r8)
   16e50:	45800115 	stw	r22,4(r8)
   16e54:	d8c02015 	stw	r3,128(sp)
   16e58:	d8801f15 	stw	r2,124(sp)
   16e5c:	e0bff60e 	bge	fp,r2,16e38 <_gp+0xfffefd30>
   16e60:	d9801e04 	addi	r6,sp,120
   16e64:	a00b883a 	mov	r5,r20
   16e68:	9809883a 	mov	r4,r19
   16e6c:	001b0280 	call	1b028 <__ssprint_r>
   16e70:	103c261e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16e74:	d8c02017 	ldw	r3,128(sp)
   16e78:	d8801f17 	ldw	r2,124(sp)
   16e7c:	da000404 	addi	r8,sp,16
   16e80:	003fee06 	br	16e3c <_gp+0xfffefd34>
   16e84:	d9402d17 	ldw	r5,180(sp)
   16e88:	d9801e04 	addi	r6,sp,120
   16e8c:	9809883a 	mov	r4,r19
   16e90:	001b0280 	call	1b028 <__ssprint_r>
   16e94:	103c1d1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16e98:	d8c02017 	ldw	r3,128(sp)
   16e9c:	df002787 	ldb	fp,158(sp)
   16ea0:	da000404 	addi	r8,sp,16
   16ea4:	003d3806 	br	16388 <_gp+0xfffef280>
   16ea8:	9080040c 	andi	r2,r18,16
   16eac:	10005c26 	beq	r2,zero,17020 <___svfprintf_internal_r+0x14b0>
   16eb0:	d8c02e17 	ldw	r3,184(sp)
   16eb4:	d9002a17 	ldw	r4,168(sp)
   16eb8:	d8002785 	stb	zero,158(sp)
   16ebc:	18800104 	addi	r2,r3,4
   16ec0:	1d000017 	ldw	r20,0(r3)
   16ec4:	002d883a 	mov	r22,zero
   16ec8:	20005e16 	blt	r4,zero,17044 <___svfprintf_internal_r+0x14d4>
   16ecc:	00ffdfc4 	movi	r3,-129
   16ed0:	d8802e15 	stw	r2,184(sp)
   16ed4:	90e4703a 	and	r18,r18,r3
   16ed8:	0039883a 	mov	fp,zero
   16edc:	a03ddf26 	beq	r20,zero,1665c <_gp+0xfffef554>
   16ee0:	00800244 	movi	r2,9
   16ee4:	153c8e36 	bltu	r2,r20,16120 <_gp+0xfffef018>
   16ee8:	a5000c04 	addi	r20,r20,48
   16eec:	dc001dc4 	addi	r16,sp,119
   16ef0:	dd001dc5 	stb	r20,119(sp)
   16ef4:	d8c02817 	ldw	r3,160(sp)
   16ef8:	1c07c83a 	sub	r3,r3,r16
   16efc:	d8c02b15 	stw	r3,172(sp)
   16f00:	003cd306 	br	16250 <_gp+0xfffef148>
   16f04:	d8803317 	ldw	r2,204(sp)
   16f08:	143fffc4 	addi	r16,r2,-1
   16f0c:	043f560e 	bge	zero,r16,16c68 <_gp+0xfffefb60>
   16f10:	07000404 	movi	fp,16
   16f14:	e403530e 	bge	fp,r16,17c64 <___svfprintf_internal_r+0x20f4>
   16f18:	014000b4 	movhi	r5,2
   16f1c:	29799484 	addi	r5,r5,-6574
   16f20:	d9402c15 	stw	r5,176(sp)
   16f24:	01c001c4 	movi	r7,7
   16f28:	dd002d17 	ldw	r20,180(sp)
   16f2c:	00000306 	br	16f3c <___svfprintf_internal_r+0x13cc>
   16f30:	843ffc04 	addi	r16,r16,-16
   16f34:	b5800204 	addi	r22,r22,8
   16f38:	e400130e 	bge	fp,r16,16f88 <___svfprintf_internal_r+0x1418>
   16f3c:	18c00404 	addi	r3,r3,16
   16f40:	8c400044 	addi	r17,r17,1
   16f44:	b5400015 	stw	r21,0(r22)
   16f48:	b7000115 	stw	fp,4(r22)
   16f4c:	d8c02015 	stw	r3,128(sp)
   16f50:	dc401f15 	stw	r17,124(sp)
   16f54:	3c7ff60e 	bge	r7,r17,16f30 <_gp+0xfffefe28>
   16f58:	d9801e04 	addi	r6,sp,120
   16f5c:	a00b883a 	mov	r5,r20
   16f60:	9809883a 	mov	r4,r19
   16f64:	d9c03d15 	stw	r7,244(sp)
   16f68:	001b0280 	call	1b028 <__ssprint_r>
   16f6c:	d9c03d17 	ldw	r7,244(sp)
   16f70:	103be61e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16f74:	843ffc04 	addi	r16,r16,-16
   16f78:	d8c02017 	ldw	r3,128(sp)
   16f7c:	dc401f17 	ldw	r17,124(sp)
   16f80:	dd800404 	addi	r22,sp,16
   16f84:	e43fed16 	blt	fp,r16,16f3c <_gp+0xfffefe34>
   16f88:	d8802c17 	ldw	r2,176(sp)
   16f8c:	1c07883a 	add	r3,r3,r16
   16f90:	8c400044 	addi	r17,r17,1
   16f94:	b0800015 	stw	r2,0(r22)
   16f98:	b4000115 	stw	r16,4(r22)
   16f9c:	d8c02015 	stw	r3,128(sp)
   16fa0:	dc401f15 	stw	r17,124(sp)
   16fa4:	008001c4 	movi	r2,7
   16fa8:	147f2e0e 	bge	r2,r17,16c64 <_gp+0xfffefb5c>
   16fac:	d9402d17 	ldw	r5,180(sp)
   16fb0:	d9801e04 	addi	r6,sp,120
   16fb4:	9809883a 	mov	r4,r19
   16fb8:	001b0280 	call	1b028 <__ssprint_r>
   16fbc:	103bd31e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   16fc0:	d8c02017 	ldw	r3,128(sp)
   16fc4:	dc401f17 	ldw	r17,124(sp)
   16fc8:	dd800404 	addi	r22,sp,16
   16fcc:	003f2606 	br	16c68 <_gp+0xfffefb60>
   16fd0:	9080040c 	andi	r2,r18,16
   16fd4:	1000c326 	beq	r2,zero,172e4 <___svfprintf_internal_r+0x1774>
   16fd8:	d9402e17 	ldw	r5,184(sp)
   16fdc:	2d000017 	ldw	r20,0(r5)
   16fe0:	29400104 	addi	r5,r5,4
   16fe4:	d9402e15 	stw	r5,184(sp)
   16fe8:	a02dd7fa 	srai	r22,r20,31
   16fec:	b005883a 	mov	r2,r22
   16ff0:	103c430e 	bge	r2,zero,16100 <_gp+0xfffeeff8>
   16ff4:	d9402a17 	ldw	r5,168(sp)
   16ff8:	0529c83a 	sub	r20,zero,r20
   16ffc:	07000b44 	movi	fp,45
   17000:	a004c03a 	cmpne	r2,r20,zero
   17004:	05adc83a 	sub	r22,zero,r22
   17008:	df002785 	stb	fp,158(sp)
   1700c:	b0adc83a 	sub	r22,r22,r2
   17010:	28022e16 	blt	r5,zero,178cc <___svfprintf_internal_r+0x1d5c>
   17014:	00bfdfc4 	movi	r2,-129
   17018:	90a4703a 	and	r18,r18,r2
   1701c:	003c3f06 	br	1611c <_gp+0xfffef014>
   17020:	9080100c 	andi	r2,r18,64
   17024:	d8002785 	stb	zero,158(sp)
   17028:	10012526 	beq	r2,zero,174c0 <___svfprintf_internal_r+0x1950>
   1702c:	d9402e17 	ldw	r5,184(sp)
   17030:	d8c02a17 	ldw	r3,168(sp)
   17034:	002d883a 	mov	r22,zero
   17038:	28800104 	addi	r2,r5,4
   1703c:	2d00000b 	ldhu	r20,0(r5)
   17040:	183fa20e 	bge	r3,zero,16ecc <_gp+0xfffefdc4>
   17044:	d8802e15 	stw	r2,184(sp)
   17048:	0039883a 	mov	fp,zero
   1704c:	a584b03a 	or	r2,r20,r22
   17050:	103c321e 	bne	r2,zero,1611c <_gp+0xfffef014>
   17054:	00800044 	movi	r2,1
   17058:	003e5006 	br	1699c <_gp+0xfffef894>
   1705c:	d9402d17 	ldw	r5,180(sp)
   17060:	d9801e04 	addi	r6,sp,120
   17064:	9809883a 	mov	r4,r19
   17068:	001b0280 	call	1b028 <__ssprint_r>
   1706c:	103ba71e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17070:	d8c02017 	ldw	r3,128(sp)
   17074:	da000404 	addi	r8,sp,16
   17078:	d9003217 	ldw	r4,200(sp)
   1707c:	d8802617 	ldw	r2,152(sp)
   17080:	d9403317 	ldw	r5,204(sp)
   17084:	8123883a 	add	r17,r16,r4
   17088:	11400216 	blt	r2,r5,17094 <___svfprintf_internal_r+0x1524>
   1708c:	9100004c 	andi	r4,r18,1
   17090:	20000d26 	beq	r4,zero,170c8 <___svfprintf_internal_r+0x1558>
   17094:	d9003817 	ldw	r4,224(sp)
   17098:	d9403417 	ldw	r5,208(sp)
   1709c:	1907883a 	add	r3,r3,r4
   170a0:	d9001f17 	ldw	r4,124(sp)
   170a4:	41400015 	stw	r5,0(r8)
   170a8:	d9403817 	ldw	r5,224(sp)
   170ac:	21000044 	addi	r4,r4,1
   170b0:	d8c02015 	stw	r3,128(sp)
   170b4:	41400115 	stw	r5,4(r8)
   170b8:	d9001f15 	stw	r4,124(sp)
   170bc:	014001c4 	movi	r5,7
   170c0:	2901dc16 	blt	r5,r4,17834 <___svfprintf_internal_r+0x1cc4>
   170c4:	42000204 	addi	r8,r8,8
   170c8:	d9003317 	ldw	r4,204(sp)
   170cc:	8121883a 	add	r16,r16,r4
   170d0:	2085c83a 	sub	r2,r4,r2
   170d4:	8461c83a 	sub	r16,r16,r17
   170d8:	1400010e 	bge	r2,r16,170e0 <___svfprintf_internal_r+0x1570>
   170dc:	1021883a 	mov	r16,r2
   170e0:	04000a0e 	bge	zero,r16,1710c <___svfprintf_internal_r+0x159c>
   170e4:	d9001f17 	ldw	r4,124(sp)
   170e8:	1c07883a 	add	r3,r3,r16
   170ec:	44400015 	stw	r17,0(r8)
   170f0:	21000044 	addi	r4,r4,1
   170f4:	44000115 	stw	r16,4(r8)
   170f8:	d8c02015 	stw	r3,128(sp)
   170fc:	d9001f15 	stw	r4,124(sp)
   17100:	014001c4 	movi	r5,7
   17104:	2901e616 	blt	r5,r4,178a0 <___svfprintf_internal_r+0x1d30>
   17108:	42000204 	addi	r8,r8,8
   1710c:	8001f616 	blt	r16,zero,178e8 <___svfprintf_internal_r+0x1d78>
   17110:	1421c83a 	sub	r16,r2,r16
   17114:	043cfa0e 	bge	zero,r16,16500 <_gp+0xfffef3f8>
   17118:	04400404 	movi	r17,16
   1711c:	d8801f17 	ldw	r2,124(sp)
   17120:	8c3edd0e 	bge	r17,r16,16c98 <_gp+0xfffefb90>
   17124:	014000b4 	movhi	r5,2
   17128:	29799484 	addi	r5,r5,-6574
   1712c:	d9402c15 	stw	r5,176(sp)
   17130:	058001c4 	movi	r22,7
   17134:	dd002d17 	ldw	r20,180(sp)
   17138:	00000306 	br	17148 <___svfprintf_internal_r+0x15d8>
   1713c:	42000204 	addi	r8,r8,8
   17140:	843ffc04 	addi	r16,r16,-16
   17144:	8c3ed70e 	bge	r17,r16,16ca4 <_gp+0xfffefb9c>
   17148:	18c00404 	addi	r3,r3,16
   1714c:	10800044 	addi	r2,r2,1
   17150:	45400015 	stw	r21,0(r8)
   17154:	44400115 	stw	r17,4(r8)
   17158:	d8c02015 	stw	r3,128(sp)
   1715c:	d8801f15 	stw	r2,124(sp)
   17160:	b0bff60e 	bge	r22,r2,1713c <_gp+0xffff0034>
   17164:	d9801e04 	addi	r6,sp,120
   17168:	a00b883a 	mov	r5,r20
   1716c:	9809883a 	mov	r4,r19
   17170:	001b0280 	call	1b028 <__ssprint_r>
   17174:	103b651e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17178:	d8c02017 	ldw	r3,128(sp)
   1717c:	d8801f17 	ldw	r2,124(sp)
   17180:	da000404 	addi	r8,sp,16
   17184:	003fee06 	br	17140 <_gp+0xffff0038>
   17188:	9088703a 	and	r4,r18,r2
   1718c:	203e8d1e 	bne	r4,zero,16bc4 <_gp+0xfffefabc>
   17190:	dc401f17 	ldw	r17,124(sp)
   17194:	40800115 	stw	r2,4(r8)
   17198:	44000015 	stw	r16,0(r8)
   1719c:	8c400044 	addi	r17,r17,1
   171a0:	d8c02015 	stw	r3,128(sp)
   171a4:	dc401f15 	stw	r17,124(sp)
   171a8:	008001c4 	movi	r2,7
   171ac:	147f7f16 	blt	r2,r17,16fac <_gp+0xfffefea4>
   171b0:	45800204 	addi	r22,r8,8
   171b4:	003eac06 	br	16c68 <_gp+0xfffefb60>
   171b8:	d9402d17 	ldw	r5,180(sp)
   171bc:	d9801e04 	addi	r6,sp,120
   171c0:	9809883a 	mov	r4,r19
   171c4:	001b0280 	call	1b028 <__ssprint_r>
   171c8:	103b501e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   171cc:	d8c02017 	ldw	r3,128(sp)
   171d0:	dc401f17 	ldw	r17,124(sp)
   171d4:	da000404 	addi	r8,sp,16
   171d8:	003e8406 	br	16bec <_gp+0xfffefae4>
   171dc:	d9402d17 	ldw	r5,180(sp)
   171e0:	d9801e04 	addi	r6,sp,120
   171e4:	9809883a 	mov	r4,r19
   171e8:	001b0280 	call	1b028 <__ssprint_r>
   171ec:	103b471e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   171f0:	d8c02017 	ldw	r3,128(sp)
   171f4:	dc401f17 	ldw	r17,124(sp)
   171f8:	dd800404 	addi	r22,sp,16
   171fc:	003e8606 	br	16c18 <_gp+0xfffefb10>
   17200:	0029883a 	mov	r20,zero
   17204:	a5000c04 	addi	r20,r20,48
   17208:	dc001dc4 	addi	r16,sp,119
   1720c:	dd001dc5 	stb	r20,119(sp)
   17210:	003f3806 	br	16ef4 <_gp+0xfffefdec>
   17214:	d9402d17 	ldw	r5,180(sp)
   17218:	d9801e04 	addi	r6,sp,120
   1721c:	9809883a 	mov	r4,r19
   17220:	001b0280 	call	1b028 <__ssprint_r>
   17224:	103b391e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17228:	d8c02017 	ldw	r3,128(sp)
   1722c:	da000404 	addi	r8,sp,16
   17230:	003c7306 	br	16400 <_gp+0xfffef2f8>
   17234:	d9003617 	ldw	r4,216(sp)
   17238:	d9403717 	ldw	r5,220(sp)
   1723c:	da003e15 	stw	r8,248(sp)
   17240:	0011bb40 	call	11bb4 <__fpclassifyd>
   17244:	da003e17 	ldw	r8,248(sp)
   17248:	1000bd1e 	bne	r2,zero,17540 <___svfprintf_internal_r+0x19d0>
   1724c:	008011c4 	movi	r2,71
   17250:	14411e0e 	bge	r2,r17,176cc <___svfprintf_internal_r+0x1b5c>
   17254:	040000b4 	movhi	r16,2
   17258:	84398704 	addi	r16,r16,-6628
   1725c:	00c000c4 	movi	r3,3
   17260:	00bfdfc4 	movi	r2,-129
   17264:	d8c02915 	stw	r3,164(sp)
   17268:	90a4703a 	and	r18,r18,r2
   1726c:	df002783 	ldbu	fp,158(sp)
   17270:	d8c02b15 	stw	r3,172(sp)
   17274:	d8002a15 	stw	zero,168(sp)
   17278:	d8003215 	stw	zero,200(sp)
   1727c:	003bfa06 	br	16268 <_gp+0xfffef160>
   17280:	9080100c 	andi	r2,r18,64
   17284:	d8002785 	stb	zero,158(sp)
   17288:	10009426 	beq	r2,zero,174dc <___svfprintf_internal_r+0x196c>
   1728c:	d9402e17 	ldw	r5,184(sp)
   17290:	d8c02a17 	ldw	r3,168(sp)
   17294:	002d883a 	mov	r22,zero
   17298:	28800104 	addi	r2,r5,4
   1729c:	2d00000b 	ldhu	r20,0(r5)
   172a0:	183ec10e 	bge	r3,zero,16da8 <_gp+0xfffefca0>
   172a4:	a586b03a 	or	r3,r20,r22
   172a8:	d8802e15 	stw	r2,184(sp)
   172ac:	183ec21e 	bne	r3,zero,16db8 <_gp+0xfffefcb0>
   172b0:	0039883a 	mov	fp,zero
   172b4:	0005883a 	mov	r2,zero
   172b8:	003db806 	br	1699c <_gp+0xfffef894>
   172bc:	d8c02e17 	ldw	r3,184(sp)
   172c0:	d9002e17 	ldw	r4,184(sp)
   172c4:	d9402e17 	ldw	r5,184(sp)
   172c8:	18c00017 	ldw	r3,0(r3)
   172cc:	21000117 	ldw	r4,4(r4)
   172d0:	29400204 	addi	r5,r5,8
   172d4:	d8c03615 	stw	r3,216(sp)
   172d8:	d9003715 	stw	r4,220(sp)
   172dc:	d9402e15 	stw	r5,184(sp)
   172e0:	003b5a06 	br	1604c <_gp+0xfffeef44>
   172e4:	9080100c 	andi	r2,r18,64
   172e8:	10010726 	beq	r2,zero,17708 <___svfprintf_internal_r+0x1b98>
   172ec:	d8802e17 	ldw	r2,184(sp)
   172f0:	1500000f 	ldh	r20,0(r2)
   172f4:	10800104 	addi	r2,r2,4
   172f8:	d8802e15 	stw	r2,184(sp)
   172fc:	a02dd7fa 	srai	r22,r20,31
   17300:	b005883a 	mov	r2,r22
   17304:	003b7d06 	br	160fc <_gp+0xfffeeff4>
   17308:	9080100c 	andi	r2,r18,64
   1730c:	10010526 	beq	r2,zero,17724 <___svfprintf_internal_r+0x1bb4>
   17310:	d8c02e17 	ldw	r3,184(sp)
   17314:	002d883a 	mov	r22,zero
   17318:	1d00000b 	ldhu	r20,0(r3)
   1731c:	18c00104 	addi	r3,r3,4
   17320:	d8c02e15 	stw	r3,184(sp)
   17324:	003ce206 	br	166b0 <_gp+0xfffef5a8>
   17328:	bc400007 	ldb	r17,0(r23)
   1732c:	003a6506 	br	15cc4 <_gp+0xfffeebbc>
   17330:	9080040c 	andi	r2,r18,16
   17334:	10010126 	beq	r2,zero,1773c <___svfprintf_internal_r+0x1bcc>
   17338:	d8c02e17 	ldw	r3,184(sp)
   1733c:	d9002f17 	ldw	r4,188(sp)
   17340:	18800017 	ldw	r2,0(r3)
   17344:	18c00104 	addi	r3,r3,4
   17348:	d8c02e15 	stw	r3,184(sp)
   1734c:	11000015 	stw	r4,0(r2)
   17350:	003a3206 	br	15c1c <_gp+0xfffeeb14>
   17354:	d9002a17 	ldw	r4,168(sp)
   17358:	d8002785 	stb	zero,158(sp)
   1735c:	203d8d16 	blt	r4,zero,16994 <_gp+0xfffef88c>
   17360:	00bfdfc4 	movi	r2,-129
   17364:	90a4703a 	and	r18,r18,r2
   17368:	003ad506 	br	15ec0 <_gp+0xfffeedb8>
   1736c:	014000b4 	movhi	r5,2
   17370:	29799484 	addi	r5,r5,-6574
   17374:	d9402c15 	stw	r5,176(sp)
   17378:	d9402c17 	ldw	r5,176(sp)
   1737c:	1c47883a 	add	r3,r3,r17
   17380:	10800044 	addi	r2,r2,1
   17384:	41400015 	stw	r5,0(r8)
   17388:	44400115 	stw	r17,4(r8)
   1738c:	d8c02015 	stw	r3,128(sp)
   17390:	d8801f15 	stw	r2,124(sp)
   17394:	010001c4 	movi	r4,7
   17398:	20bf3016 	blt	r4,r2,1705c <_gp+0xfffeff54>
   1739c:	42000204 	addi	r8,r8,8
   173a0:	003f3506 	br	17078 <_gp+0xfffeff70>
   173a4:	010000b4 	movhi	r4,2
   173a8:	21399484 	addi	r4,r4,-6574
   173ac:	d9002c15 	stw	r4,176(sp)
   173b0:	003c3c06 	br	164a4 <_gp+0xfffef39c>
   173b4:	d9402d17 	ldw	r5,180(sp)
   173b8:	d9801e04 	addi	r6,sp,120
   173bc:	9809883a 	mov	r4,r19
   173c0:	001b0280 	call	1b028 <__ssprint_r>
   173c4:	103ad11e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   173c8:	d8c02017 	ldw	r3,128(sp)
   173cc:	da000404 	addi	r8,sp,16
   173d0:	003d9306 	br	16a20 <_gp+0xfffef918>
   173d4:	d8801f17 	ldw	r2,124(sp)
   173d8:	014000b4 	movhi	r5,2
   173dc:	01000044 	movi	r4,1
   173e0:	18c00044 	addi	r3,r3,1
   173e4:	10800044 	addi	r2,r2,1
   173e8:	29799404 	addi	r5,r5,-6576
   173ec:	41000115 	stw	r4,4(r8)
   173f0:	41400015 	stw	r5,0(r8)
   173f4:	d8c02015 	stw	r3,128(sp)
   173f8:	d8801f15 	stw	r2,124(sp)
   173fc:	010001c4 	movi	r4,7
   17400:	2080b516 	blt	r4,r2,176d8 <___svfprintf_internal_r+0x1b68>
   17404:	42000204 	addi	r8,r8,8
   17408:	8800041e 	bne	r17,zero,1741c <___svfprintf_internal_r+0x18ac>
   1740c:	d8803317 	ldw	r2,204(sp)
   17410:	1000021e 	bne	r2,zero,1741c <___svfprintf_internal_r+0x18ac>
   17414:	9080004c 	andi	r2,r18,1
   17418:	103c3926 	beq	r2,zero,16500 <_gp+0xfffef3f8>
   1741c:	d9003817 	ldw	r4,224(sp)
   17420:	d8801f17 	ldw	r2,124(sp)
   17424:	d9403417 	ldw	r5,208(sp)
   17428:	20c7883a 	add	r3,r4,r3
   1742c:	10800044 	addi	r2,r2,1
   17430:	41000115 	stw	r4,4(r8)
   17434:	41400015 	stw	r5,0(r8)
   17438:	d8c02015 	stw	r3,128(sp)
   1743c:	d8801f15 	stw	r2,124(sp)
   17440:	010001c4 	movi	r4,7
   17444:	20818016 	blt	r4,r2,17a48 <___svfprintf_internal_r+0x1ed8>
   17448:	42000204 	addi	r8,r8,8
   1744c:	0463c83a 	sub	r17,zero,r17
   17450:	0440cb0e 	bge	zero,r17,17780 <___svfprintf_internal_r+0x1c10>
   17454:	05800404 	movi	r22,16
   17458:	b440e80e 	bge	r22,r17,177fc <___svfprintf_internal_r+0x1c8c>
   1745c:	014000b4 	movhi	r5,2
   17460:	29799484 	addi	r5,r5,-6574
   17464:	d9402c15 	stw	r5,176(sp)
   17468:	070001c4 	movi	fp,7
   1746c:	dd002d17 	ldw	r20,180(sp)
   17470:	00000306 	br	17480 <___svfprintf_internal_r+0x1910>
   17474:	42000204 	addi	r8,r8,8
   17478:	8c7ffc04 	addi	r17,r17,-16
   1747c:	b440e20e 	bge	r22,r17,17808 <___svfprintf_internal_r+0x1c98>
   17480:	18c00404 	addi	r3,r3,16
   17484:	10800044 	addi	r2,r2,1
   17488:	45400015 	stw	r21,0(r8)
   1748c:	45800115 	stw	r22,4(r8)
   17490:	d8c02015 	stw	r3,128(sp)
   17494:	d8801f15 	stw	r2,124(sp)
   17498:	e0bff60e 	bge	fp,r2,17474 <_gp+0xffff036c>
   1749c:	d9801e04 	addi	r6,sp,120
   174a0:	a00b883a 	mov	r5,r20
   174a4:	9809883a 	mov	r4,r19
   174a8:	001b0280 	call	1b028 <__ssprint_r>
   174ac:	103a971e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   174b0:	d8c02017 	ldw	r3,128(sp)
   174b4:	d8801f17 	ldw	r2,124(sp)
   174b8:	da000404 	addi	r8,sp,16
   174bc:	003fee06 	br	17478 <_gp+0xffff0370>
   174c0:	d9002e17 	ldw	r4,184(sp)
   174c4:	d9402a17 	ldw	r5,168(sp)
   174c8:	002d883a 	mov	r22,zero
   174cc:	20800104 	addi	r2,r4,4
   174d0:	25000017 	ldw	r20,0(r4)
   174d4:	283e7d0e 	bge	r5,zero,16ecc <_gp+0xfffefdc4>
   174d8:	003eda06 	br	17044 <_gp+0xfffeff3c>
   174dc:	d9002e17 	ldw	r4,184(sp)
   174e0:	d9402a17 	ldw	r5,168(sp)
   174e4:	002d883a 	mov	r22,zero
   174e8:	20800104 	addi	r2,r4,4
   174ec:	25000017 	ldw	r20,0(r4)
   174f0:	283e2d0e 	bge	r5,zero,16da8 <_gp+0xfffefca0>
   174f4:	003f6b06 	br	172a4 <_gp+0xffff019c>
   174f8:	d8c02e15 	stw	r3,184(sp)
   174fc:	0039883a 	mov	fp,zero
   17500:	003ed206 	br	1704c <_gp+0xfffeff44>
   17504:	bc400043 	ldbu	r17,1(r23)
   17508:	84000814 	ori	r16,r16,32
   1750c:	bdc00044 	addi	r23,r23,1
   17510:	8c403fcc 	andi	r17,r17,255
   17514:	8c40201c 	xori	r17,r17,128
   17518:	8c7fe004 	addi	r17,r17,-128
   1751c:	0039e906 	br	15cc4 <_gp+0xfffeebbc>
   17520:	d9402d17 	ldw	r5,180(sp)
   17524:	d9801e04 	addi	r6,sp,120
   17528:	9809883a 	mov	r4,r19
   1752c:	001b0280 	call	1b028 <__ssprint_r>
   17530:	103a761e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17534:	d8c02017 	ldw	r3,128(sp)
   17538:	da000404 	addi	r8,sp,16
   1753c:	003d4a06 	br	16a68 <_gp+0xfffef960>
   17540:	d9002a17 	ldw	r4,168(sp)
   17544:	05bff7c4 	movi	r22,-33
   17548:	00bfffc4 	movi	r2,-1
   1754c:	8dac703a 	and	r22,r17,r22
   17550:	20806a26 	beq	r4,r2,176fc <___svfprintf_internal_r+0x1b8c>
   17554:	008011c4 	movi	r2,71
   17558:	b0813726 	beq	r22,r2,17a38 <___svfprintf_internal_r+0x1ec8>
   1755c:	d9003717 	ldw	r4,220(sp)
   17560:	90c04014 	ori	r3,r18,256
   17564:	d8c02c15 	stw	r3,176(sp)
   17568:	20015d16 	blt	r4,zero,17ae0 <___svfprintf_internal_r+0x1f70>
   1756c:	dd003717 	ldw	r20,220(sp)
   17570:	d8002905 	stb	zero,164(sp)
   17574:	00801984 	movi	r2,102
   17578:	88814026 	beq	r17,r2,17a7c <___svfprintf_internal_r+0x1f0c>
   1757c:	00801184 	movi	r2,70
   17580:	88817126 	beq	r17,r2,17b48 <___svfprintf_internal_r+0x1fd8>
   17584:	00801144 	movi	r2,69
   17588:	b0816226 	beq	r22,r2,17b14 <___svfprintf_internal_r+0x1fa4>
   1758c:	d8c02a17 	ldw	r3,168(sp)
   17590:	d8802104 	addi	r2,sp,132
   17594:	d8800315 	stw	r2,12(sp)
   17598:	d9403617 	ldw	r5,216(sp)
   1759c:	d8802504 	addi	r2,sp,148
   175a0:	d8800215 	stw	r2,8(sp)
   175a4:	d8802604 	addi	r2,sp,152
   175a8:	d8c00015 	stw	r3,0(sp)
   175ac:	d8800115 	stw	r2,4(sp)
   175b0:	01c00084 	movi	r7,2
   175b4:	a00d883a 	mov	r6,r20
   175b8:	9809883a 	mov	r4,r19
   175bc:	d8c03d15 	stw	r3,244(sp)
   175c0:	da003e15 	stw	r8,248(sp)
   175c4:	00180540 	call	18054 <_dtoa_r>
   175c8:	1021883a 	mov	r16,r2
   175cc:	008019c4 	movi	r2,103
   175d0:	d8c03d17 	ldw	r3,244(sp)
   175d4:	da003e17 	ldw	r8,248(sp)
   175d8:	8880e726 	beq	r17,r2,17978 <___svfprintf_internal_r+0x1e08>
   175dc:	008011c4 	movi	r2,71
   175e0:	8880d426 	beq	r17,r2,17934 <___svfprintf_internal_r+0x1dc4>
   175e4:	80f9883a 	add	fp,r16,r3
   175e8:	d9003617 	ldw	r4,216(sp)
   175ec:	000d883a 	mov	r6,zero
   175f0:	000f883a 	mov	r7,zero
   175f4:	a00b883a 	mov	r5,r20
   175f8:	da003e15 	stw	r8,248(sp)
   175fc:	001306c0 	call	1306c <__eqdf2>
   17600:	da003e17 	ldw	r8,248(sp)
   17604:	1000e426 	beq	r2,zero,17998 <___svfprintf_internal_r+0x1e28>
   17608:	d8802117 	ldw	r2,132(sp)
   1760c:	1700062e 	bgeu	r2,fp,17628 <___svfprintf_internal_r+0x1ab8>
   17610:	01000c04 	movi	r4,48
   17614:	10c00044 	addi	r3,r2,1
   17618:	d8c02115 	stw	r3,132(sp)
   1761c:	11000005 	stb	r4,0(r2)
   17620:	d8802117 	ldw	r2,132(sp)
   17624:	173ffb36 	bltu	r2,fp,17614 <_gp+0xffff050c>
   17628:	1405c83a 	sub	r2,r2,r16
   1762c:	d8803315 	stw	r2,204(sp)
   17630:	008011c4 	movi	r2,71
   17634:	b080c526 	beq	r22,r2,1794c <___svfprintf_internal_r+0x1ddc>
   17638:	00801944 	movi	r2,101
   1763c:	1441d80e 	bge	r2,r17,17da0 <___svfprintf_internal_r+0x2230>
   17640:	d8c02617 	ldw	r3,152(sp)
   17644:	00801984 	movi	r2,102
   17648:	d8c03215 	stw	r3,200(sp)
   1764c:	88813426 	beq	r17,r2,17b20 <___svfprintf_internal_r+0x1fb0>
   17650:	d8c03217 	ldw	r3,200(sp)
   17654:	d9003317 	ldw	r4,204(sp)
   17658:	19012516 	blt	r3,r4,17af0 <___svfprintf_internal_r+0x1f80>
   1765c:	9480004c 	andi	r18,r18,1
   17660:	9001841e 	bne	r18,zero,17c74 <___svfprintf_internal_r+0x2104>
   17664:	1805883a 	mov	r2,r3
   17668:	1801cb16 	blt	r3,zero,17d98 <___svfprintf_internal_r+0x2228>
   1766c:	d8c03217 	ldw	r3,200(sp)
   17670:	044019c4 	movi	r17,103
   17674:	d8c02b15 	stw	r3,172(sp)
   17678:	df002907 	ldb	fp,164(sp)
   1767c:	e000a61e 	bne	fp,zero,17918 <___svfprintf_internal_r+0x1da8>
   17680:	df002783 	ldbu	fp,158(sp)
   17684:	d8802915 	stw	r2,164(sp)
   17688:	dc802c17 	ldw	r18,176(sp)
   1768c:	d8002a15 	stw	zero,168(sp)
   17690:	003af506 	br	16268 <_gp+0xfffef160>
   17694:	040000b4 	movhi	r16,2
   17698:	84398404 	addi	r16,r16,-6640
   1769c:	003a7e06 	br	16098 <_gp+0xfffeef90>
   176a0:	d9003917 	ldw	r4,228(sp)
   176a4:	04001004 	movi	r16,64
   176a8:	800b883a 	mov	r5,r16
   176ac:	00146340 	call	14634 <_malloc_r>
   176b0:	d9002d17 	ldw	r4,180(sp)
   176b4:	20800015 	stw	r2,0(r4)
   176b8:	20800415 	stw	r2,16(r4)
   176bc:	1001d026 	beq	r2,zero,17e00 <___svfprintf_internal_r+0x2290>
   176c0:	d8802d17 	ldw	r2,180(sp)
   176c4:	14000515 	stw	r16,20(r2)
   176c8:	00394406 	br	15bdc <_gp+0xfffeead4>
   176cc:	040000b4 	movhi	r16,2
   176d0:	84398604 	addi	r16,r16,-6632
   176d4:	003ee106 	br	1725c <_gp+0xffff0154>
   176d8:	d9402d17 	ldw	r5,180(sp)
   176dc:	d9801e04 	addi	r6,sp,120
   176e0:	9809883a 	mov	r4,r19
   176e4:	001b0280 	call	1b028 <__ssprint_r>
   176e8:	103a081e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   176ec:	dc402617 	ldw	r17,152(sp)
   176f0:	d8c02017 	ldw	r3,128(sp)
   176f4:	da000404 	addi	r8,sp,16
   176f8:	003f4306 	br	17408 <_gp+0xffff0300>
   176fc:	01400184 	movi	r5,6
   17700:	d9402a15 	stw	r5,168(sp)
   17704:	003f9506 	br	1755c <_gp+0xffff0454>
   17708:	d8c02e17 	ldw	r3,184(sp)
   1770c:	1d000017 	ldw	r20,0(r3)
   17710:	18c00104 	addi	r3,r3,4
   17714:	d8c02e15 	stw	r3,184(sp)
   17718:	a02dd7fa 	srai	r22,r20,31
   1771c:	b005883a 	mov	r2,r22
   17720:	003a7606 	br	160fc <_gp+0xfffeeff4>
   17724:	d9002e17 	ldw	r4,184(sp)
   17728:	002d883a 	mov	r22,zero
   1772c:	25000017 	ldw	r20,0(r4)
   17730:	21000104 	addi	r4,r4,4
   17734:	d9002e15 	stw	r4,184(sp)
   17738:	003bdd06 	br	166b0 <_gp+0xfffef5a8>
   1773c:	9480100c 	andi	r18,r18,64
   17740:	90006e26 	beq	r18,zero,178fc <___svfprintf_internal_r+0x1d8c>
   17744:	d9402e17 	ldw	r5,184(sp)
   17748:	d8c02f17 	ldw	r3,188(sp)
   1774c:	28800017 	ldw	r2,0(r5)
   17750:	29400104 	addi	r5,r5,4
   17754:	d9402e15 	stw	r5,184(sp)
   17758:	10c0000d 	sth	r3,0(r2)
   1775c:	00392f06 	br	15c1c <_gp+0xfffeeb14>
   17760:	d9402d17 	ldw	r5,180(sp)
   17764:	d9801e04 	addi	r6,sp,120
   17768:	9809883a 	mov	r4,r19
   1776c:	001b0280 	call	1b028 <__ssprint_r>
   17770:	1039e61e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17774:	d8c02017 	ldw	r3,128(sp)
   17778:	d8801f17 	ldw	r2,124(sp)
   1777c:	da000404 	addi	r8,sp,16
   17780:	d9403317 	ldw	r5,204(sp)
   17784:	10800044 	addi	r2,r2,1
   17788:	44000015 	stw	r16,0(r8)
   1778c:	28c7883a 	add	r3,r5,r3
   17790:	003b5506 	br	164e8 <_gp+0xfffef3e0>
   17794:	8009883a 	mov	r4,r16
   17798:	df003e15 	stw	fp,248(sp)
   1779c:	00152740 	call	15274 <strlen>
   177a0:	d8802b15 	stw	r2,172(sp)
   177a4:	da003e17 	ldw	r8,248(sp)
   177a8:	103c160e 	bge	r2,zero,16804 <_gp+0xfffef6fc>
   177ac:	0005883a 	mov	r2,zero
   177b0:	003c1406 	br	16804 <_gp+0xfffef6fc>
   177b4:	00bfffc4 	movi	r2,-1
   177b8:	0039d906 	br	15f20 <_gp+0xfffeee18>
   177bc:	010000b4 	movhi	r4,2
   177c0:	21399884 	addi	r4,r4,-6558
   177c4:	d9003515 	stw	r4,212(sp)
   177c8:	003ae406 	br	1635c <_gp+0xfffef254>
   177cc:	013fffc4 	movi	r4,-1
   177d0:	0039fa06 	br	15fbc <_gp+0xfffeeeb4>
   177d4:	d9402d17 	ldw	r5,180(sp)
   177d8:	d9801e04 	addi	r6,sp,120
   177dc:	9809883a 	mov	r4,r19
   177e0:	001b0280 	call	1b028 <__ssprint_r>
   177e4:	1039c91e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   177e8:	d8c02017 	ldw	r3,128(sp)
   177ec:	da000404 	addi	r8,sp,16
   177f0:	003d8406 	br	16e04 <_gp+0xfffefcfc>
   177f4:	0023883a 	mov	r17,zero
   177f8:	003d8306 	br	16e08 <_gp+0xfffefd00>
   177fc:	010000b4 	movhi	r4,2
   17800:	21399484 	addi	r4,r4,-6574
   17804:	d9002c15 	stw	r4,176(sp)
   17808:	d9002c17 	ldw	r4,176(sp)
   1780c:	1c47883a 	add	r3,r3,r17
   17810:	10800044 	addi	r2,r2,1
   17814:	41000015 	stw	r4,0(r8)
   17818:	44400115 	stw	r17,4(r8)
   1781c:	d8c02015 	stw	r3,128(sp)
   17820:	d8801f15 	stw	r2,124(sp)
   17824:	010001c4 	movi	r4,7
   17828:	20bfcd16 	blt	r4,r2,17760 <_gp+0xffff0658>
   1782c:	42000204 	addi	r8,r8,8
   17830:	003fd306 	br	17780 <_gp+0xffff0678>
   17834:	d9402d17 	ldw	r5,180(sp)
   17838:	d9801e04 	addi	r6,sp,120
   1783c:	9809883a 	mov	r4,r19
   17840:	001b0280 	call	1b028 <__ssprint_r>
   17844:	1039b11e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17848:	d8802617 	ldw	r2,152(sp)
   1784c:	d8c02017 	ldw	r3,128(sp)
   17850:	da000404 	addi	r8,sp,16
   17854:	003e1c06 	br	170c8 <_gp+0xfffeffc0>
   17858:	d8802a17 	ldw	r2,168(sp)
   1785c:	00c00184 	movi	r3,6
   17860:	1880012e 	bgeu	r3,r2,17868 <___svfprintf_internal_r+0x1cf8>
   17864:	1805883a 	mov	r2,r3
   17868:	d8802b15 	stw	r2,172(sp)
   1786c:	1000f316 	blt	r2,zero,17c3c <___svfprintf_internal_r+0x20cc>
   17870:	040000b4 	movhi	r16,2
   17874:	d8802915 	stw	r2,164(sp)
   17878:	dd002e15 	stw	r20,184(sp)
   1787c:	d8002a15 	stw	zero,168(sp)
   17880:	d8003215 	stw	zero,200(sp)
   17884:	84399204 	addi	r16,r16,-6584
   17888:	0039883a 	mov	fp,zero
   1788c:	003a7d06 	br	16284 <_gp+0xfffef17c>
   17890:	010000b4 	movhi	r4,2
   17894:	21399884 	addi	r4,r4,-6558
   17898:	d9003515 	stw	r4,212(sp)
   1789c:	003b3d06 	br	16594 <_gp+0xfffef48c>
   178a0:	d9402d17 	ldw	r5,180(sp)
   178a4:	d9801e04 	addi	r6,sp,120
   178a8:	9809883a 	mov	r4,r19
   178ac:	001b0280 	call	1b028 <__ssprint_r>
   178b0:	1039961e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   178b4:	d8802617 	ldw	r2,152(sp)
   178b8:	d9403317 	ldw	r5,204(sp)
   178bc:	d8c02017 	ldw	r3,128(sp)
   178c0:	da000404 	addi	r8,sp,16
   178c4:	2885c83a 	sub	r2,r5,r2
   178c8:	003e1006 	br	1710c <_gp+0xffff0004>
   178cc:	00800044 	movi	r2,1
   178d0:	10803fcc 	andi	r2,r2,255
   178d4:	00c00044 	movi	r3,1
   178d8:	10fa1026 	beq	r2,r3,1611c <_gp+0xfffef014>
   178dc:	00c00084 	movi	r3,2
   178e0:	10fb8226 	beq	r2,r3,166ec <_gp+0xfffef5e4>
   178e4:	003a4206 	br	161f0 <_gp+0xfffef0e8>
   178e8:	0021883a 	mov	r16,zero
   178ec:	003e0806 	br	17110 <_gp+0xffff0008>
   178f0:	07000b44 	movi	fp,45
   178f4:	df002785 	stb	fp,158(sp)
   178f8:	0039e306 	br	16088 <_gp+0xfffeef80>
   178fc:	d9002e17 	ldw	r4,184(sp)
   17900:	d9402f17 	ldw	r5,188(sp)
   17904:	20800017 	ldw	r2,0(r4)
   17908:	21000104 	addi	r4,r4,4
   1790c:	d9002e15 	stw	r4,184(sp)
   17910:	11400015 	stw	r5,0(r2)
   17914:	0038c106 	br	15c1c <_gp+0xfffeeb14>
   17918:	00c00b44 	movi	r3,45
   1791c:	d8c02785 	stb	r3,158(sp)
   17920:	d8802915 	stw	r2,164(sp)
   17924:	dc802c17 	ldw	r18,176(sp)
   17928:	d8002a15 	stw	zero,168(sp)
   1792c:	07000b44 	movi	fp,45
   17930:	003a5106 	br	16278 <_gp+0xfffef170>
   17934:	9080004c 	andi	r2,r18,1
   17938:	1000941e 	bne	r2,zero,17b8c <___svfprintf_internal_r+0x201c>
   1793c:	d8802117 	ldw	r2,132(sp)
   17940:	1405c83a 	sub	r2,r2,r16
   17944:	d8803315 	stw	r2,204(sp)
   17948:	b441151e 	bne	r22,r17,17da0 <___svfprintf_internal_r+0x2230>
   1794c:	dd802617 	ldw	r22,152(sp)
   17950:	00bfff44 	movi	r2,-3
   17954:	b0801a16 	blt	r22,r2,179c0 <___svfprintf_internal_r+0x1e50>
   17958:	d9402a17 	ldw	r5,168(sp)
   1795c:	2d801816 	blt	r5,r22,179c0 <___svfprintf_internal_r+0x1e50>
   17960:	dd803215 	stw	r22,200(sp)
   17964:	003f3a06 	br	17650 <_gp+0xffff0548>
   17968:	1025883a 	mov	r18,r2
   1796c:	0039883a 	mov	fp,zero
   17970:	00800084 	movi	r2,2
   17974:	003fd606 	br	178d0 <_gp+0xffff07c8>
   17978:	9080004c 	andi	r2,r18,1
   1797c:	103f191e 	bne	r2,zero,175e4 <_gp+0xffff04dc>
   17980:	d8802117 	ldw	r2,132(sp)
   17984:	003f2806 	br	17628 <_gp+0xffff0520>
   17988:	010000b4 	movhi	r4,2
   1798c:	21399484 	addi	r4,r4,-6574
   17990:	d9002c15 	stw	r4,176(sp)
   17994:	003c7c06 	br	16b88 <_gp+0xfffefa80>
   17998:	e005883a 	mov	r2,fp
   1799c:	003f2206 	br	17628 <_gp+0xffff0520>
   179a0:	d9002a17 	ldw	r4,168(sp)
   179a4:	df002783 	ldbu	fp,158(sp)
   179a8:	dd002e15 	stw	r20,184(sp)
   179ac:	d9002915 	stw	r4,164(sp)
   179b0:	d9002b15 	stw	r4,172(sp)
   179b4:	d8002a15 	stw	zero,168(sp)
   179b8:	d8003215 	stw	zero,200(sp)
   179bc:	003a2a06 	br	16268 <_gp+0xfffef160>
   179c0:	8c7fff84 	addi	r17,r17,-2
   179c4:	b5bfffc4 	addi	r22,r22,-1
   179c8:	dd802615 	stw	r22,152(sp)
   179cc:	dc4022c5 	stb	r17,139(sp)
   179d0:	b000c316 	blt	r22,zero,17ce0 <___svfprintf_internal_r+0x2170>
   179d4:	00800ac4 	movi	r2,43
   179d8:	d8802305 	stb	r2,140(sp)
   179dc:	00800244 	movi	r2,9
   179e0:	15806e16 	blt	r2,r22,17b9c <___svfprintf_internal_r+0x202c>
   179e4:	00800c04 	movi	r2,48
   179e8:	b5800c04 	addi	r22,r22,48
   179ec:	d8802345 	stb	r2,141(sp)
   179f0:	dd802385 	stb	r22,142(sp)
   179f4:	d88023c4 	addi	r2,sp,143
   179f8:	df0022c4 	addi	fp,sp,139
   179fc:	d8c03317 	ldw	r3,204(sp)
   17a00:	1739c83a 	sub	fp,r2,fp
   17a04:	d9003317 	ldw	r4,204(sp)
   17a08:	e0c7883a 	add	r3,fp,r3
   17a0c:	df003b15 	stw	fp,236(sp)
   17a10:	d8c02b15 	stw	r3,172(sp)
   17a14:	00800044 	movi	r2,1
   17a18:	1100b70e 	bge	r2,r4,17cf8 <___svfprintf_internal_r+0x2188>
   17a1c:	d8c02b17 	ldw	r3,172(sp)
   17a20:	18c00044 	addi	r3,r3,1
   17a24:	d8c02b15 	stw	r3,172(sp)
   17a28:	1805883a 	mov	r2,r3
   17a2c:	1800b016 	blt	r3,zero,17cf0 <___svfprintf_internal_r+0x2180>
   17a30:	d8003215 	stw	zero,200(sp)
   17a34:	003f1006 	br	17678 <_gp+0xffff0570>
   17a38:	d8802a17 	ldw	r2,168(sp)
   17a3c:	103ec71e 	bne	r2,zero,1755c <_gp+0xffff0454>
   17a40:	dc002a15 	stw	r16,168(sp)
   17a44:	003ec506 	br	1755c <_gp+0xffff0454>
   17a48:	d9402d17 	ldw	r5,180(sp)
   17a4c:	d9801e04 	addi	r6,sp,120
   17a50:	9809883a 	mov	r4,r19
   17a54:	001b0280 	call	1b028 <__ssprint_r>
   17a58:	10392c1e 	bne	r2,zero,15f0c <_gp+0xfffeee04>
   17a5c:	dc402617 	ldw	r17,152(sp)
   17a60:	d8c02017 	ldw	r3,128(sp)
   17a64:	d8801f17 	ldw	r2,124(sp)
   17a68:	da000404 	addi	r8,sp,16
   17a6c:	003e7706 	br	1744c <_gp+0xffff0344>
   17a70:	182f883a 	mov	r23,r3
   17a74:	d8002a15 	stw	zero,168(sp)
   17a78:	00389306 	br	15cc8 <_gp+0xfffeebc0>
   17a7c:	d8c02a17 	ldw	r3,168(sp)
   17a80:	d8802104 	addi	r2,sp,132
   17a84:	d8800315 	stw	r2,12(sp)
   17a88:	d9403617 	ldw	r5,216(sp)
   17a8c:	d8802504 	addi	r2,sp,148
   17a90:	d8800215 	stw	r2,8(sp)
   17a94:	d8802604 	addi	r2,sp,152
   17a98:	d8c00015 	stw	r3,0(sp)
   17a9c:	9809883a 	mov	r4,r19
   17aa0:	d8800115 	stw	r2,4(sp)
   17aa4:	01c000c4 	movi	r7,3
   17aa8:	a00d883a 	mov	r6,r20
   17aac:	da003e15 	stw	r8,248(sp)
   17ab0:	00180540 	call	18054 <_dtoa_r>
   17ab4:	d9002a17 	ldw	r4,168(sp)
   17ab8:	da003e17 	ldw	r8,248(sp)
   17abc:	1021883a 	mov	r16,r2
   17ac0:	1139883a 	add	fp,r2,r4
   17ac4:	2007883a 	mov	r3,r4
   17ac8:	81000007 	ldb	r4,0(r16)
   17acc:	00800c04 	movi	r2,48
   17ad0:	20806f26 	beq	r4,r2,17c90 <___svfprintf_internal_r+0x2120>
   17ad4:	d8c02617 	ldw	r3,152(sp)
   17ad8:	e0f9883a 	add	fp,fp,r3
   17adc:	003ec206 	br	175e8 <_gp+0xffff04e0>
   17ae0:	00c00b44 	movi	r3,45
   17ae4:	2520003c 	xorhi	r20,r4,32768
   17ae8:	d8c02905 	stb	r3,164(sp)
   17aec:	003ea106 	br	17574 <_gp+0xffff046c>
   17af0:	d8c03217 	ldw	r3,200(sp)
   17af4:	00c0890e 	bge	zero,r3,17d1c <___svfprintf_internal_r+0x21ac>
   17af8:	00800044 	movi	r2,1
   17afc:	d9003317 	ldw	r4,204(sp)
   17b00:	1105883a 	add	r2,r2,r4
   17b04:	d8802b15 	stw	r2,172(sp)
   17b08:	10005f16 	blt	r2,zero,17c88 <___svfprintf_internal_r+0x2118>
   17b0c:	044019c4 	movi	r17,103
   17b10:	003ed906 	br	17678 <_gp+0xffff0570>
   17b14:	d9002a17 	ldw	r4,168(sp)
   17b18:	20c00044 	addi	r3,r4,1
   17b1c:	003e9c06 	br	17590 <_gp+0xffff0488>
   17b20:	d9002a17 	ldw	r4,168(sp)
   17b24:	00c0680e 	bge	zero,r3,17cc8 <___svfprintf_internal_r+0x2158>
   17b28:	2000461e 	bne	r4,zero,17c44 <___svfprintf_internal_r+0x20d4>
   17b2c:	9480004c 	andi	r18,r18,1
   17b30:	9000441e 	bne	r18,zero,17c44 <___svfprintf_internal_r+0x20d4>
   17b34:	1805883a 	mov	r2,r3
   17b38:	1800a116 	blt	r3,zero,17dc0 <___svfprintf_internal_r+0x2250>
   17b3c:	d8c03217 	ldw	r3,200(sp)
   17b40:	d8c02b15 	stw	r3,172(sp)
   17b44:	003ecc06 	br	17678 <_gp+0xffff0570>
   17b48:	d9402a17 	ldw	r5,168(sp)
   17b4c:	d8802104 	addi	r2,sp,132
   17b50:	d8800315 	stw	r2,12(sp)
   17b54:	d9400015 	stw	r5,0(sp)
   17b58:	d8802504 	addi	r2,sp,148
   17b5c:	d9403617 	ldw	r5,216(sp)
   17b60:	d8800215 	stw	r2,8(sp)
   17b64:	d8802604 	addi	r2,sp,152
   17b68:	d8800115 	stw	r2,4(sp)
   17b6c:	01c000c4 	movi	r7,3
   17b70:	a00d883a 	mov	r6,r20
   17b74:	9809883a 	mov	r4,r19
   17b78:	da003e15 	stw	r8,248(sp)
   17b7c:	00180540 	call	18054 <_dtoa_r>
   17b80:	d8c02a17 	ldw	r3,168(sp)
   17b84:	da003e17 	ldw	r8,248(sp)
   17b88:	1021883a 	mov	r16,r2
   17b8c:	00801184 	movi	r2,70
   17b90:	80f9883a 	add	fp,r16,r3
   17b94:	88bfcc26 	beq	r17,r2,17ac8 <_gp+0xffff09c0>
   17b98:	003e9306 	br	175e8 <_gp+0xffff04e0>
   17b9c:	df0022c4 	addi	fp,sp,139
   17ba0:	dc002a15 	stw	r16,168(sp)
   17ba4:	9829883a 	mov	r20,r19
   17ba8:	e021883a 	mov	r16,fp
   17bac:	4027883a 	mov	r19,r8
   17bb0:	b009883a 	mov	r4,r22
   17bb4:	01400284 	movi	r5,10
   17bb8:	0011cc00 	call	11cc0 <__modsi3>
   17bbc:	10800c04 	addi	r2,r2,48
   17bc0:	843fffc4 	addi	r16,r16,-1
   17bc4:	b009883a 	mov	r4,r22
   17bc8:	01400284 	movi	r5,10
   17bcc:	80800005 	stb	r2,0(r16)
   17bd0:	0011c3c0 	call	11c3c <__divsi3>
   17bd4:	102d883a 	mov	r22,r2
   17bd8:	00800244 	movi	r2,9
   17bdc:	15bff416 	blt	r2,r22,17bb0 <_gp+0xffff0aa8>
   17be0:	9811883a 	mov	r8,r19
   17be4:	b0800c04 	addi	r2,r22,48
   17be8:	a027883a 	mov	r19,r20
   17bec:	8029883a 	mov	r20,r16
   17bf0:	a17fffc4 	addi	r5,r20,-1
   17bf4:	a0bfffc5 	stb	r2,-1(r20)
   17bf8:	dc002a17 	ldw	r16,168(sp)
   17bfc:	2f00782e 	bgeu	r5,fp,17de0 <___svfprintf_internal_r+0x2270>
   17c00:	d9c02384 	addi	r7,sp,142
   17c04:	3d0fc83a 	sub	r7,r7,r20
   17c08:	d9002344 	addi	r4,sp,141
   17c0c:	e1cf883a 	add	r7,fp,r7
   17c10:	00000106 	br	17c18 <___svfprintf_internal_r+0x20a8>
   17c14:	28800003 	ldbu	r2,0(r5)
   17c18:	20800005 	stb	r2,0(r4)
   17c1c:	21000044 	addi	r4,r4,1
   17c20:	29400044 	addi	r5,r5,1
   17c24:	21fffb1e 	bne	r4,r7,17c14 <_gp+0xffff0b0c>
   17c28:	d8802304 	addi	r2,sp,140
   17c2c:	1505c83a 	sub	r2,r2,r20
   17c30:	d8c02344 	addi	r3,sp,141
   17c34:	1885883a 	add	r2,r3,r2
   17c38:	003f7006 	br	179fc <_gp+0xffff08f4>
   17c3c:	0005883a 	mov	r2,zero
   17c40:	003f0b06 	br	17870 <_gp+0xffff0768>
   17c44:	d9002a17 	ldw	r4,168(sp)
   17c48:	d8c03217 	ldw	r3,200(sp)
   17c4c:	20800044 	addi	r2,r4,1
   17c50:	1885883a 	add	r2,r3,r2
   17c54:	d8802b15 	stw	r2,172(sp)
   17c58:	103e870e 	bge	r2,zero,17678 <_gp+0xffff0570>
   17c5c:	0005883a 	mov	r2,zero
   17c60:	003e8506 	br	17678 <_gp+0xffff0570>
   17c64:	010000b4 	movhi	r4,2
   17c68:	21399484 	addi	r4,r4,-6574
   17c6c:	d9002c15 	stw	r4,176(sp)
   17c70:	003cc506 	br	16f88 <_gp+0xfffefe80>
   17c74:	d8c03217 	ldw	r3,200(sp)
   17c78:	18c00044 	addi	r3,r3,1
   17c7c:	d8c02b15 	stw	r3,172(sp)
   17c80:	1805883a 	mov	r2,r3
   17c84:	183fa10e 	bge	r3,zero,17b0c <_gp+0xffff0a04>
   17c88:	0005883a 	mov	r2,zero
   17c8c:	003f9f06 	br	17b0c <_gp+0xffff0a04>
   17c90:	d9003617 	ldw	r4,216(sp)
   17c94:	000d883a 	mov	r6,zero
   17c98:	000f883a 	mov	r7,zero
   17c9c:	a00b883a 	mov	r5,r20
   17ca0:	d8c03d15 	stw	r3,244(sp)
   17ca4:	da003e15 	stw	r8,248(sp)
   17ca8:	001306c0 	call	1306c <__eqdf2>
   17cac:	d8c03d17 	ldw	r3,244(sp)
   17cb0:	da003e17 	ldw	r8,248(sp)
   17cb4:	103f8726 	beq	r2,zero,17ad4 <_gp+0xffff09cc>
   17cb8:	00800044 	movi	r2,1
   17cbc:	10c7c83a 	sub	r3,r2,r3
   17cc0:	d8c02615 	stw	r3,152(sp)
   17cc4:	003f8406 	br	17ad8 <_gp+0xffff09d0>
   17cc8:	20000e1e 	bne	r4,zero,17d04 <___svfprintf_internal_r+0x2194>
   17ccc:	9480004c 	andi	r18,r18,1
   17cd0:	90000c1e 	bne	r18,zero,17d04 <___svfprintf_internal_r+0x2194>
   17cd4:	00800044 	movi	r2,1
   17cd8:	d8802b15 	stw	r2,172(sp)
   17cdc:	003e6606 	br	17678 <_gp+0xffff0570>
   17ce0:	00800b44 	movi	r2,45
   17ce4:	05adc83a 	sub	r22,zero,r22
   17ce8:	d8802305 	stb	r2,140(sp)
   17cec:	003f3b06 	br	179dc <_gp+0xffff08d4>
   17cf0:	0005883a 	mov	r2,zero
   17cf4:	003f4e06 	br	17a30 <_gp+0xffff0928>
   17cf8:	90a4703a 	and	r18,r18,r2
   17cfc:	903f4a26 	beq	r18,zero,17a28 <_gp+0xffff0920>
   17d00:	003f4606 	br	17a1c <_gp+0xffff0914>
   17d04:	d8c02a17 	ldw	r3,168(sp)
   17d08:	18c00084 	addi	r3,r3,2
   17d0c:	d8c02b15 	stw	r3,172(sp)
   17d10:	1805883a 	mov	r2,r3
   17d14:	183e580e 	bge	r3,zero,17678 <_gp+0xffff0570>
   17d18:	003fd006 	br	17c5c <_gp+0xffff0b54>
   17d1c:	00800084 	movi	r2,2
   17d20:	10c5c83a 	sub	r2,r2,r3
   17d24:	003f7506 	br	17afc <_gp+0xffff09f4>
   17d28:	d9402e17 	ldw	r5,184(sp)
   17d2c:	d9002e17 	ldw	r4,184(sp)
   17d30:	bc400043 	ldbu	r17,1(r23)
   17d34:	29400017 	ldw	r5,0(r5)
   17d38:	20800104 	addi	r2,r4,4
   17d3c:	d8802e15 	stw	r2,184(sp)
   17d40:	d9402a15 	stw	r5,168(sp)
   17d44:	182f883a 	mov	r23,r3
   17d48:	283df10e 	bge	r5,zero,17510 <_gp+0xffff0408>
   17d4c:	8c403fcc 	andi	r17,r17,255
   17d50:	017fffc4 	movi	r5,-1
   17d54:	8c40201c 	xori	r17,r17,128
   17d58:	d9402a15 	stw	r5,168(sp)
   17d5c:	8c7fe004 	addi	r17,r17,-128
   17d60:	0037d806 	br	15cc4 <_gp+0xfffeebbc>
   17d64:	9080004c 	andi	r2,r18,1
   17d68:	0039883a 	mov	fp,zero
   17d6c:	10000726 	beq	r2,zero,17d8c <___svfprintf_internal_r+0x221c>
   17d70:	d8c02817 	ldw	r3,160(sp)
   17d74:	dc001dc4 	addi	r16,sp,119
   17d78:	00800c04 	movi	r2,48
   17d7c:	1c07c83a 	sub	r3,r3,r16
   17d80:	d8801dc5 	stb	r2,119(sp)
   17d84:	d8c02b15 	stw	r3,172(sp)
   17d88:	00393106 	br	16250 <_gp+0xfffef148>
   17d8c:	d8002b15 	stw	zero,172(sp)
   17d90:	dc001e04 	addi	r16,sp,120
   17d94:	00392e06 	br	16250 <_gp+0xfffef148>
   17d98:	0005883a 	mov	r2,zero
   17d9c:	003e3306 	br	1766c <_gp+0xffff0564>
   17da0:	dd802617 	ldw	r22,152(sp)
   17da4:	003f0706 	br	179c4 <_gp+0xffff08bc>
   17da8:	d8c02b03 	ldbu	r3,172(sp)
   17dac:	d8c02785 	stb	r3,158(sp)
   17db0:	003a3506 	br	16688 <_gp+0xfffef580>
   17db4:	d8c02b03 	ldbu	r3,172(sp)
   17db8:	d8c02785 	stb	r3,158(sp)
   17dbc:	003a1706 	br	1661c <_gp+0xfffef514>
   17dc0:	0005883a 	mov	r2,zero
   17dc4:	003f5d06 	br	17b3c <_gp+0xffff0a34>
   17dc8:	d8c02b03 	ldbu	r3,172(sp)
   17dcc:	d8c02785 	stb	r3,158(sp)
   17dd0:	0038f306 	br	161a0 <_gp+0xfffef098>
   17dd4:	d8c02b03 	ldbu	r3,172(sp)
   17dd8:	d8c02785 	stb	r3,158(sp)
   17ddc:	0038be06 	br	160d8 <_gp+0xfffeefd0>
   17de0:	d8802344 	addi	r2,sp,141
   17de4:	003f0506 	br	179fc <_gp+0xffff08f4>
   17de8:	d8c02b03 	ldbu	r3,172(sp)
   17dec:	d8c02785 	stb	r3,158(sp)
   17df0:	00388b06 	br	16020 <_gp+0xfffeef18>
   17df4:	d8c02b03 	ldbu	r3,172(sp)
   17df8:	d8c02785 	stb	r3,158(sp)
   17dfc:	003ad706 	br	1695c <_gp+0xfffef854>
   17e00:	d9403917 	ldw	r5,228(sp)
   17e04:	00800304 	movi	r2,12
   17e08:	28800015 	stw	r2,0(r5)
   17e0c:	00bfffc4 	movi	r2,-1
   17e10:	00384306 	br	15f20 <_gp+0xfffeee18>
   17e14:	d8c02b03 	ldbu	r3,172(sp)
   17e18:	d8c02785 	stb	r3,158(sp)
   17e1c:	003ab606 	br	168f8 <_gp+0xfffef7f0>
   17e20:	d8c02b03 	ldbu	r3,172(sp)
   17e24:	d8c02785 	stb	r3,158(sp)
   17e28:	003a8906 	br	16850 <_gp+0xfffef748>

00017e2c <quorem>:
   17e2c:	defff204 	addi	sp,sp,-56
   17e30:	ddc00b15 	stw	r23,44(sp)
   17e34:	20800417 	ldw	r2,16(r4)
   17e38:	2dc00417 	ldw	r23,16(r5)
   17e3c:	dfc00d15 	stw	ra,52(sp)
   17e40:	df000c15 	stw	fp,48(sp)
   17e44:	dd800a15 	stw	r22,40(sp)
   17e48:	dd400915 	stw	r21,36(sp)
   17e4c:	dd000815 	stw	r20,32(sp)
   17e50:	dcc00715 	stw	r19,28(sp)
   17e54:	dc800615 	stw	r18,24(sp)
   17e58:	dc400515 	stw	r17,20(sp)
   17e5c:	dc000415 	stw	r16,16(sp)
   17e60:	15c07a16 	blt	r2,r23,1804c <quorem+0x220>
   17e64:	bdffffc4 	addi	r23,r23,-1
   17e68:	bde9883a 	add	r20,r23,r23
   17e6c:	28c00504 	addi	r3,r5,20
   17e70:	a529883a 	add	r20,r20,r20
   17e74:	1d39883a 	add	fp,r3,r20
   17e78:	24c00504 	addi	r19,r4,20
   17e7c:	d9400215 	stw	r5,8(sp)
   17e80:	9d29883a 	add	r20,r19,r20
   17e84:	e1400017 	ldw	r5,0(fp)
   17e88:	d9000015 	stw	r4,0(sp)
   17e8c:	a1000017 	ldw	r4,0(r20)
   17e90:	29400044 	addi	r5,r5,1
   17e94:	d8c00115 	stw	r3,4(sp)
   17e98:	dd000315 	stw	r20,12(sp)
   17e9c:	0011d340 	call	11d34 <__udivsi3>
   17ea0:	1025883a 	mov	r18,r2
   17ea4:	10003026 	beq	r2,zero,17f68 <quorem+0x13c>
   17ea8:	dc400117 	ldw	r17,4(sp)
   17eac:	9829883a 	mov	r20,r19
   17eb0:	002d883a 	mov	r22,zero
   17eb4:	0021883a 	mov	r16,zero
   17eb8:	8d400017 	ldw	r21,0(r17)
   17ebc:	900b883a 	mov	r5,r18
   17ec0:	8c400104 	addi	r17,r17,4
   17ec4:	a93fffcc 	andi	r4,r21,65535
   17ec8:	00144f80 	call	144f8 <__mulsi3>
   17ecc:	a808d43a 	srli	r4,r21,16
   17ed0:	900b883a 	mov	r5,r18
   17ed4:	15ad883a 	add	r22,r2,r22
   17ed8:	00144f80 	call	144f8 <__mulsi3>
   17edc:	a1000017 	ldw	r4,0(r20)
   17ee0:	b00cd43a 	srli	r6,r22,16
   17ee4:	b0ffffcc 	andi	r3,r22,65535
   17ee8:	217fffcc 	andi	r5,r4,65535
   17eec:	2c21883a 	add	r16,r5,r16
   17ef0:	80c7c83a 	sub	r3,r16,r3
   17ef4:	2008d43a 	srli	r4,r4,16
   17ef8:	1185883a 	add	r2,r2,r6
   17efc:	1821d43a 	srai	r16,r3,16
   17f00:	117fffcc 	andi	r5,r2,65535
   17f04:	2149c83a 	sub	r4,r4,r5
   17f08:	2421883a 	add	r16,r4,r16
   17f0c:	8008943a 	slli	r4,r16,16
   17f10:	18ffffcc 	andi	r3,r3,65535
   17f14:	102cd43a 	srli	r22,r2,16
   17f18:	20c8b03a 	or	r4,r4,r3
   17f1c:	a1000015 	stw	r4,0(r20)
   17f20:	8021d43a 	srai	r16,r16,16
   17f24:	a5000104 	addi	r20,r20,4
   17f28:	e47fe32e 	bgeu	fp,r17,17eb8 <_gp+0xffff0db0>
   17f2c:	d8c00317 	ldw	r3,12(sp)
   17f30:	18800017 	ldw	r2,0(r3)
   17f34:	10000c1e 	bne	r2,zero,17f68 <quorem+0x13c>
   17f38:	18bfff04 	addi	r2,r3,-4
   17f3c:	9880082e 	bgeu	r19,r2,17f60 <quorem+0x134>
   17f40:	18ffff17 	ldw	r3,-4(r3)
   17f44:	18000326 	beq	r3,zero,17f54 <quorem+0x128>
   17f48:	00000506 	br	17f60 <quorem+0x134>
   17f4c:	10c00017 	ldw	r3,0(r2)
   17f50:	1800031e 	bne	r3,zero,17f60 <quorem+0x134>
   17f54:	10bfff04 	addi	r2,r2,-4
   17f58:	bdffffc4 	addi	r23,r23,-1
   17f5c:	98bffb36 	bltu	r19,r2,17f4c <_gp+0xffff0e44>
   17f60:	d8c00017 	ldw	r3,0(sp)
   17f64:	1dc00415 	stw	r23,16(r3)
   17f68:	d9400217 	ldw	r5,8(sp)
   17f6c:	d9000017 	ldw	r4,0(sp)
   17f70:	001a8180 	call	1a818 <__mcmp>
   17f74:	10002816 	blt	r2,zero,18018 <quorem+0x1ec>
   17f78:	dc400117 	ldw	r17,4(sp)
   17f7c:	94800044 	addi	r18,r18,1
   17f80:	980d883a 	mov	r6,r19
   17f84:	0007883a 	mov	r3,zero
   17f88:	31000017 	ldw	r4,0(r6)
   17f8c:	89400017 	ldw	r5,0(r17)
   17f90:	31800104 	addi	r6,r6,4
   17f94:	20bfffcc 	andi	r2,r4,65535
   17f98:	10c7883a 	add	r3,r2,r3
   17f9c:	28bfffcc 	andi	r2,r5,65535
   17fa0:	1885c83a 	sub	r2,r3,r2
   17fa4:	280ad43a 	srli	r5,r5,16
   17fa8:	2008d43a 	srli	r4,r4,16
   17fac:	1007d43a 	srai	r3,r2,16
   17fb0:	10bfffcc 	andi	r2,r2,65535
   17fb4:	2149c83a 	sub	r4,r4,r5
   17fb8:	20c9883a 	add	r4,r4,r3
   17fbc:	200a943a 	slli	r5,r4,16
   17fc0:	8c400104 	addi	r17,r17,4
   17fc4:	2007d43a 	srai	r3,r4,16
   17fc8:	2884b03a 	or	r2,r5,r2
   17fcc:	30bfff15 	stw	r2,-4(r6)
   17fd0:	e47fed2e 	bgeu	fp,r17,17f88 <_gp+0xffff0e80>
   17fd4:	bdc5883a 	add	r2,r23,r23
   17fd8:	1085883a 	add	r2,r2,r2
   17fdc:	9887883a 	add	r3,r19,r2
   17fe0:	18800017 	ldw	r2,0(r3)
   17fe4:	10000c1e 	bne	r2,zero,18018 <quorem+0x1ec>
   17fe8:	18bfff04 	addi	r2,r3,-4
   17fec:	9880082e 	bgeu	r19,r2,18010 <quorem+0x1e4>
   17ff0:	18ffff17 	ldw	r3,-4(r3)
   17ff4:	18000326 	beq	r3,zero,18004 <quorem+0x1d8>
   17ff8:	00000506 	br	18010 <quorem+0x1e4>
   17ffc:	10c00017 	ldw	r3,0(r2)
   18000:	1800031e 	bne	r3,zero,18010 <quorem+0x1e4>
   18004:	10bfff04 	addi	r2,r2,-4
   18008:	bdffffc4 	addi	r23,r23,-1
   1800c:	98bffb36 	bltu	r19,r2,17ffc <_gp+0xffff0ef4>
   18010:	d8c00017 	ldw	r3,0(sp)
   18014:	1dc00415 	stw	r23,16(r3)
   18018:	9005883a 	mov	r2,r18
   1801c:	dfc00d17 	ldw	ra,52(sp)
   18020:	df000c17 	ldw	fp,48(sp)
   18024:	ddc00b17 	ldw	r23,44(sp)
   18028:	dd800a17 	ldw	r22,40(sp)
   1802c:	dd400917 	ldw	r21,36(sp)
   18030:	dd000817 	ldw	r20,32(sp)
   18034:	dcc00717 	ldw	r19,28(sp)
   18038:	dc800617 	ldw	r18,24(sp)
   1803c:	dc400517 	ldw	r17,20(sp)
   18040:	dc000417 	ldw	r16,16(sp)
   18044:	dec00e04 	addi	sp,sp,56
   18048:	f800283a 	ret
   1804c:	0005883a 	mov	r2,zero
   18050:	003ff206 	br	1801c <_gp+0xffff0f14>

00018054 <_dtoa_r>:
   18054:	20801017 	ldw	r2,64(r4)
   18058:	deffde04 	addi	sp,sp,-136
   1805c:	df002015 	stw	fp,128(sp)
   18060:	dcc01b15 	stw	r19,108(sp)
   18064:	dc801a15 	stw	r18,104(sp)
   18068:	dc401915 	stw	r17,100(sp)
   1806c:	dc001815 	stw	r16,96(sp)
   18070:	dfc02115 	stw	ra,132(sp)
   18074:	ddc01f15 	stw	r23,124(sp)
   18078:	dd801e15 	stw	r22,120(sp)
   1807c:	dd401d15 	stw	r21,116(sp)
   18080:	dd001c15 	stw	r20,112(sp)
   18084:	d9c00315 	stw	r7,12(sp)
   18088:	2039883a 	mov	fp,r4
   1808c:	3023883a 	mov	r17,r6
   18090:	2825883a 	mov	r18,r5
   18094:	dc002417 	ldw	r16,144(sp)
   18098:	3027883a 	mov	r19,r6
   1809c:	10000826 	beq	r2,zero,180c0 <_dtoa_r+0x6c>
   180a0:	21801117 	ldw	r6,68(r4)
   180a4:	00c00044 	movi	r3,1
   180a8:	100b883a 	mov	r5,r2
   180ac:	1986983a 	sll	r3,r3,r6
   180b0:	11800115 	stw	r6,4(r2)
   180b4:	10c00215 	stw	r3,8(r2)
   180b8:	0019f3c0 	call	19f3c <_Bfree>
   180bc:	e0001015 	stw	zero,64(fp)
   180c0:	88002e16 	blt	r17,zero,1817c <_dtoa_r+0x128>
   180c4:	80000015 	stw	zero,0(r16)
   180c8:	889ffc2c 	andhi	r2,r17,32752
   180cc:	00dffc34 	movhi	r3,32752
   180d0:	10c01c26 	beq	r2,r3,18144 <_dtoa_r+0xf0>
   180d4:	000d883a 	mov	r6,zero
   180d8:	000f883a 	mov	r7,zero
   180dc:	9009883a 	mov	r4,r18
   180e0:	980b883a 	mov	r5,r19
   180e4:	001306c0 	call	1306c <__eqdf2>
   180e8:	10002b1e 	bne	r2,zero,18198 <_dtoa_r+0x144>
   180ec:	d9c02317 	ldw	r7,140(sp)
   180f0:	00800044 	movi	r2,1
   180f4:	38800015 	stw	r2,0(r7)
   180f8:	d8802517 	ldw	r2,148(sp)
   180fc:	10019e26 	beq	r2,zero,18778 <_dtoa_r+0x724>
   18100:	d8c02517 	ldw	r3,148(sp)
   18104:	008000b4 	movhi	r2,2
   18108:	10b99444 	addi	r2,r2,-6575
   1810c:	18800015 	stw	r2,0(r3)
   18110:	10bfffc4 	addi	r2,r2,-1
   18114:	dfc02117 	ldw	ra,132(sp)
   18118:	df002017 	ldw	fp,128(sp)
   1811c:	ddc01f17 	ldw	r23,124(sp)
   18120:	dd801e17 	ldw	r22,120(sp)
   18124:	dd401d17 	ldw	r21,116(sp)
   18128:	dd001c17 	ldw	r20,112(sp)
   1812c:	dcc01b17 	ldw	r19,108(sp)
   18130:	dc801a17 	ldw	r18,104(sp)
   18134:	dc401917 	ldw	r17,100(sp)
   18138:	dc001817 	ldw	r16,96(sp)
   1813c:	dec02204 	addi	sp,sp,136
   18140:	f800283a 	ret
   18144:	d8c02317 	ldw	r3,140(sp)
   18148:	0089c3c4 	movi	r2,9999
   1814c:	18800015 	stw	r2,0(r3)
   18150:	90017726 	beq	r18,zero,18730 <_dtoa_r+0x6dc>
   18154:	008000b4 	movhi	r2,2
   18158:	10b9a004 	addi	r2,r2,-6528
   1815c:	d9002517 	ldw	r4,148(sp)
   18160:	203fec26 	beq	r4,zero,18114 <_gp+0xffff100c>
   18164:	10c000c7 	ldb	r3,3(r2)
   18168:	1801781e 	bne	r3,zero,1874c <_dtoa_r+0x6f8>
   1816c:	10c000c4 	addi	r3,r2,3
   18170:	d9802517 	ldw	r6,148(sp)
   18174:	30c00015 	stw	r3,0(r6)
   18178:	003fe606 	br	18114 <_gp+0xffff100c>
   1817c:	04e00034 	movhi	r19,32768
   18180:	9cffffc4 	addi	r19,r19,-1
   18184:	00800044 	movi	r2,1
   18188:	8ce6703a 	and	r19,r17,r19
   1818c:	80800015 	stw	r2,0(r16)
   18190:	9823883a 	mov	r17,r19
   18194:	003fcc06 	br	180c8 <_gp+0xffff0fc0>
   18198:	d8800204 	addi	r2,sp,8
   1819c:	d8800015 	stw	r2,0(sp)
   181a0:	d9c00104 	addi	r7,sp,4
   181a4:	900b883a 	mov	r5,r18
   181a8:	980d883a 	mov	r6,r19
   181ac:	e009883a 	mov	r4,fp
   181b0:	8820d53a 	srli	r16,r17,20
   181b4:	001abe40 	call	1abe4 <__d2b>
   181b8:	d8800915 	stw	r2,36(sp)
   181bc:	8001651e 	bne	r16,zero,18754 <_dtoa_r+0x700>
   181c0:	dd800217 	ldw	r22,8(sp)
   181c4:	dc000117 	ldw	r16,4(sp)
   181c8:	00800804 	movi	r2,32
   181cc:	b421883a 	add	r16,r22,r16
   181d0:	80c10c84 	addi	r3,r16,1074
   181d4:	10c2d10e 	bge	r2,r3,18d1c <_dtoa_r+0xcc8>
   181d8:	00801004 	movi	r2,64
   181dc:	81010484 	addi	r4,r16,1042
   181e0:	10c7c83a 	sub	r3,r2,r3
   181e4:	9108d83a 	srl	r4,r18,r4
   181e8:	88e2983a 	sll	r17,r17,r3
   181ec:	2448b03a 	or	r4,r4,r17
   181f0:	001d9e80 	call	1d9e8 <__floatunsidf>
   181f4:	017f8434 	movhi	r5,65040
   181f8:	01800044 	movi	r6,1
   181fc:	1009883a 	mov	r4,r2
   18200:	194b883a 	add	r5,r3,r5
   18204:	843fffc4 	addi	r16,r16,-1
   18208:	d9801115 	stw	r6,68(sp)
   1820c:	000d883a 	mov	r6,zero
   18210:	01cffe34 	movhi	r7,16376
   18214:	0013a3c0 	call	13a3c <__subdf3>
   18218:	0198dbf4 	movhi	r6,25455
   1821c:	01cff4f4 	movhi	r7,16339
   18220:	3190d844 	addi	r6,r6,17249
   18224:	39e1e9c4 	addi	r7,r7,-30809
   18228:	1009883a 	mov	r4,r2
   1822c:	180b883a 	mov	r5,r3
   18230:	00131d00 	call	131d0 <__muldf3>
   18234:	01a2d874 	movhi	r6,35681
   18238:	01cff1f4 	movhi	r7,16327
   1823c:	31b22cc4 	addi	r6,r6,-14157
   18240:	39e28a04 	addi	r7,r7,-30168
   18244:	180b883a 	mov	r5,r3
   18248:	1009883a 	mov	r4,r2
   1824c:	0011df00 	call	11df0 <__adddf3>
   18250:	8009883a 	mov	r4,r16
   18254:	1029883a 	mov	r20,r2
   18258:	1823883a 	mov	r17,r3
   1825c:	00143b80 	call	143b8 <__floatsidf>
   18260:	019427f4 	movhi	r6,20639
   18264:	01cff4f4 	movhi	r7,16339
   18268:	319e7ec4 	addi	r6,r6,31227
   1826c:	39d104c4 	addi	r7,r7,17427
   18270:	1009883a 	mov	r4,r2
   18274:	180b883a 	mov	r5,r3
   18278:	00131d00 	call	131d0 <__muldf3>
   1827c:	100d883a 	mov	r6,r2
   18280:	180f883a 	mov	r7,r3
   18284:	a009883a 	mov	r4,r20
   18288:	880b883a 	mov	r5,r17
   1828c:	0011df00 	call	11df0 <__adddf3>
   18290:	1009883a 	mov	r4,r2
   18294:	180b883a 	mov	r5,r3
   18298:	1029883a 	mov	r20,r2
   1829c:	1823883a 	mov	r17,r3
   182a0:	00143380 	call	14338 <__fixdfsi>
   182a4:	000d883a 	mov	r6,zero
   182a8:	000f883a 	mov	r7,zero
   182ac:	a009883a 	mov	r4,r20
   182b0:	880b883a 	mov	r5,r17
   182b4:	d8800515 	stw	r2,20(sp)
   182b8:	001d8f40 	call	1d8f4 <__ledf2>
   182bc:	10028716 	blt	r2,zero,18cdc <_dtoa_r+0xc88>
   182c0:	d8c00517 	ldw	r3,20(sp)
   182c4:	00800584 	movi	r2,22
   182c8:	10c27536 	bltu	r2,r3,18ca0 <_dtoa_r+0xc4c>
   182cc:	180490fa 	slli	r2,r3,3
   182d0:	00c000b4 	movhi	r3,2
   182d4:	18f9bb04 	addi	r3,r3,-6420
   182d8:	1885883a 	add	r2,r3,r2
   182dc:	11000017 	ldw	r4,0(r2)
   182e0:	11400117 	ldw	r5,4(r2)
   182e4:	900d883a 	mov	r6,r18
   182e8:	980f883a 	mov	r7,r19
   182ec:	00130f40 	call	130f4 <__gedf2>
   182f0:	00828d0e 	bge	zero,r2,18d28 <_dtoa_r+0xcd4>
   182f4:	d9000517 	ldw	r4,20(sp)
   182f8:	d8000e15 	stw	zero,56(sp)
   182fc:	213fffc4 	addi	r4,r4,-1
   18300:	d9000515 	stw	r4,20(sp)
   18304:	b42dc83a 	sub	r22,r22,r16
   18308:	b5bfffc4 	addi	r22,r22,-1
   1830c:	b0026f16 	blt	r22,zero,18ccc <_dtoa_r+0xc78>
   18310:	d8000815 	stw	zero,32(sp)
   18314:	d9c00517 	ldw	r7,20(sp)
   18318:	38026416 	blt	r7,zero,18cac <_dtoa_r+0xc58>
   1831c:	b1ed883a 	add	r22,r22,r7
   18320:	d9c00d15 	stw	r7,52(sp)
   18324:	d8000a15 	stw	zero,40(sp)
   18328:	d9800317 	ldw	r6,12(sp)
   1832c:	00800244 	movi	r2,9
   18330:	11811436 	bltu	r2,r6,18784 <_dtoa_r+0x730>
   18334:	00800144 	movi	r2,5
   18338:	1184e10e 	bge	r2,r6,196c0 <_dtoa_r+0x166c>
   1833c:	31bfff04 	addi	r6,r6,-4
   18340:	d9800315 	stw	r6,12(sp)
   18344:	0023883a 	mov	r17,zero
   18348:	d9800317 	ldw	r6,12(sp)
   1834c:	008000c4 	movi	r2,3
   18350:	30836726 	beq	r6,r2,190f0 <_dtoa_r+0x109c>
   18354:	1183410e 	bge	r2,r6,1905c <_dtoa_r+0x1008>
   18358:	d9c00317 	ldw	r7,12(sp)
   1835c:	00800104 	movi	r2,4
   18360:	38827c26 	beq	r7,r2,18d54 <_dtoa_r+0xd00>
   18364:	00800144 	movi	r2,5
   18368:	3884c41e 	bne	r7,r2,1967c <_dtoa_r+0x1628>
   1836c:	00800044 	movi	r2,1
   18370:	d8800b15 	stw	r2,44(sp)
   18374:	d8c00517 	ldw	r3,20(sp)
   18378:	d9002217 	ldw	r4,136(sp)
   1837c:	1907883a 	add	r3,r3,r4
   18380:	19800044 	addi	r6,r3,1
   18384:	d8c00c15 	stw	r3,48(sp)
   18388:	d9800615 	stw	r6,24(sp)
   1838c:	0183a40e 	bge	zero,r6,19220 <_dtoa_r+0x11cc>
   18390:	d9800617 	ldw	r6,24(sp)
   18394:	3021883a 	mov	r16,r6
   18398:	e0001115 	stw	zero,68(fp)
   1839c:	008005c4 	movi	r2,23
   183a0:	1184c92e 	bgeu	r2,r6,196c8 <_dtoa_r+0x1674>
   183a4:	00c00044 	movi	r3,1
   183a8:	00800104 	movi	r2,4
   183ac:	1085883a 	add	r2,r2,r2
   183b0:	11000504 	addi	r4,r2,20
   183b4:	180b883a 	mov	r5,r3
   183b8:	18c00044 	addi	r3,r3,1
   183bc:	313ffb2e 	bgeu	r6,r4,183ac <_gp+0xffff12a4>
   183c0:	e1401115 	stw	r5,68(fp)
   183c4:	e009883a 	mov	r4,fp
   183c8:	0019e940 	call	19e94 <_Balloc>
   183cc:	d8800715 	stw	r2,28(sp)
   183d0:	e0801015 	stw	r2,64(fp)
   183d4:	00800384 	movi	r2,14
   183d8:	1400f736 	bltu	r2,r16,187b8 <_dtoa_r+0x764>
   183dc:	8800f626 	beq	r17,zero,187b8 <_dtoa_r+0x764>
   183e0:	d9c00517 	ldw	r7,20(sp)
   183e4:	01c39a0e 	bge	zero,r7,19250 <_dtoa_r+0x11fc>
   183e8:	388003cc 	andi	r2,r7,15
   183ec:	100490fa 	slli	r2,r2,3
   183f0:	382bd13a 	srai	r21,r7,4
   183f4:	00c000b4 	movhi	r3,2
   183f8:	18f9bb04 	addi	r3,r3,-6420
   183fc:	1885883a 	add	r2,r3,r2
   18400:	a8c0040c 	andi	r3,r21,16
   18404:	12400017 	ldw	r9,0(r2)
   18408:	12000117 	ldw	r8,4(r2)
   1840c:	18037926 	beq	r3,zero,191f4 <_dtoa_r+0x11a0>
   18410:	008000b4 	movhi	r2,2
   18414:	10b9b104 	addi	r2,r2,-6460
   18418:	11800817 	ldw	r6,32(r2)
   1841c:	11c00917 	ldw	r7,36(r2)
   18420:	9009883a 	mov	r4,r18
   18424:	980b883a 	mov	r5,r19
   18428:	da001715 	stw	r8,92(sp)
   1842c:	da401615 	stw	r9,88(sp)
   18430:	001269c0 	call	1269c <__divdf3>
   18434:	da001717 	ldw	r8,92(sp)
   18438:	da401617 	ldw	r9,88(sp)
   1843c:	ad4003cc 	andi	r21,r21,15
   18440:	040000c4 	movi	r16,3
   18444:	1023883a 	mov	r17,r2
   18448:	1829883a 	mov	r20,r3
   1844c:	a8001126 	beq	r21,zero,18494 <_dtoa_r+0x440>
   18450:	05c000b4 	movhi	r23,2
   18454:	bdf9b104 	addi	r23,r23,-6460
   18458:	4805883a 	mov	r2,r9
   1845c:	4007883a 	mov	r3,r8
   18460:	a980004c 	andi	r6,r21,1
   18464:	1009883a 	mov	r4,r2
   18468:	a82bd07a 	srai	r21,r21,1
   1846c:	180b883a 	mov	r5,r3
   18470:	30000426 	beq	r6,zero,18484 <_dtoa_r+0x430>
   18474:	b9800017 	ldw	r6,0(r23)
   18478:	b9c00117 	ldw	r7,4(r23)
   1847c:	84000044 	addi	r16,r16,1
   18480:	00131d00 	call	131d0 <__muldf3>
   18484:	bdc00204 	addi	r23,r23,8
   18488:	a83ff51e 	bne	r21,zero,18460 <_gp+0xffff1358>
   1848c:	1013883a 	mov	r9,r2
   18490:	1811883a 	mov	r8,r3
   18494:	480d883a 	mov	r6,r9
   18498:	400f883a 	mov	r7,r8
   1849c:	8809883a 	mov	r4,r17
   184a0:	a00b883a 	mov	r5,r20
   184a4:	001269c0 	call	1269c <__divdf3>
   184a8:	d8800f15 	stw	r2,60(sp)
   184ac:	d8c01015 	stw	r3,64(sp)
   184b0:	d8c00e17 	ldw	r3,56(sp)
   184b4:	18000626 	beq	r3,zero,184d0 <_dtoa_r+0x47c>
   184b8:	d9000f17 	ldw	r4,60(sp)
   184bc:	d9401017 	ldw	r5,64(sp)
   184c0:	000d883a 	mov	r6,zero
   184c4:	01cffc34 	movhi	r7,16368
   184c8:	001d8f40 	call	1d8f4 <__ledf2>
   184cc:	10040b16 	blt	r2,zero,194fc <_dtoa_r+0x14a8>
   184d0:	8009883a 	mov	r4,r16
   184d4:	00143b80 	call	143b8 <__floatsidf>
   184d8:	d9800f17 	ldw	r6,60(sp)
   184dc:	d9c01017 	ldw	r7,64(sp)
   184e0:	1009883a 	mov	r4,r2
   184e4:	180b883a 	mov	r5,r3
   184e8:	00131d00 	call	131d0 <__muldf3>
   184ec:	000d883a 	mov	r6,zero
   184f0:	01d00734 	movhi	r7,16412
   184f4:	1009883a 	mov	r4,r2
   184f8:	180b883a 	mov	r5,r3
   184fc:	0011df00 	call	11df0 <__adddf3>
   18500:	1021883a 	mov	r16,r2
   18504:	d8800617 	ldw	r2,24(sp)
   18508:	047f3034 	movhi	r17,64704
   1850c:	1c63883a 	add	r17,r3,r17
   18510:	10031826 	beq	r2,zero,19174 <_dtoa_r+0x1120>
   18514:	d8c00517 	ldw	r3,20(sp)
   18518:	db000617 	ldw	r12,24(sp)
   1851c:	d8c01315 	stw	r3,76(sp)
   18520:	d9000b17 	ldw	r4,44(sp)
   18524:	20038f26 	beq	r4,zero,19364 <_dtoa_r+0x1310>
   18528:	60bfffc4 	addi	r2,r12,-1
   1852c:	100490fa 	slli	r2,r2,3
   18530:	00c000b4 	movhi	r3,2
   18534:	18f9bb04 	addi	r3,r3,-6420
   18538:	1885883a 	add	r2,r3,r2
   1853c:	11800017 	ldw	r6,0(r2)
   18540:	11c00117 	ldw	r7,4(r2)
   18544:	d8800717 	ldw	r2,28(sp)
   18548:	0009883a 	mov	r4,zero
   1854c:	014ff834 	movhi	r5,16352
   18550:	db001615 	stw	r12,88(sp)
   18554:	15c00044 	addi	r23,r2,1
   18558:	001269c0 	call	1269c <__divdf3>
   1855c:	800d883a 	mov	r6,r16
   18560:	880f883a 	mov	r7,r17
   18564:	1009883a 	mov	r4,r2
   18568:	180b883a 	mov	r5,r3
   1856c:	0013a3c0 	call	13a3c <__subdf3>
   18570:	d9401017 	ldw	r5,64(sp)
   18574:	d9000f17 	ldw	r4,60(sp)
   18578:	102b883a 	mov	r21,r2
   1857c:	d8c01215 	stw	r3,72(sp)
   18580:	00143380 	call	14338 <__fixdfsi>
   18584:	1009883a 	mov	r4,r2
   18588:	1029883a 	mov	r20,r2
   1858c:	00143b80 	call	143b8 <__floatsidf>
   18590:	d9000f17 	ldw	r4,60(sp)
   18594:	d9401017 	ldw	r5,64(sp)
   18598:	100d883a 	mov	r6,r2
   1859c:	180f883a 	mov	r7,r3
   185a0:	0013a3c0 	call	13a3c <__subdf3>
   185a4:	1823883a 	mov	r17,r3
   185a8:	d8c00717 	ldw	r3,28(sp)
   185ac:	d9401217 	ldw	r5,72(sp)
   185b0:	a2000c04 	addi	r8,r20,48
   185b4:	1021883a 	mov	r16,r2
   185b8:	1a000005 	stb	r8,0(r3)
   185bc:	800d883a 	mov	r6,r16
   185c0:	880f883a 	mov	r7,r17
   185c4:	a809883a 	mov	r4,r21
   185c8:	4029883a 	mov	r20,r8
   185cc:	00130f40 	call	130f4 <__gedf2>
   185d0:	00841d16 	blt	zero,r2,19648 <_dtoa_r+0x15f4>
   185d4:	800d883a 	mov	r6,r16
   185d8:	880f883a 	mov	r7,r17
   185dc:	0009883a 	mov	r4,zero
   185e0:	014ffc34 	movhi	r5,16368
   185e4:	0013a3c0 	call	13a3c <__subdf3>
   185e8:	d9401217 	ldw	r5,72(sp)
   185ec:	100d883a 	mov	r6,r2
   185f0:	180f883a 	mov	r7,r3
   185f4:	a809883a 	mov	r4,r21
   185f8:	00130f40 	call	130f4 <__gedf2>
   185fc:	db001617 	ldw	r12,88(sp)
   18600:	00840e16 	blt	zero,r2,1963c <_dtoa_r+0x15e8>
   18604:	00800044 	movi	r2,1
   18608:	13006b0e 	bge	r2,r12,187b8 <_dtoa_r+0x764>
   1860c:	d9000717 	ldw	r4,28(sp)
   18610:	dd800f15 	stw	r22,60(sp)
   18614:	dcc01015 	stw	r19,64(sp)
   18618:	2319883a 	add	r12,r4,r12
   1861c:	dcc01217 	ldw	r19,72(sp)
   18620:	602d883a 	mov	r22,r12
   18624:	dc801215 	stw	r18,72(sp)
   18628:	b825883a 	mov	r18,r23
   1862c:	00000906 	br	18654 <_dtoa_r+0x600>
   18630:	0013a3c0 	call	13a3c <__subdf3>
   18634:	a80d883a 	mov	r6,r21
   18638:	980f883a 	mov	r7,r19
   1863c:	1009883a 	mov	r4,r2
   18640:	180b883a 	mov	r5,r3
   18644:	001d8f40 	call	1d8f4 <__ledf2>
   18648:	1003e816 	blt	r2,zero,195ec <_dtoa_r+0x1598>
   1864c:	b825883a 	mov	r18,r23
   18650:	bd83e926 	beq	r23,r22,195f8 <_dtoa_r+0x15a4>
   18654:	a809883a 	mov	r4,r21
   18658:	980b883a 	mov	r5,r19
   1865c:	000d883a 	mov	r6,zero
   18660:	01d00934 	movhi	r7,16420
   18664:	00131d00 	call	131d0 <__muldf3>
   18668:	000d883a 	mov	r6,zero
   1866c:	01d00934 	movhi	r7,16420
   18670:	8009883a 	mov	r4,r16
   18674:	880b883a 	mov	r5,r17
   18678:	102b883a 	mov	r21,r2
   1867c:	1827883a 	mov	r19,r3
   18680:	00131d00 	call	131d0 <__muldf3>
   18684:	180b883a 	mov	r5,r3
   18688:	1009883a 	mov	r4,r2
   1868c:	1821883a 	mov	r16,r3
   18690:	1023883a 	mov	r17,r2
   18694:	00143380 	call	14338 <__fixdfsi>
   18698:	1009883a 	mov	r4,r2
   1869c:	1029883a 	mov	r20,r2
   186a0:	00143b80 	call	143b8 <__floatsidf>
   186a4:	8809883a 	mov	r4,r17
   186a8:	800b883a 	mov	r5,r16
   186ac:	100d883a 	mov	r6,r2
   186b0:	180f883a 	mov	r7,r3
   186b4:	0013a3c0 	call	13a3c <__subdf3>
   186b8:	a5000c04 	addi	r20,r20,48
   186bc:	a80d883a 	mov	r6,r21
   186c0:	980f883a 	mov	r7,r19
   186c4:	1009883a 	mov	r4,r2
   186c8:	180b883a 	mov	r5,r3
   186cc:	95000005 	stb	r20,0(r18)
   186d0:	1021883a 	mov	r16,r2
   186d4:	1823883a 	mov	r17,r3
   186d8:	001d8f40 	call	1d8f4 <__ledf2>
   186dc:	bdc00044 	addi	r23,r23,1
   186e0:	800d883a 	mov	r6,r16
   186e4:	880f883a 	mov	r7,r17
   186e8:	0009883a 	mov	r4,zero
   186ec:	014ffc34 	movhi	r5,16368
   186f0:	103fcf0e 	bge	r2,zero,18630 <_gp+0xffff1528>
   186f4:	d8c01317 	ldw	r3,76(sp)
   186f8:	d8c00515 	stw	r3,20(sp)
   186fc:	d9400917 	ldw	r5,36(sp)
   18700:	e009883a 	mov	r4,fp
   18704:	0019f3c0 	call	19f3c <_Bfree>
   18708:	d9000517 	ldw	r4,20(sp)
   1870c:	d9802317 	ldw	r6,140(sp)
   18710:	d9c02517 	ldw	r7,148(sp)
   18714:	b8000005 	stb	zero,0(r23)
   18718:	20800044 	addi	r2,r4,1
   1871c:	30800015 	stw	r2,0(r6)
   18720:	3802aa26 	beq	r7,zero,191cc <_dtoa_r+0x1178>
   18724:	3dc00015 	stw	r23,0(r7)
   18728:	d8800717 	ldw	r2,28(sp)
   1872c:	003e7906 	br	18114 <_gp+0xffff100c>
   18730:	00800434 	movhi	r2,16
   18734:	10bfffc4 	addi	r2,r2,-1
   18738:	88a2703a 	and	r17,r17,r2
   1873c:	883e851e 	bne	r17,zero,18154 <_gp+0xffff104c>
   18740:	008000b4 	movhi	r2,2
   18744:	10b99d04 	addi	r2,r2,-6540
   18748:	003e8406 	br	1815c <_gp+0xffff1054>
   1874c:	10c00204 	addi	r3,r2,8
   18750:	003e8706 	br	18170 <_gp+0xffff1068>
   18754:	01400434 	movhi	r5,16
   18758:	297fffc4 	addi	r5,r5,-1
   1875c:	994a703a 	and	r5,r19,r5
   18760:	9009883a 	mov	r4,r18
   18764:	843f0044 	addi	r16,r16,-1023
   18768:	294ffc34 	orhi	r5,r5,16368
   1876c:	dd800217 	ldw	r22,8(sp)
   18770:	d8001115 	stw	zero,68(sp)
   18774:	003ea506 	br	1820c <_gp+0xffff1104>
   18778:	008000b4 	movhi	r2,2
   1877c:	10b99404 	addi	r2,r2,-6576
   18780:	003e6406 	br	18114 <_gp+0xffff100c>
   18784:	e0001115 	stw	zero,68(fp)
   18788:	000b883a 	mov	r5,zero
   1878c:	e009883a 	mov	r4,fp
   18790:	0019e940 	call	19e94 <_Balloc>
   18794:	01bfffc4 	movi	r6,-1
   18798:	01c00044 	movi	r7,1
   1879c:	d8800715 	stw	r2,28(sp)
   187a0:	d9800c15 	stw	r6,48(sp)
   187a4:	e0801015 	stw	r2,64(fp)
   187a8:	d8000315 	stw	zero,12(sp)
   187ac:	d9c00b15 	stw	r7,44(sp)
   187b0:	d9800615 	stw	r6,24(sp)
   187b4:	d8002215 	stw	zero,136(sp)
   187b8:	d8800117 	ldw	r2,4(sp)
   187bc:	10008916 	blt	r2,zero,189e4 <_dtoa_r+0x990>
   187c0:	d9000517 	ldw	r4,20(sp)
   187c4:	00c00384 	movi	r3,14
   187c8:	19008616 	blt	r3,r4,189e4 <_dtoa_r+0x990>
   187cc:	200490fa 	slli	r2,r4,3
   187d0:	00c000b4 	movhi	r3,2
   187d4:	d9802217 	ldw	r6,136(sp)
   187d8:	18f9bb04 	addi	r3,r3,-6420
   187dc:	1885883a 	add	r2,r3,r2
   187e0:	14000017 	ldw	r16,0(r2)
   187e4:	14400117 	ldw	r17,4(r2)
   187e8:	30016316 	blt	r6,zero,18d78 <_dtoa_r+0xd24>
   187ec:	800d883a 	mov	r6,r16
   187f0:	880f883a 	mov	r7,r17
   187f4:	9009883a 	mov	r4,r18
   187f8:	980b883a 	mov	r5,r19
   187fc:	001269c0 	call	1269c <__divdf3>
   18800:	180b883a 	mov	r5,r3
   18804:	1009883a 	mov	r4,r2
   18808:	00143380 	call	14338 <__fixdfsi>
   1880c:	1009883a 	mov	r4,r2
   18810:	102b883a 	mov	r21,r2
   18814:	00143b80 	call	143b8 <__floatsidf>
   18818:	800d883a 	mov	r6,r16
   1881c:	880f883a 	mov	r7,r17
   18820:	1009883a 	mov	r4,r2
   18824:	180b883a 	mov	r5,r3
   18828:	00131d00 	call	131d0 <__muldf3>
   1882c:	100d883a 	mov	r6,r2
   18830:	180f883a 	mov	r7,r3
   18834:	9009883a 	mov	r4,r18
   18838:	980b883a 	mov	r5,r19
   1883c:	0013a3c0 	call	13a3c <__subdf3>
   18840:	d9c00717 	ldw	r7,28(sp)
   18844:	1009883a 	mov	r4,r2
   18848:	a8800c04 	addi	r2,r21,48
   1884c:	38800005 	stb	r2,0(r7)
   18850:	3dc00044 	addi	r23,r7,1
   18854:	d9c00617 	ldw	r7,24(sp)
   18858:	01800044 	movi	r6,1
   1885c:	180b883a 	mov	r5,r3
   18860:	2005883a 	mov	r2,r4
   18864:	39803826 	beq	r7,r6,18948 <_dtoa_r+0x8f4>
   18868:	000d883a 	mov	r6,zero
   1886c:	01d00934 	movhi	r7,16420
   18870:	00131d00 	call	131d0 <__muldf3>
   18874:	000d883a 	mov	r6,zero
   18878:	000f883a 	mov	r7,zero
   1887c:	1009883a 	mov	r4,r2
   18880:	180b883a 	mov	r5,r3
   18884:	1025883a 	mov	r18,r2
   18888:	1827883a 	mov	r19,r3
   1888c:	001306c0 	call	1306c <__eqdf2>
   18890:	103f9a26 	beq	r2,zero,186fc <_gp+0xffff15f4>
   18894:	d9c00617 	ldw	r7,24(sp)
   18898:	d8c00717 	ldw	r3,28(sp)
   1889c:	b829883a 	mov	r20,r23
   188a0:	38bfffc4 	addi	r2,r7,-1
   188a4:	18ad883a 	add	r22,r3,r2
   188a8:	00000a06 	br	188d4 <_dtoa_r+0x880>
   188ac:	00131d00 	call	131d0 <__muldf3>
   188b0:	000d883a 	mov	r6,zero
   188b4:	000f883a 	mov	r7,zero
   188b8:	1009883a 	mov	r4,r2
   188bc:	180b883a 	mov	r5,r3
   188c0:	1025883a 	mov	r18,r2
   188c4:	1827883a 	mov	r19,r3
   188c8:	b829883a 	mov	r20,r23
   188cc:	001306c0 	call	1306c <__eqdf2>
   188d0:	103f8a26 	beq	r2,zero,186fc <_gp+0xffff15f4>
   188d4:	800d883a 	mov	r6,r16
   188d8:	880f883a 	mov	r7,r17
   188dc:	9009883a 	mov	r4,r18
   188e0:	980b883a 	mov	r5,r19
   188e4:	001269c0 	call	1269c <__divdf3>
   188e8:	180b883a 	mov	r5,r3
   188ec:	1009883a 	mov	r4,r2
   188f0:	00143380 	call	14338 <__fixdfsi>
   188f4:	1009883a 	mov	r4,r2
   188f8:	102b883a 	mov	r21,r2
   188fc:	00143b80 	call	143b8 <__floatsidf>
   18900:	800d883a 	mov	r6,r16
   18904:	880f883a 	mov	r7,r17
   18908:	1009883a 	mov	r4,r2
   1890c:	180b883a 	mov	r5,r3
   18910:	00131d00 	call	131d0 <__muldf3>
   18914:	100d883a 	mov	r6,r2
   18918:	180f883a 	mov	r7,r3
   1891c:	9009883a 	mov	r4,r18
   18920:	980b883a 	mov	r5,r19
   18924:	0013a3c0 	call	13a3c <__subdf3>
   18928:	aa000c04 	addi	r8,r21,48
   1892c:	a2000005 	stb	r8,0(r20)
   18930:	000d883a 	mov	r6,zero
   18934:	01d00934 	movhi	r7,16420
   18938:	1009883a 	mov	r4,r2
   1893c:	180b883a 	mov	r5,r3
   18940:	a5c00044 	addi	r23,r20,1
   18944:	b53fd91e 	bne	r22,r20,188ac <_gp+0xffff17a4>
   18948:	100d883a 	mov	r6,r2
   1894c:	180f883a 	mov	r7,r3
   18950:	1009883a 	mov	r4,r2
   18954:	180b883a 	mov	r5,r3
   18958:	0011df00 	call	11df0 <__adddf3>
   1895c:	100d883a 	mov	r6,r2
   18960:	180f883a 	mov	r7,r3
   18964:	8009883a 	mov	r4,r16
   18968:	880b883a 	mov	r5,r17
   1896c:	1027883a 	mov	r19,r2
   18970:	1825883a 	mov	r18,r3
   18974:	001d8f40 	call	1d8f4 <__ledf2>
   18978:	10000816 	blt	r2,zero,1899c <_dtoa_r+0x948>
   1897c:	980d883a 	mov	r6,r19
   18980:	900f883a 	mov	r7,r18
   18984:	8009883a 	mov	r4,r16
   18988:	880b883a 	mov	r5,r17
   1898c:	001306c0 	call	1306c <__eqdf2>
   18990:	103f5a1e 	bne	r2,zero,186fc <_gp+0xffff15f4>
   18994:	ad40004c 	andi	r21,r21,1
   18998:	a83f5826 	beq	r21,zero,186fc <_gp+0xffff15f4>
   1899c:	bd3fffc3 	ldbu	r20,-1(r23)
   189a0:	b8bfffc4 	addi	r2,r23,-1
   189a4:	1007883a 	mov	r3,r2
   189a8:	01400e44 	movi	r5,57
   189ac:	d9800717 	ldw	r6,28(sp)
   189b0:	00000506 	br	189c8 <_dtoa_r+0x974>
   189b4:	18ffffc4 	addi	r3,r3,-1
   189b8:	11824726 	beq	r2,r6,192d8 <_dtoa_r+0x1284>
   189bc:	1d000003 	ldbu	r20,0(r3)
   189c0:	102f883a 	mov	r23,r2
   189c4:	10bfffc4 	addi	r2,r2,-1
   189c8:	a1003fcc 	andi	r4,r20,255
   189cc:	2100201c 	xori	r4,r4,128
   189d0:	213fe004 	addi	r4,r4,-128
   189d4:	217ff726 	beq	r4,r5,189b4 <_gp+0xffff18ac>
   189d8:	a2000044 	addi	r8,r20,1
   189dc:	12000005 	stb	r8,0(r2)
   189e0:	003f4606 	br	186fc <_gp+0xffff15f4>
   189e4:	d9000b17 	ldw	r4,44(sp)
   189e8:	2000c826 	beq	r4,zero,18d0c <_dtoa_r+0xcb8>
   189ec:	d9800317 	ldw	r6,12(sp)
   189f0:	00c00044 	movi	r3,1
   189f4:	1980f90e 	bge	r3,r6,18ddc <_dtoa_r+0xd88>
   189f8:	d8800617 	ldw	r2,24(sp)
   189fc:	d8c00a17 	ldw	r3,40(sp)
   18a00:	157fffc4 	addi	r21,r2,-1
   18a04:	1d41f316 	blt	r3,r21,191d4 <_dtoa_r+0x1180>
   18a08:	1d6bc83a 	sub	r21,r3,r21
   18a0c:	d9c00617 	ldw	r7,24(sp)
   18a10:	3802aa16 	blt	r7,zero,194bc <_dtoa_r+0x1468>
   18a14:	dd000817 	ldw	r20,32(sp)
   18a18:	d8800617 	ldw	r2,24(sp)
   18a1c:	d8c00817 	ldw	r3,32(sp)
   18a20:	01400044 	movi	r5,1
   18a24:	e009883a 	mov	r4,fp
   18a28:	1887883a 	add	r3,r3,r2
   18a2c:	d8c00815 	stw	r3,32(sp)
   18a30:	b0ad883a 	add	r22,r22,r2
   18a34:	001a2c80 	call	1a2c8 <__i2b>
   18a38:	1023883a 	mov	r17,r2
   18a3c:	a0000826 	beq	r20,zero,18a60 <_dtoa_r+0xa0c>
   18a40:	0580070e 	bge	zero,r22,18a60 <_dtoa_r+0xa0c>
   18a44:	a005883a 	mov	r2,r20
   18a48:	b500b916 	blt	r22,r20,18d30 <_dtoa_r+0xcdc>
   18a4c:	d9000817 	ldw	r4,32(sp)
   18a50:	a0a9c83a 	sub	r20,r20,r2
   18a54:	b0adc83a 	sub	r22,r22,r2
   18a58:	2089c83a 	sub	r4,r4,r2
   18a5c:	d9000815 	stw	r4,32(sp)
   18a60:	d9800a17 	ldw	r6,40(sp)
   18a64:	0181810e 	bge	zero,r6,1906c <_dtoa_r+0x1018>
   18a68:	d9c00b17 	ldw	r7,44(sp)
   18a6c:	3800b326 	beq	r7,zero,18d3c <_dtoa_r+0xce8>
   18a70:	a800b226 	beq	r21,zero,18d3c <_dtoa_r+0xce8>
   18a74:	880b883a 	mov	r5,r17
   18a78:	a80d883a 	mov	r6,r21
   18a7c:	e009883a 	mov	r4,fp
   18a80:	001a5900 	call	1a590 <__pow5mult>
   18a84:	d9800917 	ldw	r6,36(sp)
   18a88:	100b883a 	mov	r5,r2
   18a8c:	e009883a 	mov	r4,fp
   18a90:	1023883a 	mov	r17,r2
   18a94:	001a3040 	call	1a304 <__multiply>
   18a98:	1021883a 	mov	r16,r2
   18a9c:	d8800a17 	ldw	r2,40(sp)
   18aa0:	d9400917 	ldw	r5,36(sp)
   18aa4:	e009883a 	mov	r4,fp
   18aa8:	1545c83a 	sub	r2,r2,r21
   18aac:	d8800a15 	stw	r2,40(sp)
   18ab0:	0019f3c0 	call	19f3c <_Bfree>
   18ab4:	d8c00a17 	ldw	r3,40(sp)
   18ab8:	18009f1e 	bne	r3,zero,18d38 <_dtoa_r+0xce4>
   18abc:	05c00044 	movi	r23,1
   18ac0:	e009883a 	mov	r4,fp
   18ac4:	b80b883a 	mov	r5,r23
   18ac8:	001a2c80 	call	1a2c8 <__i2b>
   18acc:	d9000d17 	ldw	r4,52(sp)
   18ad0:	102b883a 	mov	r21,r2
   18ad4:	2000ce26 	beq	r4,zero,18e10 <_dtoa_r+0xdbc>
   18ad8:	200d883a 	mov	r6,r4
   18adc:	100b883a 	mov	r5,r2
   18ae0:	e009883a 	mov	r4,fp
   18ae4:	001a5900 	call	1a590 <__pow5mult>
   18ae8:	d9800317 	ldw	r6,12(sp)
   18aec:	102b883a 	mov	r21,r2
   18af0:	b981810e 	bge	r23,r6,190f8 <_dtoa_r+0x10a4>
   18af4:	0027883a 	mov	r19,zero
   18af8:	a8800417 	ldw	r2,16(r21)
   18afc:	05c00804 	movi	r23,32
   18b00:	10800104 	addi	r2,r2,4
   18b04:	1085883a 	add	r2,r2,r2
   18b08:	1085883a 	add	r2,r2,r2
   18b0c:	a885883a 	add	r2,r21,r2
   18b10:	11000017 	ldw	r4,0(r2)
   18b14:	001a1b00 	call	1a1b0 <__hi0bits>
   18b18:	b885c83a 	sub	r2,r23,r2
   18b1c:	1585883a 	add	r2,r2,r22
   18b20:	108007cc 	andi	r2,r2,31
   18b24:	1000b326 	beq	r2,zero,18df4 <_dtoa_r+0xda0>
   18b28:	00c00804 	movi	r3,32
   18b2c:	1887c83a 	sub	r3,r3,r2
   18b30:	01000104 	movi	r4,4
   18b34:	20c2cd0e 	bge	r4,r3,1966c <_dtoa_r+0x1618>
   18b38:	00c00704 	movi	r3,28
   18b3c:	1885c83a 	sub	r2,r3,r2
   18b40:	d8c00817 	ldw	r3,32(sp)
   18b44:	a0a9883a 	add	r20,r20,r2
   18b48:	b0ad883a 	add	r22,r22,r2
   18b4c:	1887883a 	add	r3,r3,r2
   18b50:	d8c00815 	stw	r3,32(sp)
   18b54:	d9800817 	ldw	r6,32(sp)
   18b58:	0180040e 	bge	zero,r6,18b6c <_dtoa_r+0xb18>
   18b5c:	800b883a 	mov	r5,r16
   18b60:	e009883a 	mov	r4,fp
   18b64:	001a6d00 	call	1a6d0 <__lshift>
   18b68:	1021883a 	mov	r16,r2
   18b6c:	0580050e 	bge	zero,r22,18b84 <_dtoa_r+0xb30>
   18b70:	a80b883a 	mov	r5,r21
   18b74:	b00d883a 	mov	r6,r22
   18b78:	e009883a 	mov	r4,fp
   18b7c:	001a6d00 	call	1a6d0 <__lshift>
   18b80:	102b883a 	mov	r21,r2
   18b84:	d9c00e17 	ldw	r7,56(sp)
   18b88:	3801211e 	bne	r7,zero,19010 <_dtoa_r+0xfbc>
   18b8c:	d9800617 	ldw	r6,24(sp)
   18b90:	0181380e 	bge	zero,r6,19074 <_dtoa_r+0x1020>
   18b94:	d8c00b17 	ldw	r3,44(sp)
   18b98:	1800ab1e 	bne	r3,zero,18e48 <_dtoa_r+0xdf4>
   18b9c:	dc800717 	ldw	r18,28(sp)
   18ba0:	dcc00617 	ldw	r19,24(sp)
   18ba4:	9029883a 	mov	r20,r18
   18ba8:	00000206 	br	18bb4 <_dtoa_r+0xb60>
   18bac:	0019f640 	call	19f64 <__multadd>
   18bb0:	1021883a 	mov	r16,r2
   18bb4:	a80b883a 	mov	r5,r21
   18bb8:	8009883a 	mov	r4,r16
   18bbc:	0017e2c0 	call	17e2c <quorem>
   18bc0:	10800c04 	addi	r2,r2,48
   18bc4:	90800005 	stb	r2,0(r18)
   18bc8:	94800044 	addi	r18,r18,1
   18bcc:	9507c83a 	sub	r3,r18,r20
   18bd0:	000f883a 	mov	r7,zero
   18bd4:	01800284 	movi	r6,10
   18bd8:	800b883a 	mov	r5,r16
   18bdc:	e009883a 	mov	r4,fp
   18be0:	1cfff216 	blt	r3,r19,18bac <_gp+0xffff1aa4>
   18be4:	1011883a 	mov	r8,r2
   18be8:	d8800617 	ldw	r2,24(sp)
   18bec:	0082370e 	bge	zero,r2,194cc <_dtoa_r+0x1478>
   18bf0:	d9000717 	ldw	r4,28(sp)
   18bf4:	0025883a 	mov	r18,zero
   18bf8:	20af883a 	add	r23,r4,r2
   18bfc:	01800044 	movi	r6,1
   18c00:	800b883a 	mov	r5,r16
   18c04:	e009883a 	mov	r4,fp
   18c08:	da001715 	stw	r8,92(sp)
   18c0c:	001a6d00 	call	1a6d0 <__lshift>
   18c10:	a80b883a 	mov	r5,r21
   18c14:	1009883a 	mov	r4,r2
   18c18:	d8800915 	stw	r2,36(sp)
   18c1c:	001a8180 	call	1a818 <__mcmp>
   18c20:	da001717 	ldw	r8,92(sp)
   18c24:	0081800e 	bge	zero,r2,19228 <_dtoa_r+0x11d4>
   18c28:	b93fffc3 	ldbu	r4,-1(r23)
   18c2c:	b8bfffc4 	addi	r2,r23,-1
   18c30:	1007883a 	mov	r3,r2
   18c34:	01800e44 	movi	r6,57
   18c38:	d9c00717 	ldw	r7,28(sp)
   18c3c:	00000506 	br	18c54 <_dtoa_r+0xc00>
   18c40:	18ffffc4 	addi	r3,r3,-1
   18c44:	11c12326 	beq	r2,r7,190d4 <_dtoa_r+0x1080>
   18c48:	19000003 	ldbu	r4,0(r3)
   18c4c:	102f883a 	mov	r23,r2
   18c50:	10bfffc4 	addi	r2,r2,-1
   18c54:	21403fcc 	andi	r5,r4,255
   18c58:	2940201c 	xori	r5,r5,128
   18c5c:	297fe004 	addi	r5,r5,-128
   18c60:	29bff726 	beq	r5,r6,18c40 <_gp+0xffff1b38>
   18c64:	21000044 	addi	r4,r4,1
   18c68:	11000005 	stb	r4,0(r2)
   18c6c:	a80b883a 	mov	r5,r21
   18c70:	e009883a 	mov	r4,fp
   18c74:	0019f3c0 	call	19f3c <_Bfree>
   18c78:	883ea026 	beq	r17,zero,186fc <_gp+0xffff15f4>
   18c7c:	90000426 	beq	r18,zero,18c90 <_dtoa_r+0xc3c>
   18c80:	94400326 	beq	r18,r17,18c90 <_dtoa_r+0xc3c>
   18c84:	900b883a 	mov	r5,r18
   18c88:	e009883a 	mov	r4,fp
   18c8c:	0019f3c0 	call	19f3c <_Bfree>
   18c90:	880b883a 	mov	r5,r17
   18c94:	e009883a 	mov	r4,fp
   18c98:	0019f3c0 	call	19f3c <_Bfree>
   18c9c:	003e9706 	br	186fc <_gp+0xffff15f4>
   18ca0:	01800044 	movi	r6,1
   18ca4:	d9800e15 	stw	r6,56(sp)
   18ca8:	003d9606 	br	18304 <_gp+0xffff11fc>
   18cac:	d8800817 	ldw	r2,32(sp)
   18cb0:	d8c00517 	ldw	r3,20(sp)
   18cb4:	d8000d15 	stw	zero,52(sp)
   18cb8:	10c5c83a 	sub	r2,r2,r3
   18cbc:	00c9c83a 	sub	r4,zero,r3
   18cc0:	d8800815 	stw	r2,32(sp)
   18cc4:	d9000a15 	stw	r4,40(sp)
   18cc8:	003d9706 	br	18328 <_gp+0xffff1220>
   18ccc:	05adc83a 	sub	r22,zero,r22
   18cd0:	dd800815 	stw	r22,32(sp)
   18cd4:	002d883a 	mov	r22,zero
   18cd8:	003d8e06 	br	18314 <_gp+0xffff120c>
   18cdc:	d9000517 	ldw	r4,20(sp)
   18ce0:	00143b80 	call	143b8 <__floatsidf>
   18ce4:	100d883a 	mov	r6,r2
   18ce8:	180f883a 	mov	r7,r3
   18cec:	a009883a 	mov	r4,r20
   18cf0:	880b883a 	mov	r5,r17
   18cf4:	001306c0 	call	1306c <__eqdf2>
   18cf8:	103d7126 	beq	r2,zero,182c0 <_gp+0xffff11b8>
   18cfc:	d9c00517 	ldw	r7,20(sp)
   18d00:	39ffffc4 	addi	r7,r7,-1
   18d04:	d9c00515 	stw	r7,20(sp)
   18d08:	003d6d06 	br	182c0 <_gp+0xffff11b8>
   18d0c:	dd400a17 	ldw	r21,40(sp)
   18d10:	dd000817 	ldw	r20,32(sp)
   18d14:	0023883a 	mov	r17,zero
   18d18:	003f4806 	br	18a3c <_gp+0xffff1934>
   18d1c:	10e3c83a 	sub	r17,r2,r3
   18d20:	9448983a 	sll	r4,r18,r17
   18d24:	003d3206 	br	181f0 <_gp+0xffff10e8>
   18d28:	d8000e15 	stw	zero,56(sp)
   18d2c:	003d7506 	br	18304 <_gp+0xffff11fc>
   18d30:	b005883a 	mov	r2,r22
   18d34:	003f4506 	br	18a4c <_gp+0xffff1944>
   18d38:	dc000915 	stw	r16,36(sp)
   18d3c:	d9800a17 	ldw	r6,40(sp)
   18d40:	d9400917 	ldw	r5,36(sp)
   18d44:	e009883a 	mov	r4,fp
   18d48:	001a5900 	call	1a590 <__pow5mult>
   18d4c:	1021883a 	mov	r16,r2
   18d50:	003f5a06 	br	18abc <_gp+0xffff19b4>
   18d54:	01c00044 	movi	r7,1
   18d58:	d9c00b15 	stw	r7,44(sp)
   18d5c:	d8802217 	ldw	r2,136(sp)
   18d60:	0081280e 	bge	zero,r2,19204 <_dtoa_r+0x11b0>
   18d64:	100d883a 	mov	r6,r2
   18d68:	1021883a 	mov	r16,r2
   18d6c:	d8800c15 	stw	r2,48(sp)
   18d70:	d8800615 	stw	r2,24(sp)
   18d74:	003d8806 	br	18398 <_gp+0xffff1290>
   18d78:	d8800617 	ldw	r2,24(sp)
   18d7c:	00be9b16 	blt	zero,r2,187ec <_gp+0xffff16e4>
   18d80:	10010f1e 	bne	r2,zero,191c0 <_dtoa_r+0x116c>
   18d84:	880b883a 	mov	r5,r17
   18d88:	000d883a 	mov	r6,zero
   18d8c:	01d00534 	movhi	r7,16404
   18d90:	8009883a 	mov	r4,r16
   18d94:	00131d00 	call	131d0 <__muldf3>
   18d98:	900d883a 	mov	r6,r18
   18d9c:	980f883a 	mov	r7,r19
   18da0:	1009883a 	mov	r4,r2
   18da4:	180b883a 	mov	r5,r3
   18da8:	00130f40 	call	130f4 <__gedf2>
   18dac:	002b883a 	mov	r21,zero
   18db0:	0023883a 	mov	r17,zero
   18db4:	1000bf16 	blt	r2,zero,190b4 <_dtoa_r+0x1060>
   18db8:	d9802217 	ldw	r6,136(sp)
   18dbc:	ddc00717 	ldw	r23,28(sp)
   18dc0:	018c303a 	nor	r6,zero,r6
   18dc4:	d9800515 	stw	r6,20(sp)
   18dc8:	a80b883a 	mov	r5,r21
   18dcc:	e009883a 	mov	r4,fp
   18dd0:	0019f3c0 	call	19f3c <_Bfree>
   18dd4:	883e4926 	beq	r17,zero,186fc <_gp+0xffff15f4>
   18dd8:	003fad06 	br	18c90 <_gp+0xffff1b88>
   18ddc:	d9c01117 	ldw	r7,68(sp)
   18de0:	3801bc26 	beq	r7,zero,194d4 <_dtoa_r+0x1480>
   18de4:	10810cc4 	addi	r2,r2,1075
   18de8:	dd400a17 	ldw	r21,40(sp)
   18dec:	dd000817 	ldw	r20,32(sp)
   18df0:	003f0a06 	br	18a1c <_gp+0xffff1914>
   18df4:	00800704 	movi	r2,28
   18df8:	d9000817 	ldw	r4,32(sp)
   18dfc:	a0a9883a 	add	r20,r20,r2
   18e00:	b0ad883a 	add	r22,r22,r2
   18e04:	2089883a 	add	r4,r4,r2
   18e08:	d9000815 	stw	r4,32(sp)
   18e0c:	003f5106 	br	18b54 <_gp+0xffff1a4c>
   18e10:	d8c00317 	ldw	r3,12(sp)
   18e14:	b8c1fc0e 	bge	r23,r3,19608 <_dtoa_r+0x15b4>
   18e18:	0027883a 	mov	r19,zero
   18e1c:	b805883a 	mov	r2,r23
   18e20:	003f3e06 	br	18b1c <_gp+0xffff1a14>
   18e24:	880b883a 	mov	r5,r17
   18e28:	e009883a 	mov	r4,fp
   18e2c:	000f883a 	mov	r7,zero
   18e30:	01800284 	movi	r6,10
   18e34:	0019f640 	call	19f64 <__multadd>
   18e38:	d9000c17 	ldw	r4,48(sp)
   18e3c:	1023883a 	mov	r17,r2
   18e40:	0102040e 	bge	zero,r4,19654 <_dtoa_r+0x1600>
   18e44:	d9000615 	stw	r4,24(sp)
   18e48:	0500050e 	bge	zero,r20,18e60 <_dtoa_r+0xe0c>
   18e4c:	880b883a 	mov	r5,r17
   18e50:	a00d883a 	mov	r6,r20
   18e54:	e009883a 	mov	r4,fp
   18e58:	001a6d00 	call	1a6d0 <__lshift>
   18e5c:	1023883a 	mov	r17,r2
   18e60:	9801241e 	bne	r19,zero,192f4 <_dtoa_r+0x12a0>
   18e64:	8829883a 	mov	r20,r17
   18e68:	d9000617 	ldw	r4,24(sp)
   18e6c:	dcc00717 	ldw	r19,28(sp)
   18e70:	9480004c 	andi	r18,r18,1
   18e74:	20bfffc4 	addi	r2,r4,-1
   18e78:	9885883a 	add	r2,r19,r2
   18e7c:	d8800415 	stw	r2,16(sp)
   18e80:	dc800615 	stw	r18,24(sp)
   18e84:	a80b883a 	mov	r5,r21
   18e88:	8009883a 	mov	r4,r16
   18e8c:	0017e2c0 	call	17e2c <quorem>
   18e90:	880b883a 	mov	r5,r17
   18e94:	8009883a 	mov	r4,r16
   18e98:	102f883a 	mov	r23,r2
   18e9c:	001a8180 	call	1a818 <__mcmp>
   18ea0:	a80b883a 	mov	r5,r21
   18ea4:	a00d883a 	mov	r6,r20
   18ea8:	e009883a 	mov	r4,fp
   18eac:	102d883a 	mov	r22,r2
   18eb0:	001a8780 	call	1a878 <__mdiff>
   18eb4:	1007883a 	mov	r3,r2
   18eb8:	10800317 	ldw	r2,12(r2)
   18ebc:	bc800c04 	addi	r18,r23,48
   18ec0:	180b883a 	mov	r5,r3
   18ec4:	10004e1e 	bne	r2,zero,19000 <_dtoa_r+0xfac>
   18ec8:	8009883a 	mov	r4,r16
   18ecc:	d8c01615 	stw	r3,88(sp)
   18ed0:	001a8180 	call	1a818 <__mcmp>
   18ed4:	d8c01617 	ldw	r3,88(sp)
   18ed8:	e009883a 	mov	r4,fp
   18edc:	d8801615 	stw	r2,88(sp)
   18ee0:	180b883a 	mov	r5,r3
   18ee4:	0019f3c0 	call	19f3c <_Bfree>
   18ee8:	d8801617 	ldw	r2,88(sp)
   18eec:	1000041e 	bne	r2,zero,18f00 <_dtoa_r+0xeac>
   18ef0:	d9800317 	ldw	r6,12(sp)
   18ef4:	3000021e 	bne	r6,zero,18f00 <_dtoa_r+0xeac>
   18ef8:	d8c00617 	ldw	r3,24(sp)
   18efc:	18003726 	beq	r3,zero,18fdc <_dtoa_r+0xf88>
   18f00:	b0002016 	blt	r22,zero,18f84 <_dtoa_r+0xf30>
   18f04:	b000041e 	bne	r22,zero,18f18 <_dtoa_r+0xec4>
   18f08:	d9000317 	ldw	r4,12(sp)
   18f0c:	2000021e 	bne	r4,zero,18f18 <_dtoa_r+0xec4>
   18f10:	d8c00617 	ldw	r3,24(sp)
   18f14:	18001b26 	beq	r3,zero,18f84 <_dtoa_r+0xf30>
   18f18:	00810716 	blt	zero,r2,19338 <_dtoa_r+0x12e4>
   18f1c:	d8c00417 	ldw	r3,16(sp)
   18f20:	9d800044 	addi	r22,r19,1
   18f24:	9c800005 	stb	r18,0(r19)
   18f28:	b02f883a 	mov	r23,r22
   18f2c:	98c10626 	beq	r19,r3,19348 <_dtoa_r+0x12f4>
   18f30:	800b883a 	mov	r5,r16
   18f34:	000f883a 	mov	r7,zero
   18f38:	01800284 	movi	r6,10
   18f3c:	e009883a 	mov	r4,fp
   18f40:	0019f640 	call	19f64 <__multadd>
   18f44:	1021883a 	mov	r16,r2
   18f48:	000f883a 	mov	r7,zero
   18f4c:	01800284 	movi	r6,10
   18f50:	880b883a 	mov	r5,r17
   18f54:	e009883a 	mov	r4,fp
   18f58:	8d002526 	beq	r17,r20,18ff0 <_dtoa_r+0xf9c>
   18f5c:	0019f640 	call	19f64 <__multadd>
   18f60:	a00b883a 	mov	r5,r20
   18f64:	000f883a 	mov	r7,zero
   18f68:	01800284 	movi	r6,10
   18f6c:	e009883a 	mov	r4,fp
   18f70:	1023883a 	mov	r17,r2
   18f74:	0019f640 	call	19f64 <__multadd>
   18f78:	1029883a 	mov	r20,r2
   18f7c:	b027883a 	mov	r19,r22
   18f80:	003fc006 	br	18e84 <_gp+0xffff1d7c>
   18f84:	9011883a 	mov	r8,r18
   18f88:	00800e0e 	bge	zero,r2,18fc4 <_dtoa_r+0xf70>
   18f8c:	800b883a 	mov	r5,r16
   18f90:	01800044 	movi	r6,1
   18f94:	e009883a 	mov	r4,fp
   18f98:	da001715 	stw	r8,92(sp)
   18f9c:	001a6d00 	call	1a6d0 <__lshift>
   18fa0:	a80b883a 	mov	r5,r21
   18fa4:	1009883a 	mov	r4,r2
   18fa8:	1021883a 	mov	r16,r2
   18fac:	001a8180 	call	1a818 <__mcmp>
   18fb0:	da001717 	ldw	r8,92(sp)
   18fb4:	0081960e 	bge	zero,r2,19610 <_dtoa_r+0x15bc>
   18fb8:	00800e44 	movi	r2,57
   18fbc:	40817026 	beq	r8,r2,19580 <_dtoa_r+0x152c>
   18fc0:	ba000c44 	addi	r8,r23,49
   18fc4:	8825883a 	mov	r18,r17
   18fc8:	9dc00044 	addi	r23,r19,1
   18fcc:	9a000005 	stb	r8,0(r19)
   18fd0:	a023883a 	mov	r17,r20
   18fd4:	dc000915 	stw	r16,36(sp)
   18fd8:	003f2406 	br	18c6c <_gp+0xffff1b64>
   18fdc:	00800e44 	movi	r2,57
   18fe0:	9011883a 	mov	r8,r18
   18fe4:	90816626 	beq	r18,r2,19580 <_dtoa_r+0x152c>
   18fe8:	05bff516 	blt	zero,r22,18fc0 <_gp+0xffff1eb8>
   18fec:	003ff506 	br	18fc4 <_gp+0xffff1ebc>
   18ff0:	0019f640 	call	19f64 <__multadd>
   18ff4:	1023883a 	mov	r17,r2
   18ff8:	1029883a 	mov	r20,r2
   18ffc:	003fdf06 	br	18f7c <_gp+0xffff1e74>
   19000:	e009883a 	mov	r4,fp
   19004:	0019f3c0 	call	19f3c <_Bfree>
   19008:	00800044 	movi	r2,1
   1900c:	003fbc06 	br	18f00 <_gp+0xffff1df8>
   19010:	a80b883a 	mov	r5,r21
   19014:	8009883a 	mov	r4,r16
   19018:	001a8180 	call	1a818 <__mcmp>
   1901c:	103edb0e 	bge	r2,zero,18b8c <_gp+0xffff1a84>
   19020:	800b883a 	mov	r5,r16
   19024:	000f883a 	mov	r7,zero
   19028:	01800284 	movi	r6,10
   1902c:	e009883a 	mov	r4,fp
   19030:	0019f640 	call	19f64 <__multadd>
   19034:	1021883a 	mov	r16,r2
   19038:	d8800517 	ldw	r2,20(sp)
   1903c:	d8c00b17 	ldw	r3,44(sp)
   19040:	10bfffc4 	addi	r2,r2,-1
   19044:	d8800515 	stw	r2,20(sp)
   19048:	183f761e 	bne	r3,zero,18e24 <_gp+0xffff1d1c>
   1904c:	d9000c17 	ldw	r4,48(sp)
   19050:	0101730e 	bge	zero,r4,19620 <_dtoa_r+0x15cc>
   19054:	d9000615 	stw	r4,24(sp)
   19058:	003ed006 	br	18b9c <_gp+0xffff1a94>
   1905c:	00800084 	movi	r2,2
   19060:	3081861e 	bne	r6,r2,1967c <_dtoa_r+0x1628>
   19064:	d8000b15 	stw	zero,44(sp)
   19068:	003f3c06 	br	18d5c <_gp+0xffff1c54>
   1906c:	dc000917 	ldw	r16,36(sp)
   19070:	003e9206 	br	18abc <_gp+0xffff19b4>
   19074:	d9c00317 	ldw	r7,12(sp)
   19078:	00800084 	movi	r2,2
   1907c:	11fec50e 	bge	r2,r7,18b94 <_gp+0xffff1a8c>
   19080:	d9000617 	ldw	r4,24(sp)
   19084:	20013c1e 	bne	r4,zero,19578 <_dtoa_r+0x1524>
   19088:	a80b883a 	mov	r5,r21
   1908c:	000f883a 	mov	r7,zero
   19090:	01800144 	movi	r6,5
   19094:	e009883a 	mov	r4,fp
   19098:	0019f640 	call	19f64 <__multadd>
   1909c:	100b883a 	mov	r5,r2
   190a0:	8009883a 	mov	r4,r16
   190a4:	102b883a 	mov	r21,r2
   190a8:	001a8180 	call	1a818 <__mcmp>
   190ac:	dc000915 	stw	r16,36(sp)
   190b0:	00bf410e 	bge	zero,r2,18db8 <_gp+0xffff1cb0>
   190b4:	d9c00717 	ldw	r7,28(sp)
   190b8:	00800c44 	movi	r2,49
   190bc:	38800005 	stb	r2,0(r7)
   190c0:	d8800517 	ldw	r2,20(sp)
   190c4:	3dc00044 	addi	r23,r7,1
   190c8:	10800044 	addi	r2,r2,1
   190cc:	d8800515 	stw	r2,20(sp)
   190d0:	003f3d06 	br	18dc8 <_gp+0xffff1cc0>
   190d4:	d9800517 	ldw	r6,20(sp)
   190d8:	d9c00717 	ldw	r7,28(sp)
   190dc:	00800c44 	movi	r2,49
   190e0:	31800044 	addi	r6,r6,1
   190e4:	d9800515 	stw	r6,20(sp)
   190e8:	38800005 	stb	r2,0(r7)
   190ec:	003edf06 	br	18c6c <_gp+0xffff1b64>
   190f0:	d8000b15 	stw	zero,44(sp)
   190f4:	003c9f06 	br	18374 <_gp+0xffff126c>
   190f8:	903e7e1e 	bne	r18,zero,18af4 <_gp+0xffff19ec>
   190fc:	00800434 	movhi	r2,16
   19100:	10bfffc4 	addi	r2,r2,-1
   19104:	9884703a 	and	r2,r19,r2
   19108:	1000ea1e 	bne	r2,zero,194b4 <_dtoa_r+0x1460>
   1910c:	9cdffc2c 	andhi	r19,r19,32752
   19110:	9800e826 	beq	r19,zero,194b4 <_dtoa_r+0x1460>
   19114:	d9c00817 	ldw	r7,32(sp)
   19118:	b5800044 	addi	r22,r22,1
   1911c:	04c00044 	movi	r19,1
   19120:	39c00044 	addi	r7,r7,1
   19124:	d9c00815 	stw	r7,32(sp)
   19128:	d8800d17 	ldw	r2,52(sp)
   1912c:	103e721e 	bne	r2,zero,18af8 <_gp+0xffff19f0>
   19130:	00800044 	movi	r2,1
   19134:	003e7906 	br	18b1c <_gp+0xffff1a14>
   19138:	8009883a 	mov	r4,r16
   1913c:	00143b80 	call	143b8 <__floatsidf>
   19140:	d9800f17 	ldw	r6,60(sp)
   19144:	d9c01017 	ldw	r7,64(sp)
   19148:	1009883a 	mov	r4,r2
   1914c:	180b883a 	mov	r5,r3
   19150:	00131d00 	call	131d0 <__muldf3>
   19154:	000d883a 	mov	r6,zero
   19158:	01d00734 	movhi	r7,16412
   1915c:	1009883a 	mov	r4,r2
   19160:	180b883a 	mov	r5,r3
   19164:	0011df00 	call	11df0 <__adddf3>
   19168:	047f3034 	movhi	r17,64704
   1916c:	1021883a 	mov	r16,r2
   19170:	1c63883a 	add	r17,r3,r17
   19174:	d9000f17 	ldw	r4,60(sp)
   19178:	d9401017 	ldw	r5,64(sp)
   1917c:	000d883a 	mov	r6,zero
   19180:	01d00534 	movhi	r7,16404
   19184:	0013a3c0 	call	13a3c <__subdf3>
   19188:	800d883a 	mov	r6,r16
   1918c:	880f883a 	mov	r7,r17
   19190:	1009883a 	mov	r4,r2
   19194:	180b883a 	mov	r5,r3
   19198:	102b883a 	mov	r21,r2
   1919c:	1829883a 	mov	r20,r3
   191a0:	00130f40 	call	130f4 <__gedf2>
   191a4:	00806c16 	blt	zero,r2,19358 <_dtoa_r+0x1304>
   191a8:	89e0003c 	xorhi	r7,r17,32768
   191ac:	800d883a 	mov	r6,r16
   191b0:	a809883a 	mov	r4,r21
   191b4:	a00b883a 	mov	r5,r20
   191b8:	001d8f40 	call	1d8f4 <__ledf2>
   191bc:	103d7e0e 	bge	r2,zero,187b8 <_gp+0xffff16b0>
   191c0:	002b883a 	mov	r21,zero
   191c4:	0023883a 	mov	r17,zero
   191c8:	003efb06 	br	18db8 <_gp+0xffff1cb0>
   191cc:	d8800717 	ldw	r2,28(sp)
   191d0:	003bd006 	br	18114 <_gp+0xffff100c>
   191d4:	d9000a17 	ldw	r4,40(sp)
   191d8:	d9800d17 	ldw	r6,52(sp)
   191dc:	dd400a15 	stw	r21,40(sp)
   191e0:	a905c83a 	sub	r2,r21,r4
   191e4:	308d883a 	add	r6,r6,r2
   191e8:	d9800d15 	stw	r6,52(sp)
   191ec:	002b883a 	mov	r21,zero
   191f0:	003e0606 	br	18a0c <_gp+0xffff1904>
   191f4:	9023883a 	mov	r17,r18
   191f8:	9829883a 	mov	r20,r19
   191fc:	04000084 	movi	r16,2
   19200:	003c9206 	br	1844c <_gp+0xffff1344>
   19204:	04000044 	movi	r16,1
   19208:	dc000c15 	stw	r16,48(sp)
   1920c:	dc000615 	stw	r16,24(sp)
   19210:	dc002215 	stw	r16,136(sp)
   19214:	e0001115 	stw	zero,68(fp)
   19218:	000b883a 	mov	r5,zero
   1921c:	003c6906 	br	183c4 <_gp+0xffff12bc>
   19220:	3021883a 	mov	r16,r6
   19224:	003ffb06 	br	19214 <_gp+0xffff210c>
   19228:	1000021e 	bne	r2,zero,19234 <_dtoa_r+0x11e0>
   1922c:	4200004c 	andi	r8,r8,1
   19230:	403e7d1e 	bne	r8,zero,18c28 <_gp+0xffff1b20>
   19234:	01000c04 	movi	r4,48
   19238:	00000106 	br	19240 <_dtoa_r+0x11ec>
   1923c:	102f883a 	mov	r23,r2
   19240:	b8bfffc4 	addi	r2,r23,-1
   19244:	10c00007 	ldb	r3,0(r2)
   19248:	193ffc26 	beq	r3,r4,1923c <_gp+0xffff2134>
   1924c:	003e8706 	br	18c6c <_gp+0xffff1b64>
   19250:	d8800517 	ldw	r2,20(sp)
   19254:	00a3c83a 	sub	r17,zero,r2
   19258:	8800a426 	beq	r17,zero,194ec <_dtoa_r+0x1498>
   1925c:	888003cc 	andi	r2,r17,15
   19260:	100490fa 	slli	r2,r2,3
   19264:	00c000b4 	movhi	r3,2
   19268:	18f9bb04 	addi	r3,r3,-6420
   1926c:	1885883a 	add	r2,r3,r2
   19270:	11800017 	ldw	r6,0(r2)
   19274:	11c00117 	ldw	r7,4(r2)
   19278:	9009883a 	mov	r4,r18
   1927c:	980b883a 	mov	r5,r19
   19280:	8823d13a 	srai	r17,r17,4
   19284:	00131d00 	call	131d0 <__muldf3>
   19288:	d8800f15 	stw	r2,60(sp)
   1928c:	d8c01015 	stw	r3,64(sp)
   19290:	8800e826 	beq	r17,zero,19634 <_dtoa_r+0x15e0>
   19294:	050000b4 	movhi	r20,2
   19298:	a539b104 	addi	r20,r20,-6460
   1929c:	04000084 	movi	r16,2
   192a0:	8980004c 	andi	r6,r17,1
   192a4:	1009883a 	mov	r4,r2
   192a8:	8823d07a 	srai	r17,r17,1
   192ac:	180b883a 	mov	r5,r3
   192b0:	30000426 	beq	r6,zero,192c4 <_dtoa_r+0x1270>
   192b4:	a1800017 	ldw	r6,0(r20)
   192b8:	a1c00117 	ldw	r7,4(r20)
   192bc:	84000044 	addi	r16,r16,1
   192c0:	00131d00 	call	131d0 <__muldf3>
   192c4:	a5000204 	addi	r20,r20,8
   192c8:	883ff51e 	bne	r17,zero,192a0 <_gp+0xffff2198>
   192cc:	d8800f15 	stw	r2,60(sp)
   192d0:	d8c01015 	stw	r3,64(sp)
   192d4:	003c7606 	br	184b0 <_gp+0xffff13a8>
   192d8:	00c00c04 	movi	r3,48
   192dc:	10c00005 	stb	r3,0(r2)
   192e0:	d8c00517 	ldw	r3,20(sp)
   192e4:	bd3fffc3 	ldbu	r20,-1(r23)
   192e8:	18c00044 	addi	r3,r3,1
   192ec:	d8c00515 	stw	r3,20(sp)
   192f0:	003db906 	br	189d8 <_gp+0xffff18d0>
   192f4:	89400117 	ldw	r5,4(r17)
   192f8:	e009883a 	mov	r4,fp
   192fc:	0019e940 	call	19e94 <_Balloc>
   19300:	89800417 	ldw	r6,16(r17)
   19304:	89400304 	addi	r5,r17,12
   19308:	11000304 	addi	r4,r2,12
   1930c:	31800084 	addi	r6,r6,2
   19310:	318d883a 	add	r6,r6,r6
   19314:	318d883a 	add	r6,r6,r6
   19318:	1027883a 	mov	r19,r2
   1931c:	0019d4c0 	call	19d4c <memcpy>
   19320:	01800044 	movi	r6,1
   19324:	980b883a 	mov	r5,r19
   19328:	e009883a 	mov	r4,fp
   1932c:	001a6d00 	call	1a6d0 <__lshift>
   19330:	1029883a 	mov	r20,r2
   19334:	003ecc06 	br	18e68 <_gp+0xffff1d60>
   19338:	00800e44 	movi	r2,57
   1933c:	90809026 	beq	r18,r2,19580 <_dtoa_r+0x152c>
   19340:	92000044 	addi	r8,r18,1
   19344:	003f1f06 	br	18fc4 <_gp+0xffff1ebc>
   19348:	9011883a 	mov	r8,r18
   1934c:	8825883a 	mov	r18,r17
   19350:	a023883a 	mov	r17,r20
   19354:	003e2906 	br	18bfc <_gp+0xffff1af4>
   19358:	002b883a 	mov	r21,zero
   1935c:	0023883a 	mov	r17,zero
   19360:	003f5406 	br	190b4 <_gp+0xffff1fac>
   19364:	61bfffc4 	addi	r6,r12,-1
   19368:	300490fa 	slli	r2,r6,3
   1936c:	00c000b4 	movhi	r3,2
   19370:	18f9bb04 	addi	r3,r3,-6420
   19374:	1885883a 	add	r2,r3,r2
   19378:	11000017 	ldw	r4,0(r2)
   1937c:	11400117 	ldw	r5,4(r2)
   19380:	d8800717 	ldw	r2,28(sp)
   19384:	880f883a 	mov	r7,r17
   19388:	d9801215 	stw	r6,72(sp)
   1938c:	800d883a 	mov	r6,r16
   19390:	db001615 	stw	r12,88(sp)
   19394:	15c00044 	addi	r23,r2,1
   19398:	00131d00 	call	131d0 <__muldf3>
   1939c:	d9401017 	ldw	r5,64(sp)
   193a0:	d9000f17 	ldw	r4,60(sp)
   193a4:	d8c01515 	stw	r3,84(sp)
   193a8:	d8801415 	stw	r2,80(sp)
   193ac:	00143380 	call	14338 <__fixdfsi>
   193b0:	1009883a 	mov	r4,r2
   193b4:	1021883a 	mov	r16,r2
   193b8:	00143b80 	call	143b8 <__floatsidf>
   193bc:	d9000f17 	ldw	r4,60(sp)
   193c0:	d9401017 	ldw	r5,64(sp)
   193c4:	100d883a 	mov	r6,r2
   193c8:	180f883a 	mov	r7,r3
   193cc:	0013a3c0 	call	13a3c <__subdf3>
   193d0:	1829883a 	mov	r20,r3
   193d4:	d8c00717 	ldw	r3,28(sp)
   193d8:	84000c04 	addi	r16,r16,48
   193dc:	1023883a 	mov	r17,r2
   193e0:	1c000005 	stb	r16,0(r3)
   193e4:	db001617 	ldw	r12,88(sp)
   193e8:	00800044 	movi	r2,1
   193ec:	60802226 	beq	r12,r2,19478 <_dtoa_r+0x1424>
   193f0:	d9c00717 	ldw	r7,28(sp)
   193f4:	8805883a 	mov	r2,r17
   193f8:	b82b883a 	mov	r21,r23
   193fc:	3b19883a 	add	r12,r7,r12
   19400:	6023883a 	mov	r17,r12
   19404:	a007883a 	mov	r3,r20
   19408:	dc800f15 	stw	r18,60(sp)
   1940c:	000d883a 	mov	r6,zero
   19410:	01d00934 	movhi	r7,16420
   19414:	1009883a 	mov	r4,r2
   19418:	180b883a 	mov	r5,r3
   1941c:	00131d00 	call	131d0 <__muldf3>
   19420:	180b883a 	mov	r5,r3
   19424:	1009883a 	mov	r4,r2
   19428:	1829883a 	mov	r20,r3
   1942c:	1025883a 	mov	r18,r2
   19430:	00143380 	call	14338 <__fixdfsi>
   19434:	1009883a 	mov	r4,r2
   19438:	1021883a 	mov	r16,r2
   1943c:	00143b80 	call	143b8 <__floatsidf>
   19440:	100d883a 	mov	r6,r2
   19444:	180f883a 	mov	r7,r3
   19448:	9009883a 	mov	r4,r18
   1944c:	a00b883a 	mov	r5,r20
   19450:	84000c04 	addi	r16,r16,48
   19454:	0013a3c0 	call	13a3c <__subdf3>
   19458:	ad400044 	addi	r21,r21,1
   1945c:	ac3fffc5 	stb	r16,-1(r21)
   19460:	ac7fea1e 	bne	r21,r17,1940c <_gp+0xffff2304>
   19464:	1023883a 	mov	r17,r2
   19468:	d8801217 	ldw	r2,72(sp)
   1946c:	dc800f17 	ldw	r18,60(sp)
   19470:	1829883a 	mov	r20,r3
   19474:	b8af883a 	add	r23,r23,r2
   19478:	d9001417 	ldw	r4,80(sp)
   1947c:	d9401517 	ldw	r5,84(sp)
   19480:	000d883a 	mov	r6,zero
   19484:	01cff834 	movhi	r7,16352
   19488:	0011df00 	call	11df0 <__adddf3>
   1948c:	880d883a 	mov	r6,r17
   19490:	a00f883a 	mov	r7,r20
   19494:	1009883a 	mov	r4,r2
   19498:	180b883a 	mov	r5,r3
   1949c:	001d8f40 	call	1d8f4 <__ledf2>
   194a0:	10003e0e 	bge	r2,zero,1959c <_dtoa_r+0x1548>
   194a4:	d9001317 	ldw	r4,76(sp)
   194a8:	bd3fffc3 	ldbu	r20,-1(r23)
   194ac:	d9000515 	stw	r4,20(sp)
   194b0:	003d3b06 	br	189a0 <_gp+0xffff1898>
   194b4:	0027883a 	mov	r19,zero
   194b8:	003f1b06 	br	19128 <_gp+0xffff2020>
   194bc:	d8800817 	ldw	r2,32(sp)
   194c0:	11e9c83a 	sub	r20,r2,r7
   194c4:	0005883a 	mov	r2,zero
   194c8:	003d5406 	br	18a1c <_gp+0xffff1914>
   194cc:	00800044 	movi	r2,1
   194d0:	003dc706 	br	18bf0 <_gp+0xffff1ae8>
   194d4:	d8c00217 	ldw	r3,8(sp)
   194d8:	00800d84 	movi	r2,54
   194dc:	dd400a17 	ldw	r21,40(sp)
   194e0:	10c5c83a 	sub	r2,r2,r3
   194e4:	dd000817 	ldw	r20,32(sp)
   194e8:	003d4c06 	br	18a1c <_gp+0xffff1914>
   194ec:	dc800f15 	stw	r18,60(sp)
   194f0:	dcc01015 	stw	r19,64(sp)
   194f4:	04000084 	movi	r16,2
   194f8:	003bed06 	br	184b0 <_gp+0xffff13a8>
   194fc:	d9000617 	ldw	r4,24(sp)
   19500:	203f0d26 	beq	r4,zero,19138 <_gp+0xffff2030>
   19504:	d9800c17 	ldw	r6,48(sp)
   19508:	01bcab0e 	bge	zero,r6,187b8 <_gp+0xffff16b0>
   1950c:	d9401017 	ldw	r5,64(sp)
   19510:	d9000f17 	ldw	r4,60(sp)
   19514:	000d883a 	mov	r6,zero
   19518:	01d00934 	movhi	r7,16420
   1951c:	00131d00 	call	131d0 <__muldf3>
   19520:	81000044 	addi	r4,r16,1
   19524:	d8800f15 	stw	r2,60(sp)
   19528:	d8c01015 	stw	r3,64(sp)
   1952c:	00143b80 	call	143b8 <__floatsidf>
   19530:	d9800f17 	ldw	r6,60(sp)
   19534:	d9c01017 	ldw	r7,64(sp)
   19538:	1009883a 	mov	r4,r2
   1953c:	180b883a 	mov	r5,r3
   19540:	00131d00 	call	131d0 <__muldf3>
   19544:	01d00734 	movhi	r7,16412
   19548:	000d883a 	mov	r6,zero
   1954c:	1009883a 	mov	r4,r2
   19550:	180b883a 	mov	r5,r3
   19554:	0011df00 	call	11df0 <__adddf3>
   19558:	d9c00517 	ldw	r7,20(sp)
   1955c:	047f3034 	movhi	r17,64704
   19560:	1021883a 	mov	r16,r2
   19564:	39ffffc4 	addi	r7,r7,-1
   19568:	d9c01315 	stw	r7,76(sp)
   1956c:	1c63883a 	add	r17,r3,r17
   19570:	db000c17 	ldw	r12,48(sp)
   19574:	003bea06 	br	18520 <_gp+0xffff1418>
   19578:	dc000915 	stw	r16,36(sp)
   1957c:	003e0e06 	br	18db8 <_gp+0xffff1cb0>
   19580:	01000e44 	movi	r4,57
   19584:	8825883a 	mov	r18,r17
   19588:	9dc00044 	addi	r23,r19,1
   1958c:	99000005 	stb	r4,0(r19)
   19590:	a023883a 	mov	r17,r20
   19594:	dc000915 	stw	r16,36(sp)
   19598:	003da406 	br	18c2c <_gp+0xffff1b24>
   1959c:	d9801417 	ldw	r6,80(sp)
   195a0:	d9c01517 	ldw	r7,84(sp)
   195a4:	0009883a 	mov	r4,zero
   195a8:	014ff834 	movhi	r5,16352
   195ac:	0013a3c0 	call	13a3c <__subdf3>
   195b0:	880d883a 	mov	r6,r17
   195b4:	a00f883a 	mov	r7,r20
   195b8:	1009883a 	mov	r4,r2
   195bc:	180b883a 	mov	r5,r3
   195c0:	00130f40 	call	130f4 <__gedf2>
   195c4:	00bc7c0e 	bge	zero,r2,187b8 <_gp+0xffff16b0>
   195c8:	01000c04 	movi	r4,48
   195cc:	00000106 	br	195d4 <_dtoa_r+0x1580>
   195d0:	102f883a 	mov	r23,r2
   195d4:	b8bfffc4 	addi	r2,r23,-1
   195d8:	10c00007 	ldb	r3,0(r2)
   195dc:	193ffc26 	beq	r3,r4,195d0 <_gp+0xffff24c8>
   195e0:	d9801317 	ldw	r6,76(sp)
   195e4:	d9800515 	stw	r6,20(sp)
   195e8:	003c4406 	br	186fc <_gp+0xffff15f4>
   195ec:	d9801317 	ldw	r6,76(sp)
   195f0:	d9800515 	stw	r6,20(sp)
   195f4:	003cea06 	br	189a0 <_gp+0xffff1898>
   195f8:	dd800f17 	ldw	r22,60(sp)
   195fc:	dcc01017 	ldw	r19,64(sp)
   19600:	dc801217 	ldw	r18,72(sp)
   19604:	003c6c06 	br	187b8 <_gp+0xffff16b0>
   19608:	903e031e 	bne	r18,zero,18e18 <_gp+0xffff1d10>
   1960c:	003ebb06 	br	190fc <_gp+0xffff1ff4>
   19610:	103e6c1e 	bne	r2,zero,18fc4 <_gp+0xffff1ebc>
   19614:	4080004c 	andi	r2,r8,1
   19618:	103e6a26 	beq	r2,zero,18fc4 <_gp+0xffff1ebc>
   1961c:	003e6606 	br	18fb8 <_gp+0xffff1eb0>
   19620:	d8c00317 	ldw	r3,12(sp)
   19624:	00800084 	movi	r2,2
   19628:	10c02916 	blt	r2,r3,196d0 <_dtoa_r+0x167c>
   1962c:	d9000c17 	ldw	r4,48(sp)
   19630:	003e8806 	br	19054 <_gp+0xffff1f4c>
   19634:	04000084 	movi	r16,2
   19638:	003b9d06 	br	184b0 <_gp+0xffff13a8>
   1963c:	d9001317 	ldw	r4,76(sp)
   19640:	d9000515 	stw	r4,20(sp)
   19644:	003cd606 	br	189a0 <_gp+0xffff1898>
   19648:	d8801317 	ldw	r2,76(sp)
   1964c:	d8800515 	stw	r2,20(sp)
   19650:	003c2a06 	br	186fc <_gp+0xffff15f4>
   19654:	d9800317 	ldw	r6,12(sp)
   19658:	00800084 	movi	r2,2
   1965c:	11801516 	blt	r2,r6,196b4 <_dtoa_r+0x1660>
   19660:	d9c00c17 	ldw	r7,48(sp)
   19664:	d9c00615 	stw	r7,24(sp)
   19668:	003df706 	br	18e48 <_gp+0xffff1d40>
   1966c:	193d3926 	beq	r3,r4,18b54 <_gp+0xffff1a4c>
   19670:	00c00f04 	movi	r3,60
   19674:	1885c83a 	sub	r2,r3,r2
   19678:	003ddf06 	br	18df8 <_gp+0xffff1cf0>
   1967c:	e009883a 	mov	r4,fp
   19680:	e0001115 	stw	zero,68(fp)
   19684:	000b883a 	mov	r5,zero
   19688:	0019e940 	call	19e94 <_Balloc>
   1968c:	d8800715 	stw	r2,28(sp)
   19690:	d8c00717 	ldw	r3,28(sp)
   19694:	00bfffc4 	movi	r2,-1
   19698:	01000044 	movi	r4,1
   1969c:	d8800c15 	stw	r2,48(sp)
   196a0:	e0c01015 	stw	r3,64(fp)
   196a4:	d9000b15 	stw	r4,44(sp)
   196a8:	d8800615 	stw	r2,24(sp)
   196ac:	d8002215 	stw	zero,136(sp)
   196b0:	003c4106 	br	187b8 <_gp+0xffff16b0>
   196b4:	d8c00c17 	ldw	r3,48(sp)
   196b8:	d8c00615 	stw	r3,24(sp)
   196bc:	003e7006 	br	19080 <_gp+0xffff1f78>
   196c0:	04400044 	movi	r17,1
   196c4:	003b2006 	br	18348 <_gp+0xffff1240>
   196c8:	000b883a 	mov	r5,zero
   196cc:	003b3d06 	br	183c4 <_gp+0xffff12bc>
   196d0:	d8800c17 	ldw	r2,48(sp)
   196d4:	d8800615 	stw	r2,24(sp)
   196d8:	003e6906 	br	19080 <_gp+0xffff1f78>

000196dc <_malloc_trim_r>:
   196dc:	defffb04 	addi	sp,sp,-20
   196e0:	dcc00315 	stw	r19,12(sp)
   196e4:	04c000b4 	movhi	r19,2
   196e8:	dc800215 	stw	r18,8(sp)
   196ec:	dc400115 	stw	r17,4(sp)
   196f0:	dc000015 	stw	r16,0(sp)
   196f4:	dfc00415 	stw	ra,16(sp)
   196f8:	2821883a 	mov	r16,r5
   196fc:	9cfb0104 	addi	r19,r19,-5116
   19700:	2025883a 	mov	r18,r4
   19704:	001dc740 	call	1dc74 <__malloc_lock>
   19708:	98800217 	ldw	r2,8(r19)
   1970c:	14400117 	ldw	r17,4(r2)
   19710:	00bfff04 	movi	r2,-4
   19714:	88a2703a 	and	r17,r17,r2
   19718:	8c21c83a 	sub	r16,r17,r16
   1971c:	8403fbc4 	addi	r16,r16,4079
   19720:	8020d33a 	srli	r16,r16,12
   19724:	0083ffc4 	movi	r2,4095
   19728:	843fffc4 	addi	r16,r16,-1
   1972c:	8020933a 	slli	r16,r16,12
   19730:	1400060e 	bge	r2,r16,1974c <_malloc_trim_r+0x70>
   19734:	000b883a 	mov	r5,zero
   19738:	9009883a 	mov	r4,r18
   1973c:	0014f680 	call	14f68 <_sbrk_r>
   19740:	98c00217 	ldw	r3,8(r19)
   19744:	1c47883a 	add	r3,r3,r17
   19748:	10c00a26 	beq	r2,r3,19774 <_malloc_trim_r+0x98>
   1974c:	9009883a 	mov	r4,r18
   19750:	001dc780 	call	1dc78 <__malloc_unlock>
   19754:	0005883a 	mov	r2,zero
   19758:	dfc00417 	ldw	ra,16(sp)
   1975c:	dcc00317 	ldw	r19,12(sp)
   19760:	dc800217 	ldw	r18,8(sp)
   19764:	dc400117 	ldw	r17,4(sp)
   19768:	dc000017 	ldw	r16,0(sp)
   1976c:	dec00504 	addi	sp,sp,20
   19770:	f800283a 	ret
   19774:	040bc83a 	sub	r5,zero,r16
   19778:	9009883a 	mov	r4,r18
   1977c:	0014f680 	call	14f68 <_sbrk_r>
   19780:	00ffffc4 	movi	r3,-1
   19784:	10c00d26 	beq	r2,r3,197bc <_malloc_trim_r+0xe0>
   19788:	00c000b4 	movhi	r3,2
   1978c:	18fed704 	addi	r3,r3,-1188
   19790:	18800017 	ldw	r2,0(r3)
   19794:	99000217 	ldw	r4,8(r19)
   19798:	8c23c83a 	sub	r17,r17,r16
   1979c:	8c400054 	ori	r17,r17,1
   197a0:	1421c83a 	sub	r16,r2,r16
   197a4:	24400115 	stw	r17,4(r4)
   197a8:	9009883a 	mov	r4,r18
   197ac:	1c000015 	stw	r16,0(r3)
   197b0:	001dc780 	call	1dc78 <__malloc_unlock>
   197b4:	00800044 	movi	r2,1
   197b8:	003fe706 	br	19758 <_gp+0xffff2650>
   197bc:	000b883a 	mov	r5,zero
   197c0:	9009883a 	mov	r4,r18
   197c4:	0014f680 	call	14f68 <_sbrk_r>
   197c8:	99000217 	ldw	r4,8(r19)
   197cc:	014003c4 	movi	r5,15
   197d0:	1107c83a 	sub	r3,r2,r4
   197d4:	28ffdd0e 	bge	r5,r3,1974c <_gp+0xffff2644>
   197d8:	014000b4 	movhi	r5,2
   197dc:	297c4704 	addi	r5,r5,-3812
   197e0:	29400017 	ldw	r5,0(r5)
   197e4:	18c00054 	ori	r3,r3,1
   197e8:	20c00115 	stw	r3,4(r4)
   197ec:	00c000b4 	movhi	r3,2
   197f0:	1145c83a 	sub	r2,r2,r5
   197f4:	18fed704 	addi	r3,r3,-1188
   197f8:	18800015 	stw	r2,0(r3)
   197fc:	003fd306 	br	1974c <_gp+0xffff2644>

00019800 <_free_r>:
   19800:	28004126 	beq	r5,zero,19908 <_free_r+0x108>
   19804:	defffd04 	addi	sp,sp,-12
   19808:	dc400115 	stw	r17,4(sp)
   1980c:	dc000015 	stw	r16,0(sp)
   19810:	2023883a 	mov	r17,r4
   19814:	2821883a 	mov	r16,r5
   19818:	dfc00215 	stw	ra,8(sp)
   1981c:	001dc740 	call	1dc74 <__malloc_lock>
   19820:	81ffff17 	ldw	r7,-4(r16)
   19824:	00bfff84 	movi	r2,-2
   19828:	010000b4 	movhi	r4,2
   1982c:	81bffe04 	addi	r6,r16,-8
   19830:	3884703a 	and	r2,r7,r2
   19834:	213b0104 	addi	r4,r4,-5116
   19838:	308b883a 	add	r5,r6,r2
   1983c:	2a400117 	ldw	r9,4(r5)
   19840:	22000217 	ldw	r8,8(r4)
   19844:	00ffff04 	movi	r3,-4
   19848:	48c6703a 	and	r3,r9,r3
   1984c:	2a005726 	beq	r5,r8,199ac <_free_r+0x1ac>
   19850:	28c00115 	stw	r3,4(r5)
   19854:	39c0004c 	andi	r7,r7,1
   19858:	3800091e 	bne	r7,zero,19880 <_free_r+0x80>
   1985c:	823ffe17 	ldw	r8,-8(r16)
   19860:	22400204 	addi	r9,r4,8
   19864:	320dc83a 	sub	r6,r6,r8
   19868:	31c00217 	ldw	r7,8(r6)
   1986c:	1205883a 	add	r2,r2,r8
   19870:	3a406526 	beq	r7,r9,19a08 <_free_r+0x208>
   19874:	32000317 	ldw	r8,12(r6)
   19878:	3a000315 	stw	r8,12(r7)
   1987c:	41c00215 	stw	r7,8(r8)
   19880:	28cf883a 	add	r7,r5,r3
   19884:	39c00117 	ldw	r7,4(r7)
   19888:	39c0004c 	andi	r7,r7,1
   1988c:	38003a26 	beq	r7,zero,19978 <_free_r+0x178>
   19890:	10c00054 	ori	r3,r2,1
   19894:	30c00115 	stw	r3,4(r6)
   19898:	3087883a 	add	r3,r6,r2
   1989c:	18800015 	stw	r2,0(r3)
   198a0:	00c07fc4 	movi	r3,511
   198a4:	18801936 	bltu	r3,r2,1990c <_free_r+0x10c>
   198a8:	1004d0fa 	srli	r2,r2,3
   198ac:	01c00044 	movi	r7,1
   198b0:	21400117 	ldw	r5,4(r4)
   198b4:	10c00044 	addi	r3,r2,1
   198b8:	18c7883a 	add	r3,r3,r3
   198bc:	1005d0ba 	srai	r2,r2,2
   198c0:	18c7883a 	add	r3,r3,r3
   198c4:	18c7883a 	add	r3,r3,r3
   198c8:	1907883a 	add	r3,r3,r4
   198cc:	3884983a 	sll	r2,r7,r2
   198d0:	19c00017 	ldw	r7,0(r3)
   198d4:	1a3ffe04 	addi	r8,r3,-8
   198d8:	1144b03a 	or	r2,r2,r5
   198dc:	32000315 	stw	r8,12(r6)
   198e0:	31c00215 	stw	r7,8(r6)
   198e4:	20800115 	stw	r2,4(r4)
   198e8:	19800015 	stw	r6,0(r3)
   198ec:	39800315 	stw	r6,12(r7)
   198f0:	8809883a 	mov	r4,r17
   198f4:	dfc00217 	ldw	ra,8(sp)
   198f8:	dc400117 	ldw	r17,4(sp)
   198fc:	dc000017 	ldw	r16,0(sp)
   19900:	dec00304 	addi	sp,sp,12
   19904:	001dc781 	jmpi	1dc78 <__malloc_unlock>
   19908:	f800283a 	ret
   1990c:	100ad27a 	srli	r5,r2,9
   19910:	00c00104 	movi	r3,4
   19914:	19404a36 	bltu	r3,r5,19a40 <_free_r+0x240>
   19918:	100ad1ba 	srli	r5,r2,6
   1991c:	28c00e44 	addi	r3,r5,57
   19920:	18c7883a 	add	r3,r3,r3
   19924:	29400e04 	addi	r5,r5,56
   19928:	18c7883a 	add	r3,r3,r3
   1992c:	18c7883a 	add	r3,r3,r3
   19930:	1909883a 	add	r4,r3,r4
   19934:	20c00017 	ldw	r3,0(r4)
   19938:	01c000b4 	movhi	r7,2
   1993c:	213ffe04 	addi	r4,r4,-8
   19940:	39fb0104 	addi	r7,r7,-5116
   19944:	20c04426 	beq	r4,r3,19a58 <_free_r+0x258>
   19948:	01ffff04 	movi	r7,-4
   1994c:	19400117 	ldw	r5,4(r3)
   19950:	29ca703a 	and	r5,r5,r7
   19954:	1140022e 	bgeu	r2,r5,19960 <_free_r+0x160>
   19958:	18c00217 	ldw	r3,8(r3)
   1995c:	20fffb1e 	bne	r4,r3,1994c <_gp+0xffff2844>
   19960:	19000317 	ldw	r4,12(r3)
   19964:	31000315 	stw	r4,12(r6)
   19968:	30c00215 	stw	r3,8(r6)
   1996c:	21800215 	stw	r6,8(r4)
   19970:	19800315 	stw	r6,12(r3)
   19974:	003fde06 	br	198f0 <_gp+0xffff27e8>
   19978:	29c00217 	ldw	r7,8(r5)
   1997c:	10c5883a 	add	r2,r2,r3
   19980:	00c000b4 	movhi	r3,2
   19984:	18fb0304 	addi	r3,r3,-5108
   19988:	38c03b26 	beq	r7,r3,19a78 <_free_r+0x278>
   1998c:	2a000317 	ldw	r8,12(r5)
   19990:	11400054 	ori	r5,r2,1
   19994:	3087883a 	add	r3,r6,r2
   19998:	3a000315 	stw	r8,12(r7)
   1999c:	41c00215 	stw	r7,8(r8)
   199a0:	31400115 	stw	r5,4(r6)
   199a4:	18800015 	stw	r2,0(r3)
   199a8:	003fbd06 	br	198a0 <_gp+0xffff2798>
   199ac:	39c0004c 	andi	r7,r7,1
   199b0:	10c5883a 	add	r2,r2,r3
   199b4:	3800071e 	bne	r7,zero,199d4 <_free_r+0x1d4>
   199b8:	81fffe17 	ldw	r7,-8(r16)
   199bc:	31cdc83a 	sub	r6,r6,r7
   199c0:	30c00317 	ldw	r3,12(r6)
   199c4:	31400217 	ldw	r5,8(r6)
   199c8:	11c5883a 	add	r2,r2,r7
   199cc:	28c00315 	stw	r3,12(r5)
   199d0:	19400215 	stw	r5,8(r3)
   199d4:	10c00054 	ori	r3,r2,1
   199d8:	30c00115 	stw	r3,4(r6)
   199dc:	00c000b4 	movhi	r3,2
   199e0:	18fc4804 	addi	r3,r3,-3808
   199e4:	18c00017 	ldw	r3,0(r3)
   199e8:	21800215 	stw	r6,8(r4)
   199ec:	10ffc036 	bltu	r2,r3,198f0 <_gp+0xffff27e8>
   199f0:	008000b4 	movhi	r2,2
   199f4:	10bec104 	addi	r2,r2,-1276
   199f8:	11400017 	ldw	r5,0(r2)
   199fc:	8809883a 	mov	r4,r17
   19a00:	00196dc0 	call	196dc <_malloc_trim_r>
   19a04:	003fba06 	br	198f0 <_gp+0xffff27e8>
   19a08:	28c9883a 	add	r4,r5,r3
   19a0c:	21000117 	ldw	r4,4(r4)
   19a10:	2100004c 	andi	r4,r4,1
   19a14:	2000391e 	bne	r4,zero,19afc <_free_r+0x2fc>
   19a18:	29c00217 	ldw	r7,8(r5)
   19a1c:	29000317 	ldw	r4,12(r5)
   19a20:	1885883a 	add	r2,r3,r2
   19a24:	10c00054 	ori	r3,r2,1
   19a28:	39000315 	stw	r4,12(r7)
   19a2c:	21c00215 	stw	r7,8(r4)
   19a30:	30c00115 	stw	r3,4(r6)
   19a34:	308d883a 	add	r6,r6,r2
   19a38:	30800015 	stw	r2,0(r6)
   19a3c:	003fac06 	br	198f0 <_gp+0xffff27e8>
   19a40:	00c00504 	movi	r3,20
   19a44:	19401536 	bltu	r3,r5,19a9c <_free_r+0x29c>
   19a48:	28c01704 	addi	r3,r5,92
   19a4c:	18c7883a 	add	r3,r3,r3
   19a50:	294016c4 	addi	r5,r5,91
   19a54:	003fb406 	br	19928 <_gp+0xffff2820>
   19a58:	280bd0ba 	srai	r5,r5,2
   19a5c:	00c00044 	movi	r3,1
   19a60:	38800117 	ldw	r2,4(r7)
   19a64:	194a983a 	sll	r5,r3,r5
   19a68:	2007883a 	mov	r3,r4
   19a6c:	2884b03a 	or	r2,r5,r2
   19a70:	38800115 	stw	r2,4(r7)
   19a74:	003fbb06 	br	19964 <_gp+0xffff285c>
   19a78:	21800515 	stw	r6,20(r4)
   19a7c:	21800415 	stw	r6,16(r4)
   19a80:	10c00054 	ori	r3,r2,1
   19a84:	31c00315 	stw	r7,12(r6)
   19a88:	31c00215 	stw	r7,8(r6)
   19a8c:	30c00115 	stw	r3,4(r6)
   19a90:	308d883a 	add	r6,r6,r2
   19a94:	30800015 	stw	r2,0(r6)
   19a98:	003f9506 	br	198f0 <_gp+0xffff27e8>
   19a9c:	00c01504 	movi	r3,84
   19aa0:	19400536 	bltu	r3,r5,19ab8 <_free_r+0x2b8>
   19aa4:	100ad33a 	srli	r5,r2,12
   19aa8:	28c01bc4 	addi	r3,r5,111
   19aac:	18c7883a 	add	r3,r3,r3
   19ab0:	29401b84 	addi	r5,r5,110
   19ab4:	003f9c06 	br	19928 <_gp+0xffff2820>
   19ab8:	00c05504 	movi	r3,340
   19abc:	19400536 	bltu	r3,r5,19ad4 <_free_r+0x2d4>
   19ac0:	100ad3fa 	srli	r5,r2,15
   19ac4:	28c01e04 	addi	r3,r5,120
   19ac8:	18c7883a 	add	r3,r3,r3
   19acc:	29401dc4 	addi	r5,r5,119
   19ad0:	003f9506 	br	19928 <_gp+0xffff2820>
   19ad4:	00c15504 	movi	r3,1364
   19ad8:	19400536 	bltu	r3,r5,19af0 <_free_r+0x2f0>
   19adc:	100ad4ba 	srli	r5,r2,18
   19ae0:	28c01f44 	addi	r3,r5,125
   19ae4:	18c7883a 	add	r3,r3,r3
   19ae8:	29401f04 	addi	r5,r5,124
   19aec:	003f8e06 	br	19928 <_gp+0xffff2820>
   19af0:	00c03f84 	movi	r3,254
   19af4:	01401f84 	movi	r5,126
   19af8:	003f8b06 	br	19928 <_gp+0xffff2820>
   19afc:	10c00054 	ori	r3,r2,1
   19b00:	30c00115 	stw	r3,4(r6)
   19b04:	308d883a 	add	r6,r6,r2
   19b08:	30800015 	stw	r2,0(r6)
   19b0c:	003f7806 	br	198f0 <_gp+0xffff27e8>

00019b10 <_setlocale_r>:
   19b10:	30001b26 	beq	r6,zero,19b80 <_setlocale_r+0x70>
   19b14:	014000b4 	movhi	r5,2
   19b18:	defffe04 	addi	sp,sp,-8
   19b1c:	2979a104 	addi	r5,r5,-6524
   19b20:	3009883a 	mov	r4,r6
   19b24:	dc000015 	stw	r16,0(sp)
   19b28:	dfc00115 	stw	ra,4(sp)
   19b2c:	3021883a 	mov	r16,r6
   19b30:	001af4c0 	call	1af4c <strcmp>
   19b34:	1000061e 	bne	r2,zero,19b50 <_setlocale_r+0x40>
   19b38:	008000b4 	movhi	r2,2
   19b3c:	10b98304 	addi	r2,r2,-6644
   19b40:	dfc00117 	ldw	ra,4(sp)
   19b44:	dc000017 	ldw	r16,0(sp)
   19b48:	dec00204 	addi	sp,sp,8
   19b4c:	f800283a 	ret
   19b50:	014000b4 	movhi	r5,2
   19b54:	29798304 	addi	r5,r5,-6644
   19b58:	8009883a 	mov	r4,r16
   19b5c:	001af4c0 	call	1af4c <strcmp>
   19b60:	103ff526 	beq	r2,zero,19b38 <_gp+0xffff2a30>
   19b64:	014000b4 	movhi	r5,2
   19b68:	29790404 	addi	r5,r5,-7152
   19b6c:	8009883a 	mov	r4,r16
   19b70:	001af4c0 	call	1af4c <strcmp>
   19b74:	103ff026 	beq	r2,zero,19b38 <_gp+0xffff2a30>
   19b78:	0005883a 	mov	r2,zero
   19b7c:	003ff006 	br	19b40 <_gp+0xffff2a38>
   19b80:	008000b4 	movhi	r2,2
   19b84:	10b98304 	addi	r2,r2,-6644
   19b88:	f800283a 	ret

00019b8c <__locale_charset>:
   19b8c:	008000b4 	movhi	r2,2
   19b90:	10bc0b04 	addi	r2,r2,-4052
   19b94:	f800283a 	ret

00019b98 <__locale_mb_cur_max>:
   19b98:	008000b4 	movhi	r2,2
   19b9c:	10bc4904 	addi	r2,r2,-3804
   19ba0:	10800017 	ldw	r2,0(r2)
   19ba4:	f800283a 	ret

00019ba8 <__locale_msgcharset>:
   19ba8:	008000b4 	movhi	r2,2
   19bac:	10bc0304 	addi	r2,r2,-4084
   19bb0:	f800283a 	ret

00019bb4 <__locale_cjk_lang>:
   19bb4:	0005883a 	mov	r2,zero
   19bb8:	f800283a 	ret

00019bbc <_localeconv_r>:
   19bbc:	008000b4 	movhi	r2,2
   19bc0:	10bc1304 	addi	r2,r2,-4020
   19bc4:	f800283a 	ret

00019bc8 <setlocale>:
   19bc8:	008000b4 	movhi	r2,2
   19bcc:	10bc4604 	addi	r2,r2,-3816
   19bd0:	280d883a 	mov	r6,r5
   19bd4:	200b883a 	mov	r5,r4
   19bd8:	11000017 	ldw	r4,0(r2)
   19bdc:	0019b101 	jmpi	19b10 <_setlocale_r>

00019be0 <localeconv>:
   19be0:	008000b4 	movhi	r2,2
   19be4:	10bc1304 	addi	r2,r2,-4020
   19be8:	f800283a 	ret

00019bec <memchr>:
   19bec:	208000cc 	andi	r2,r4,3
   19bf0:	280f883a 	mov	r7,r5
   19bf4:	10003426 	beq	r2,zero,19cc8 <memchr+0xdc>
   19bf8:	30bfffc4 	addi	r2,r6,-1
   19bfc:	30001a26 	beq	r6,zero,19c68 <memchr+0x7c>
   19c00:	20c00003 	ldbu	r3,0(r4)
   19c04:	29803fcc 	andi	r6,r5,255
   19c08:	30c0051e 	bne	r6,r3,19c20 <memchr+0x34>
   19c0c:	00001806 	br	19c70 <memchr+0x84>
   19c10:	10001526 	beq	r2,zero,19c68 <memchr+0x7c>
   19c14:	20c00003 	ldbu	r3,0(r4)
   19c18:	10bfffc4 	addi	r2,r2,-1
   19c1c:	30c01426 	beq	r6,r3,19c70 <memchr+0x84>
   19c20:	21000044 	addi	r4,r4,1
   19c24:	20c000cc 	andi	r3,r4,3
   19c28:	183ff91e 	bne	r3,zero,19c10 <_gp+0xffff2b08>
   19c2c:	020000c4 	movi	r8,3
   19c30:	40801136 	bltu	r8,r2,19c78 <memchr+0x8c>
   19c34:	10000c26 	beq	r2,zero,19c68 <memchr+0x7c>
   19c38:	20c00003 	ldbu	r3,0(r4)
   19c3c:	29403fcc 	andi	r5,r5,255
   19c40:	28c00b26 	beq	r5,r3,19c70 <memchr+0x84>
   19c44:	20c00044 	addi	r3,r4,1
   19c48:	39803fcc 	andi	r6,r7,255
   19c4c:	2089883a 	add	r4,r4,r2
   19c50:	00000306 	br	19c60 <memchr+0x74>
   19c54:	18c00044 	addi	r3,r3,1
   19c58:	197fffc3 	ldbu	r5,-1(r3)
   19c5c:	31400526 	beq	r6,r5,19c74 <memchr+0x88>
   19c60:	1805883a 	mov	r2,r3
   19c64:	20fffb1e 	bne	r4,r3,19c54 <_gp+0xffff2b4c>
   19c68:	0005883a 	mov	r2,zero
   19c6c:	f800283a 	ret
   19c70:	2005883a 	mov	r2,r4
   19c74:	f800283a 	ret
   19c78:	28c03fcc 	andi	r3,r5,255
   19c7c:	1812923a 	slli	r9,r3,8
   19c80:	02ffbff4 	movhi	r11,65279
   19c84:	02a02074 	movhi	r10,32897
   19c88:	48d2b03a 	or	r9,r9,r3
   19c8c:	4806943a 	slli	r3,r9,16
   19c90:	5affbfc4 	addi	r11,r11,-257
   19c94:	52a02004 	addi	r10,r10,-32640
   19c98:	48d2b03a 	or	r9,r9,r3
   19c9c:	20c00017 	ldw	r3,0(r4)
   19ca0:	48c6f03a 	xor	r3,r9,r3
   19ca4:	1acd883a 	add	r6,r3,r11
   19ca8:	00c6303a 	nor	r3,zero,r3
   19cac:	30c6703a 	and	r3,r6,r3
   19cb0:	1a86703a 	and	r3,r3,r10
   19cb4:	183fe01e 	bne	r3,zero,19c38 <_gp+0xffff2b30>
   19cb8:	10bfff04 	addi	r2,r2,-4
   19cbc:	21000104 	addi	r4,r4,4
   19cc0:	40bff636 	bltu	r8,r2,19c9c <_gp+0xffff2b94>
   19cc4:	003fdb06 	br	19c34 <_gp+0xffff2b2c>
   19cc8:	3005883a 	mov	r2,r6
   19ccc:	003fd706 	br	19c2c <_gp+0xffff2b24>

00019cd0 <memcmp>:
   19cd0:	01c000c4 	movi	r7,3
   19cd4:	3980192e 	bgeu	r7,r6,19d3c <memcmp+0x6c>
   19cd8:	2144b03a 	or	r2,r4,r5
   19cdc:	11c4703a 	and	r2,r2,r7
   19ce0:	10000f26 	beq	r2,zero,19d20 <memcmp+0x50>
   19ce4:	20800003 	ldbu	r2,0(r4)
   19ce8:	28c00003 	ldbu	r3,0(r5)
   19cec:	10c0151e 	bne	r2,r3,19d44 <memcmp+0x74>
   19cf0:	31bfff84 	addi	r6,r6,-2
   19cf4:	01ffffc4 	movi	r7,-1
   19cf8:	00000406 	br	19d0c <memcmp+0x3c>
   19cfc:	20800003 	ldbu	r2,0(r4)
   19d00:	28c00003 	ldbu	r3,0(r5)
   19d04:	31bfffc4 	addi	r6,r6,-1
   19d08:	10c00e1e 	bne	r2,r3,19d44 <memcmp+0x74>
   19d0c:	21000044 	addi	r4,r4,1
   19d10:	29400044 	addi	r5,r5,1
   19d14:	31fff91e 	bne	r6,r7,19cfc <_gp+0xffff2bf4>
   19d18:	0005883a 	mov	r2,zero
   19d1c:	f800283a 	ret
   19d20:	20c00017 	ldw	r3,0(r4)
   19d24:	28800017 	ldw	r2,0(r5)
   19d28:	18bfee1e 	bne	r3,r2,19ce4 <_gp+0xffff2bdc>
   19d2c:	31bfff04 	addi	r6,r6,-4
   19d30:	21000104 	addi	r4,r4,4
   19d34:	29400104 	addi	r5,r5,4
   19d38:	39bff936 	bltu	r7,r6,19d20 <_gp+0xffff2c18>
   19d3c:	303fe91e 	bne	r6,zero,19ce4 <_gp+0xffff2bdc>
   19d40:	003ff506 	br	19d18 <_gp+0xffff2c10>
   19d44:	10c5c83a 	sub	r2,r2,r3
   19d48:	f800283a 	ret

00019d4c <memcpy>:
   19d4c:	defffd04 	addi	sp,sp,-12
   19d50:	dfc00215 	stw	ra,8(sp)
   19d54:	dc400115 	stw	r17,4(sp)
   19d58:	dc000015 	stw	r16,0(sp)
   19d5c:	00c003c4 	movi	r3,15
   19d60:	2005883a 	mov	r2,r4
   19d64:	1980452e 	bgeu	r3,r6,19e7c <memcpy+0x130>
   19d68:	2906b03a 	or	r3,r5,r4
   19d6c:	18c000cc 	andi	r3,r3,3
   19d70:	1800441e 	bne	r3,zero,19e84 <memcpy+0x138>
   19d74:	347ffc04 	addi	r17,r6,-16
   19d78:	8822d13a 	srli	r17,r17,4
   19d7c:	28c00104 	addi	r3,r5,4
   19d80:	23400104 	addi	r13,r4,4
   19d84:	8820913a 	slli	r16,r17,4
   19d88:	2b000204 	addi	r12,r5,8
   19d8c:	22c00204 	addi	r11,r4,8
   19d90:	84000504 	addi	r16,r16,20
   19d94:	2a800304 	addi	r10,r5,12
   19d98:	22400304 	addi	r9,r4,12
   19d9c:	2c21883a 	add	r16,r5,r16
   19da0:	2811883a 	mov	r8,r5
   19da4:	200f883a 	mov	r7,r4
   19da8:	41000017 	ldw	r4,0(r8)
   19dac:	1fc00017 	ldw	ra,0(r3)
   19db0:	63c00017 	ldw	r15,0(r12)
   19db4:	39000015 	stw	r4,0(r7)
   19db8:	53800017 	ldw	r14,0(r10)
   19dbc:	6fc00015 	stw	ra,0(r13)
   19dc0:	5bc00015 	stw	r15,0(r11)
   19dc4:	4b800015 	stw	r14,0(r9)
   19dc8:	18c00404 	addi	r3,r3,16
   19dcc:	39c00404 	addi	r7,r7,16
   19dd0:	42000404 	addi	r8,r8,16
   19dd4:	6b400404 	addi	r13,r13,16
   19dd8:	63000404 	addi	r12,r12,16
   19ddc:	5ac00404 	addi	r11,r11,16
   19de0:	52800404 	addi	r10,r10,16
   19de4:	4a400404 	addi	r9,r9,16
   19de8:	1c3fef1e 	bne	r3,r16,19da8 <_gp+0xffff2ca0>
   19dec:	89c00044 	addi	r7,r17,1
   19df0:	380e913a 	slli	r7,r7,4
   19df4:	310003cc 	andi	r4,r6,15
   19df8:	02c000c4 	movi	r11,3
   19dfc:	11c7883a 	add	r3,r2,r7
   19e00:	29cb883a 	add	r5,r5,r7
   19e04:	5900212e 	bgeu	r11,r4,19e8c <memcpy+0x140>
   19e08:	1813883a 	mov	r9,r3
   19e0c:	2811883a 	mov	r8,r5
   19e10:	200f883a 	mov	r7,r4
   19e14:	42800017 	ldw	r10,0(r8)
   19e18:	4a400104 	addi	r9,r9,4
   19e1c:	39ffff04 	addi	r7,r7,-4
   19e20:	4abfff15 	stw	r10,-4(r9)
   19e24:	42000104 	addi	r8,r8,4
   19e28:	59fffa36 	bltu	r11,r7,19e14 <_gp+0xffff2d0c>
   19e2c:	213fff04 	addi	r4,r4,-4
   19e30:	2008d0ba 	srli	r4,r4,2
   19e34:	318000cc 	andi	r6,r6,3
   19e38:	21000044 	addi	r4,r4,1
   19e3c:	2109883a 	add	r4,r4,r4
   19e40:	2109883a 	add	r4,r4,r4
   19e44:	1907883a 	add	r3,r3,r4
   19e48:	290b883a 	add	r5,r5,r4
   19e4c:	30000626 	beq	r6,zero,19e68 <memcpy+0x11c>
   19e50:	198d883a 	add	r6,r3,r6
   19e54:	29c00003 	ldbu	r7,0(r5)
   19e58:	18c00044 	addi	r3,r3,1
   19e5c:	29400044 	addi	r5,r5,1
   19e60:	19ffffc5 	stb	r7,-1(r3)
   19e64:	19bffb1e 	bne	r3,r6,19e54 <_gp+0xffff2d4c>
   19e68:	dfc00217 	ldw	ra,8(sp)
   19e6c:	dc400117 	ldw	r17,4(sp)
   19e70:	dc000017 	ldw	r16,0(sp)
   19e74:	dec00304 	addi	sp,sp,12
   19e78:	f800283a 	ret
   19e7c:	2007883a 	mov	r3,r4
   19e80:	003ff206 	br	19e4c <_gp+0xffff2d44>
   19e84:	2007883a 	mov	r3,r4
   19e88:	003ff106 	br	19e50 <_gp+0xffff2d48>
   19e8c:	200d883a 	mov	r6,r4
   19e90:	003fee06 	br	19e4c <_gp+0xffff2d44>

00019e94 <_Balloc>:
   19e94:	20801317 	ldw	r2,76(r4)
   19e98:	defffc04 	addi	sp,sp,-16
   19e9c:	dc400115 	stw	r17,4(sp)
   19ea0:	dc000015 	stw	r16,0(sp)
   19ea4:	dfc00315 	stw	ra,12(sp)
   19ea8:	dc800215 	stw	r18,8(sp)
   19eac:	2023883a 	mov	r17,r4
   19eb0:	2821883a 	mov	r16,r5
   19eb4:	10000f26 	beq	r2,zero,19ef4 <_Balloc+0x60>
   19eb8:	8407883a 	add	r3,r16,r16
   19ebc:	18c7883a 	add	r3,r3,r3
   19ec0:	10c7883a 	add	r3,r2,r3
   19ec4:	18800017 	ldw	r2,0(r3)
   19ec8:	10001126 	beq	r2,zero,19f10 <_Balloc+0x7c>
   19ecc:	11000017 	ldw	r4,0(r2)
   19ed0:	19000015 	stw	r4,0(r3)
   19ed4:	10000415 	stw	zero,16(r2)
   19ed8:	10000315 	stw	zero,12(r2)
   19edc:	dfc00317 	ldw	ra,12(sp)
   19ee0:	dc800217 	ldw	r18,8(sp)
   19ee4:	dc400117 	ldw	r17,4(sp)
   19ee8:	dc000017 	ldw	r16,0(sp)
   19eec:	dec00404 	addi	sp,sp,16
   19ef0:	f800283a 	ret
   19ef4:	01800844 	movi	r6,33
   19ef8:	01400104 	movi	r5,4
   19efc:	001c5980 	call	1c598 <_calloc_r>
   19f00:	88801315 	stw	r2,76(r17)
   19f04:	103fec1e 	bne	r2,zero,19eb8 <_gp+0xffff2db0>
   19f08:	0005883a 	mov	r2,zero
   19f0c:	003ff306 	br	19edc <_gp+0xffff2dd4>
   19f10:	01400044 	movi	r5,1
   19f14:	2c24983a 	sll	r18,r5,r16
   19f18:	8809883a 	mov	r4,r17
   19f1c:	91800144 	addi	r6,r18,5
   19f20:	318d883a 	add	r6,r6,r6
   19f24:	318d883a 	add	r6,r6,r6
   19f28:	001c5980 	call	1c598 <_calloc_r>
   19f2c:	103ff626 	beq	r2,zero,19f08 <_gp+0xffff2e00>
   19f30:	14000115 	stw	r16,4(r2)
   19f34:	14800215 	stw	r18,8(r2)
   19f38:	003fe606 	br	19ed4 <_gp+0xffff2dcc>

00019f3c <_Bfree>:
   19f3c:	28000826 	beq	r5,zero,19f60 <_Bfree+0x24>
   19f40:	28c00117 	ldw	r3,4(r5)
   19f44:	20801317 	ldw	r2,76(r4)
   19f48:	18c7883a 	add	r3,r3,r3
   19f4c:	18c7883a 	add	r3,r3,r3
   19f50:	10c5883a 	add	r2,r2,r3
   19f54:	10c00017 	ldw	r3,0(r2)
   19f58:	28c00015 	stw	r3,0(r5)
   19f5c:	11400015 	stw	r5,0(r2)
   19f60:	f800283a 	ret

00019f64 <__multadd>:
   19f64:	defff704 	addi	sp,sp,-36
   19f68:	dc800215 	stw	r18,8(sp)
   19f6c:	2c800417 	ldw	r18,16(r5)
   19f70:	dd800615 	stw	r22,24(sp)
   19f74:	dd400515 	stw	r21,20(sp)
   19f78:	dd000415 	stw	r20,16(sp)
   19f7c:	dcc00315 	stw	r19,12(sp)
   19f80:	dc400115 	stw	r17,4(sp)
   19f84:	dc000015 	stw	r16,0(sp)
   19f88:	dfc00815 	stw	ra,32(sp)
   19f8c:	ddc00715 	stw	r23,28(sp)
   19f90:	2827883a 	mov	r19,r5
   19f94:	2029883a 	mov	r20,r4
   19f98:	3023883a 	mov	r17,r6
   19f9c:	3821883a 	mov	r16,r7
   19fa0:	2d400504 	addi	r21,r5,20
   19fa4:	002d883a 	mov	r22,zero
   19fa8:	adc00017 	ldw	r23,0(r21)
   19fac:	880b883a 	mov	r5,r17
   19fb0:	ad400104 	addi	r21,r21,4
   19fb4:	b93fffcc 	andi	r4,r23,65535
   19fb8:	00144f80 	call	144f8 <__mulsi3>
   19fbc:	b808d43a 	srli	r4,r23,16
   19fc0:	880b883a 	mov	r5,r17
   19fc4:	1421883a 	add	r16,r2,r16
   19fc8:	00144f80 	call	144f8 <__mulsi3>
   19fcc:	800ed43a 	srli	r7,r16,16
   19fd0:	80ffffcc 	andi	r3,r16,65535
   19fd4:	b5800044 	addi	r22,r22,1
   19fd8:	11c5883a 	add	r2,r2,r7
   19fdc:	100e943a 	slli	r7,r2,16
   19fe0:	1020d43a 	srli	r16,r2,16
   19fe4:	38c7883a 	add	r3,r7,r3
   19fe8:	a8ffff15 	stw	r3,-4(r21)
   19fec:	b4bfee16 	blt	r22,r18,19fa8 <_gp+0xffff2ea0>
   19ff0:	80000926 	beq	r16,zero,1a018 <__multadd+0xb4>
   19ff4:	98800217 	ldw	r2,8(r19)
   19ff8:	9080130e 	bge	r18,r2,1a048 <__multadd+0xe4>
   19ffc:	90800144 	addi	r2,r18,5
   1a000:	1085883a 	add	r2,r2,r2
   1a004:	1085883a 	add	r2,r2,r2
   1a008:	9885883a 	add	r2,r19,r2
   1a00c:	14000015 	stw	r16,0(r2)
   1a010:	94800044 	addi	r18,r18,1
   1a014:	9c800415 	stw	r18,16(r19)
   1a018:	9805883a 	mov	r2,r19
   1a01c:	dfc00817 	ldw	ra,32(sp)
   1a020:	ddc00717 	ldw	r23,28(sp)
   1a024:	dd800617 	ldw	r22,24(sp)
   1a028:	dd400517 	ldw	r21,20(sp)
   1a02c:	dd000417 	ldw	r20,16(sp)
   1a030:	dcc00317 	ldw	r19,12(sp)
   1a034:	dc800217 	ldw	r18,8(sp)
   1a038:	dc400117 	ldw	r17,4(sp)
   1a03c:	dc000017 	ldw	r16,0(sp)
   1a040:	dec00904 	addi	sp,sp,36
   1a044:	f800283a 	ret
   1a048:	99400117 	ldw	r5,4(r19)
   1a04c:	a009883a 	mov	r4,r20
   1a050:	29400044 	addi	r5,r5,1
   1a054:	0019e940 	call	19e94 <_Balloc>
   1a058:	99800417 	ldw	r6,16(r19)
   1a05c:	99400304 	addi	r5,r19,12
   1a060:	11000304 	addi	r4,r2,12
   1a064:	31800084 	addi	r6,r6,2
   1a068:	318d883a 	add	r6,r6,r6
   1a06c:	318d883a 	add	r6,r6,r6
   1a070:	1023883a 	mov	r17,r2
   1a074:	0019d4c0 	call	19d4c <memcpy>
   1a078:	98000a26 	beq	r19,zero,1a0a4 <__multadd+0x140>
   1a07c:	98c00117 	ldw	r3,4(r19)
   1a080:	a0801317 	ldw	r2,76(r20)
   1a084:	18c7883a 	add	r3,r3,r3
   1a088:	18c7883a 	add	r3,r3,r3
   1a08c:	10c5883a 	add	r2,r2,r3
   1a090:	10c00017 	ldw	r3,0(r2)
   1a094:	98c00015 	stw	r3,0(r19)
   1a098:	14c00015 	stw	r19,0(r2)
   1a09c:	8827883a 	mov	r19,r17
   1a0a0:	003fd606 	br	19ffc <_gp+0xffff2ef4>
   1a0a4:	8827883a 	mov	r19,r17
   1a0a8:	003fd406 	br	19ffc <_gp+0xffff2ef4>

0001a0ac <__s2b>:
   1a0ac:	defff904 	addi	sp,sp,-28
   1a0b0:	dc400115 	stw	r17,4(sp)
   1a0b4:	dc000015 	stw	r16,0(sp)
   1a0b8:	2023883a 	mov	r17,r4
   1a0bc:	2821883a 	mov	r16,r5
   1a0c0:	39000204 	addi	r4,r7,8
   1a0c4:	01400244 	movi	r5,9
   1a0c8:	dcc00315 	stw	r19,12(sp)
   1a0cc:	dc800215 	stw	r18,8(sp)
   1a0d0:	dfc00615 	stw	ra,24(sp)
   1a0d4:	dd400515 	stw	r21,20(sp)
   1a0d8:	dd000415 	stw	r20,16(sp)
   1a0dc:	3825883a 	mov	r18,r7
   1a0e0:	3027883a 	mov	r19,r6
   1a0e4:	0011c3c0 	call	11c3c <__divsi3>
   1a0e8:	00c00044 	movi	r3,1
   1a0ec:	000b883a 	mov	r5,zero
   1a0f0:	1880030e 	bge	r3,r2,1a100 <__s2b+0x54>
   1a0f4:	18c7883a 	add	r3,r3,r3
   1a0f8:	29400044 	addi	r5,r5,1
   1a0fc:	18bffd16 	blt	r3,r2,1a0f4 <_gp+0xffff2fec>
   1a100:	8809883a 	mov	r4,r17
   1a104:	0019e940 	call	19e94 <_Balloc>
   1a108:	d8c00717 	ldw	r3,28(sp)
   1a10c:	10c00515 	stw	r3,20(r2)
   1a110:	00c00044 	movi	r3,1
   1a114:	10c00415 	stw	r3,16(r2)
   1a118:	00c00244 	movi	r3,9
   1a11c:	1cc0210e 	bge	r3,r19,1a1a4 <__s2b+0xf8>
   1a120:	80eb883a 	add	r21,r16,r3
   1a124:	a829883a 	mov	r20,r21
   1a128:	84e1883a 	add	r16,r16,r19
   1a12c:	a1c00007 	ldb	r7,0(r20)
   1a130:	01800284 	movi	r6,10
   1a134:	a5000044 	addi	r20,r20,1
   1a138:	100b883a 	mov	r5,r2
   1a13c:	39fff404 	addi	r7,r7,-48
   1a140:	8809883a 	mov	r4,r17
   1a144:	0019f640 	call	19f64 <__multadd>
   1a148:	a43ff81e 	bne	r20,r16,1a12c <_gp+0xffff3024>
   1a14c:	ace1883a 	add	r16,r21,r19
   1a150:	843ffe04 	addi	r16,r16,-8
   1a154:	9c800a0e 	bge	r19,r18,1a180 <__s2b+0xd4>
   1a158:	94e5c83a 	sub	r18,r18,r19
   1a15c:	84a5883a 	add	r18,r16,r18
   1a160:	81c00007 	ldb	r7,0(r16)
   1a164:	01800284 	movi	r6,10
   1a168:	84000044 	addi	r16,r16,1
   1a16c:	100b883a 	mov	r5,r2
   1a170:	39fff404 	addi	r7,r7,-48
   1a174:	8809883a 	mov	r4,r17
   1a178:	0019f640 	call	19f64 <__multadd>
   1a17c:	84bff81e 	bne	r16,r18,1a160 <_gp+0xffff3058>
   1a180:	dfc00617 	ldw	ra,24(sp)
   1a184:	dd400517 	ldw	r21,20(sp)
   1a188:	dd000417 	ldw	r20,16(sp)
   1a18c:	dcc00317 	ldw	r19,12(sp)
   1a190:	dc800217 	ldw	r18,8(sp)
   1a194:	dc400117 	ldw	r17,4(sp)
   1a198:	dc000017 	ldw	r16,0(sp)
   1a19c:	dec00704 	addi	sp,sp,28
   1a1a0:	f800283a 	ret
   1a1a4:	84000284 	addi	r16,r16,10
   1a1a8:	1827883a 	mov	r19,r3
   1a1ac:	003fe906 	br	1a154 <_gp+0xffff304c>

0001a1b0 <__hi0bits>:
   1a1b0:	20bfffec 	andhi	r2,r4,65535
   1a1b4:	1000141e 	bne	r2,zero,1a208 <__hi0bits+0x58>
   1a1b8:	2008943a 	slli	r4,r4,16
   1a1bc:	00800404 	movi	r2,16
   1a1c0:	20ffc02c 	andhi	r3,r4,65280
   1a1c4:	1800021e 	bne	r3,zero,1a1d0 <__hi0bits+0x20>
   1a1c8:	2008923a 	slli	r4,r4,8
   1a1cc:	10800204 	addi	r2,r2,8
   1a1d0:	20fc002c 	andhi	r3,r4,61440
   1a1d4:	1800021e 	bne	r3,zero,1a1e0 <__hi0bits+0x30>
   1a1d8:	2008913a 	slli	r4,r4,4
   1a1dc:	10800104 	addi	r2,r2,4
   1a1e0:	20f0002c 	andhi	r3,r4,49152
   1a1e4:	1800031e 	bne	r3,zero,1a1f4 <__hi0bits+0x44>
   1a1e8:	2109883a 	add	r4,r4,r4
   1a1ec:	10800084 	addi	r2,r2,2
   1a1f0:	2109883a 	add	r4,r4,r4
   1a1f4:	20000316 	blt	r4,zero,1a204 <__hi0bits+0x54>
   1a1f8:	2110002c 	andhi	r4,r4,16384
   1a1fc:	2000041e 	bne	r4,zero,1a210 <__hi0bits+0x60>
   1a200:	00800804 	movi	r2,32
   1a204:	f800283a 	ret
   1a208:	0005883a 	mov	r2,zero
   1a20c:	003fec06 	br	1a1c0 <_gp+0xffff30b8>
   1a210:	10800044 	addi	r2,r2,1
   1a214:	f800283a 	ret

0001a218 <__lo0bits>:
   1a218:	20c00017 	ldw	r3,0(r4)
   1a21c:	188001cc 	andi	r2,r3,7
   1a220:	10000826 	beq	r2,zero,1a244 <__lo0bits+0x2c>
   1a224:	1880004c 	andi	r2,r3,1
   1a228:	1000211e 	bne	r2,zero,1a2b0 <__lo0bits+0x98>
   1a22c:	1880008c 	andi	r2,r3,2
   1a230:	1000211e 	bne	r2,zero,1a2b8 <__lo0bits+0xa0>
   1a234:	1806d0ba 	srli	r3,r3,2
   1a238:	00800084 	movi	r2,2
   1a23c:	20c00015 	stw	r3,0(r4)
   1a240:	f800283a 	ret
   1a244:	18bfffcc 	andi	r2,r3,65535
   1a248:	10001326 	beq	r2,zero,1a298 <__lo0bits+0x80>
   1a24c:	0005883a 	mov	r2,zero
   1a250:	19403fcc 	andi	r5,r3,255
   1a254:	2800021e 	bne	r5,zero,1a260 <__lo0bits+0x48>
   1a258:	1806d23a 	srli	r3,r3,8
   1a25c:	10800204 	addi	r2,r2,8
   1a260:	194003cc 	andi	r5,r3,15
   1a264:	2800021e 	bne	r5,zero,1a270 <__lo0bits+0x58>
   1a268:	1806d13a 	srli	r3,r3,4
   1a26c:	10800104 	addi	r2,r2,4
   1a270:	194000cc 	andi	r5,r3,3
   1a274:	2800021e 	bne	r5,zero,1a280 <__lo0bits+0x68>
   1a278:	1806d0ba 	srli	r3,r3,2
   1a27c:	10800084 	addi	r2,r2,2
   1a280:	1940004c 	andi	r5,r3,1
   1a284:	2800081e 	bne	r5,zero,1a2a8 <__lo0bits+0x90>
   1a288:	1806d07a 	srli	r3,r3,1
   1a28c:	1800051e 	bne	r3,zero,1a2a4 <__lo0bits+0x8c>
   1a290:	00800804 	movi	r2,32
   1a294:	f800283a 	ret
   1a298:	1806d43a 	srli	r3,r3,16
   1a29c:	00800404 	movi	r2,16
   1a2a0:	003feb06 	br	1a250 <_gp+0xffff3148>
   1a2a4:	10800044 	addi	r2,r2,1
   1a2a8:	20c00015 	stw	r3,0(r4)
   1a2ac:	f800283a 	ret
   1a2b0:	0005883a 	mov	r2,zero
   1a2b4:	f800283a 	ret
   1a2b8:	1806d07a 	srli	r3,r3,1
   1a2bc:	00800044 	movi	r2,1
   1a2c0:	20c00015 	stw	r3,0(r4)
   1a2c4:	f800283a 	ret

0001a2c8 <__i2b>:
   1a2c8:	defffd04 	addi	sp,sp,-12
   1a2cc:	dc000015 	stw	r16,0(sp)
   1a2d0:	04000044 	movi	r16,1
   1a2d4:	dc400115 	stw	r17,4(sp)
   1a2d8:	2823883a 	mov	r17,r5
   1a2dc:	800b883a 	mov	r5,r16
   1a2e0:	dfc00215 	stw	ra,8(sp)
   1a2e4:	0019e940 	call	19e94 <_Balloc>
   1a2e8:	14400515 	stw	r17,20(r2)
   1a2ec:	14000415 	stw	r16,16(r2)
   1a2f0:	dfc00217 	ldw	ra,8(sp)
   1a2f4:	dc400117 	ldw	r17,4(sp)
   1a2f8:	dc000017 	ldw	r16,0(sp)
   1a2fc:	dec00304 	addi	sp,sp,12
   1a300:	f800283a 	ret

0001a304 <__multiply>:
   1a304:	deffef04 	addi	sp,sp,-68
   1a308:	dc400815 	stw	r17,32(sp)
   1a30c:	dc000715 	stw	r16,28(sp)
   1a310:	34400417 	ldw	r17,16(r6)
   1a314:	2c000417 	ldw	r16,16(r5)
   1a318:	dd800d15 	stw	r22,52(sp)
   1a31c:	dc800915 	stw	r18,36(sp)
   1a320:	dfc01015 	stw	ra,64(sp)
   1a324:	df000f15 	stw	fp,60(sp)
   1a328:	ddc00e15 	stw	r23,56(sp)
   1a32c:	dd400c15 	stw	r21,48(sp)
   1a330:	dd000b15 	stw	r20,44(sp)
   1a334:	dcc00a15 	stw	r19,40(sp)
   1a338:	2825883a 	mov	r18,r5
   1a33c:	302d883a 	mov	r22,r6
   1a340:	8440050e 	bge	r16,r17,1a358 <__multiply+0x54>
   1a344:	8007883a 	mov	r3,r16
   1a348:	3025883a 	mov	r18,r6
   1a34c:	8821883a 	mov	r16,r17
   1a350:	282d883a 	mov	r22,r5
   1a354:	1823883a 	mov	r17,r3
   1a358:	90800217 	ldw	r2,8(r18)
   1a35c:	8447883a 	add	r3,r16,r17
   1a360:	d8c00215 	stw	r3,8(sp)
   1a364:	91400117 	ldw	r5,4(r18)
   1a368:	10c0010e 	bge	r2,r3,1a370 <__multiply+0x6c>
   1a36c:	29400044 	addi	r5,r5,1
   1a370:	0019e940 	call	19e94 <_Balloc>
   1a374:	d8c00217 	ldw	r3,8(sp)
   1a378:	d8800615 	stw	r2,24(sp)
   1a37c:	18eb883a 	add	r21,r3,r3
   1a380:	ad6b883a 	add	r21,r21,r21
   1a384:	10c00504 	addi	r3,r2,20
   1a388:	1d6b883a 	add	r21,r3,r21
   1a38c:	d8c00115 	stw	r3,4(sp)
   1a390:	dd400315 	stw	r21,12(sp)
   1a394:	1805883a 	mov	r2,r3
   1a398:	1d40042e 	bgeu	r3,r21,1a3ac <__multiply+0xa8>
   1a39c:	d8c00317 	ldw	r3,12(sp)
   1a3a0:	10000015 	stw	zero,0(r2)
   1a3a4:	10800104 	addi	r2,r2,4
   1a3a8:	10fffc36 	bltu	r2,r3,1a39c <_gp+0xffff3294>
   1a3ac:	8c63883a 	add	r17,r17,r17
   1a3b0:	b5800504 	addi	r22,r22,20
   1a3b4:	8c63883a 	add	r17,r17,r17
   1a3b8:	94800504 	addi	r18,r18,20
   1a3bc:	8421883a 	add	r16,r16,r16
   1a3c0:	b463883a 	add	r17,r22,r17
   1a3c4:	8421883a 	add	r16,r16,r16
   1a3c8:	dd800015 	stw	r22,0(sp)
   1a3cc:	dc800415 	stw	r18,16(sp)
   1a3d0:	dc400515 	stw	r17,20(sp)
   1a3d4:	9429883a 	add	r20,r18,r16
   1a3d8:	b4404f2e 	bgeu	r22,r17,1a518 <__multiply+0x214>
   1a3dc:	d8c00017 	ldw	r3,0(sp)
   1a3e0:	1c800017 	ldw	r18,0(r3)
   1a3e4:	947fffcc 	andi	r17,r18,65535
   1a3e8:	88001e26 	beq	r17,zero,1a464 <__multiply+0x160>
   1a3ec:	dd800117 	ldw	r22,4(sp)
   1a3f0:	dd400417 	ldw	r21,16(sp)
   1a3f4:	0027883a 	mov	r19,zero
   1a3f8:	ac800017 	ldw	r18,0(r21)
   1a3fc:	b4000017 	ldw	r16,0(r22)
   1a400:	880b883a 	mov	r5,r17
   1a404:	913fffcc 	andi	r4,r18,65535
   1a408:	00144f80 	call	144f8 <__mulsi3>
   1a40c:	9008d43a 	srli	r4,r18,16
   1a410:	84bfffcc 	andi	r18,r16,65535
   1a414:	1485883a 	add	r2,r2,r18
   1a418:	14e5883a 	add	r18,r2,r19
   1a41c:	8020d43a 	srli	r16,r16,16
   1a420:	9026d43a 	srli	r19,r18,16
   1a424:	880b883a 	mov	r5,r17
   1a428:	00144f80 	call	144f8 <__mulsi3>
   1a42c:	1405883a 	add	r2,r2,r16
   1a430:	14e1883a 	add	r16,r2,r19
   1a434:	90ffffcc 	andi	r3,r18,65535
   1a438:	8024943a 	slli	r18,r16,16
   1a43c:	ad400104 	addi	r21,r21,4
   1a440:	b005883a 	mov	r2,r22
   1a444:	90c6b03a 	or	r3,r18,r3
   1a448:	b0c00015 	stw	r3,0(r22)
   1a44c:	8026d43a 	srli	r19,r16,16
   1a450:	b5800104 	addi	r22,r22,4
   1a454:	ad3fe836 	bltu	r21,r20,1a3f8 <_gp+0xffff32f0>
   1a458:	d8c00017 	ldw	r3,0(sp)
   1a45c:	14c00115 	stw	r19,4(r2)
   1a460:	1c800017 	ldw	r18,0(r3)
   1a464:	9024d43a 	srli	r18,r18,16
   1a468:	90002226 	beq	r18,zero,1a4f4 <__multiply+0x1f0>
   1a46c:	d8c00117 	ldw	r3,4(sp)
   1a470:	dd800417 	ldw	r22,16(sp)
   1a474:	002f883a 	mov	r23,zero
   1a478:	1f000017 	ldw	fp,0(r3)
   1a47c:	1823883a 	mov	r17,r3
   1a480:	182b883a 	mov	r21,r3
   1a484:	e021883a 	mov	r16,fp
   1a488:	00000106 	br	1a490 <__multiply+0x18c>
   1a48c:	982b883a 	mov	r21,r19
   1a490:	b100000b 	ldhu	r4,0(r22)
   1a494:	8020d43a 	srli	r16,r16,16
   1a498:	900b883a 	mov	r5,r18
   1a49c:	00144f80 	call	144f8 <__mulsi3>
   1a4a0:	1405883a 	add	r2,r2,r16
   1a4a4:	15ef883a 	add	r23,r2,r23
   1a4a8:	b804943a 	slli	r2,r23,16
   1a4ac:	e0ffffcc 	andi	r3,fp,65535
   1a4b0:	8c400104 	addi	r17,r17,4
   1a4b4:	10c6b03a 	or	r3,r2,r3
   1a4b8:	88ffff15 	stw	r3,-4(r17)
   1a4bc:	b5800104 	addi	r22,r22,4
   1a4c0:	b13fff17 	ldw	r4,-4(r22)
   1a4c4:	acc00104 	addi	r19,r21,4
   1a4c8:	900b883a 	mov	r5,r18
   1a4cc:	2008d43a 	srli	r4,r4,16
   1a4d0:	9c000017 	ldw	r16,0(r19)
   1a4d4:	00144f80 	call	144f8 <__mulsi3>
   1a4d8:	b806d43a 	srli	r3,r23,16
   1a4dc:	813fffcc 	andi	r4,r16,65535
   1a4e0:	1105883a 	add	r2,r2,r4
   1a4e4:	10f9883a 	add	fp,r2,r3
   1a4e8:	e02ed43a 	srli	r23,fp,16
   1a4ec:	b53fe736 	bltu	r22,r20,1a48c <_gp+0xffff3384>
   1a4f0:	af000115 	stw	fp,4(r21)
   1a4f4:	d8c00017 	ldw	r3,0(sp)
   1a4f8:	d9000517 	ldw	r4,20(sp)
   1a4fc:	18c00104 	addi	r3,r3,4
   1a500:	d8c00015 	stw	r3,0(sp)
   1a504:	d8c00117 	ldw	r3,4(sp)
   1a508:	18c00104 	addi	r3,r3,4
   1a50c:	d8c00115 	stw	r3,4(sp)
   1a510:	d8c00017 	ldw	r3,0(sp)
   1a514:	193fb136 	bltu	r3,r4,1a3dc <_gp+0xffff32d4>
   1a518:	d8c00217 	ldw	r3,8(sp)
   1a51c:	00c00c0e 	bge	zero,r3,1a550 <__multiply+0x24c>
   1a520:	d8c00317 	ldw	r3,12(sp)
   1a524:	18bfff17 	ldw	r2,-4(r3)
   1a528:	1d7fff04 	addi	r21,r3,-4
   1a52c:	10000326 	beq	r2,zero,1a53c <__multiply+0x238>
   1a530:	00000706 	br	1a550 <__multiply+0x24c>
   1a534:	a8800017 	ldw	r2,0(r21)
   1a538:	1000051e 	bne	r2,zero,1a550 <__multiply+0x24c>
   1a53c:	d8c00217 	ldw	r3,8(sp)
   1a540:	ad7fff04 	addi	r21,r21,-4
   1a544:	18ffffc4 	addi	r3,r3,-1
   1a548:	d8c00215 	stw	r3,8(sp)
   1a54c:	183ff91e 	bne	r3,zero,1a534 <_gp+0xffff342c>
   1a550:	d8c00617 	ldw	r3,24(sp)
   1a554:	d9000217 	ldw	r4,8(sp)
   1a558:	1805883a 	mov	r2,r3
   1a55c:	19000415 	stw	r4,16(r3)
   1a560:	dfc01017 	ldw	ra,64(sp)
   1a564:	df000f17 	ldw	fp,60(sp)
   1a568:	ddc00e17 	ldw	r23,56(sp)
   1a56c:	dd800d17 	ldw	r22,52(sp)
   1a570:	dd400c17 	ldw	r21,48(sp)
   1a574:	dd000b17 	ldw	r20,44(sp)
   1a578:	dcc00a17 	ldw	r19,40(sp)
   1a57c:	dc800917 	ldw	r18,36(sp)
   1a580:	dc400817 	ldw	r17,32(sp)
   1a584:	dc000717 	ldw	r16,28(sp)
   1a588:	dec01104 	addi	sp,sp,68
   1a58c:	f800283a 	ret

0001a590 <__pow5mult>:
   1a590:	defffa04 	addi	sp,sp,-24
   1a594:	dcc00315 	stw	r19,12(sp)
   1a598:	dc000015 	stw	r16,0(sp)
   1a59c:	dfc00515 	stw	ra,20(sp)
   1a5a0:	dd000415 	stw	r20,16(sp)
   1a5a4:	dc800215 	stw	r18,8(sp)
   1a5a8:	dc400115 	stw	r17,4(sp)
   1a5ac:	308000cc 	andi	r2,r6,3
   1a5b0:	3021883a 	mov	r16,r6
   1a5b4:	2027883a 	mov	r19,r4
   1a5b8:	10002f1e 	bne	r2,zero,1a678 <__pow5mult+0xe8>
   1a5bc:	2825883a 	mov	r18,r5
   1a5c0:	8021d0ba 	srai	r16,r16,2
   1a5c4:	80001a26 	beq	r16,zero,1a630 <__pow5mult+0xa0>
   1a5c8:	9c401217 	ldw	r17,72(r19)
   1a5cc:	8800061e 	bne	r17,zero,1a5e8 <__pow5mult+0x58>
   1a5d0:	00003406 	br	1a6a4 <__pow5mult+0x114>
   1a5d4:	8021d07a 	srai	r16,r16,1
   1a5d8:	80001526 	beq	r16,zero,1a630 <__pow5mult+0xa0>
   1a5dc:	88800017 	ldw	r2,0(r17)
   1a5e0:	10001c26 	beq	r2,zero,1a654 <__pow5mult+0xc4>
   1a5e4:	1023883a 	mov	r17,r2
   1a5e8:	8080004c 	andi	r2,r16,1
   1a5ec:	103ff926 	beq	r2,zero,1a5d4 <_gp+0xffff34cc>
   1a5f0:	880d883a 	mov	r6,r17
   1a5f4:	900b883a 	mov	r5,r18
   1a5f8:	9809883a 	mov	r4,r19
   1a5fc:	001a3040 	call	1a304 <__multiply>
   1a600:	90001b26 	beq	r18,zero,1a670 <__pow5mult+0xe0>
   1a604:	91000117 	ldw	r4,4(r18)
   1a608:	98c01317 	ldw	r3,76(r19)
   1a60c:	8021d07a 	srai	r16,r16,1
   1a610:	2109883a 	add	r4,r4,r4
   1a614:	2109883a 	add	r4,r4,r4
   1a618:	1907883a 	add	r3,r3,r4
   1a61c:	19000017 	ldw	r4,0(r3)
   1a620:	91000015 	stw	r4,0(r18)
   1a624:	1c800015 	stw	r18,0(r3)
   1a628:	1025883a 	mov	r18,r2
   1a62c:	803feb1e 	bne	r16,zero,1a5dc <_gp+0xffff34d4>
   1a630:	9005883a 	mov	r2,r18
   1a634:	dfc00517 	ldw	ra,20(sp)
   1a638:	dd000417 	ldw	r20,16(sp)
   1a63c:	dcc00317 	ldw	r19,12(sp)
   1a640:	dc800217 	ldw	r18,8(sp)
   1a644:	dc400117 	ldw	r17,4(sp)
   1a648:	dc000017 	ldw	r16,0(sp)
   1a64c:	dec00604 	addi	sp,sp,24
   1a650:	f800283a 	ret
   1a654:	880d883a 	mov	r6,r17
   1a658:	880b883a 	mov	r5,r17
   1a65c:	9809883a 	mov	r4,r19
   1a660:	001a3040 	call	1a304 <__multiply>
   1a664:	88800015 	stw	r2,0(r17)
   1a668:	10000015 	stw	zero,0(r2)
   1a66c:	003fdd06 	br	1a5e4 <_gp+0xffff34dc>
   1a670:	1025883a 	mov	r18,r2
   1a674:	003fd706 	br	1a5d4 <_gp+0xffff34cc>
   1a678:	10bfffc4 	addi	r2,r2,-1
   1a67c:	1085883a 	add	r2,r2,r2
   1a680:	00c000b4 	movhi	r3,2
   1a684:	18f9a404 	addi	r3,r3,-6512
   1a688:	1085883a 	add	r2,r2,r2
   1a68c:	1885883a 	add	r2,r3,r2
   1a690:	11800017 	ldw	r6,0(r2)
   1a694:	000f883a 	mov	r7,zero
   1a698:	0019f640 	call	19f64 <__multadd>
   1a69c:	1025883a 	mov	r18,r2
   1a6a0:	003fc706 	br	1a5c0 <_gp+0xffff34b8>
   1a6a4:	05000044 	movi	r20,1
   1a6a8:	a00b883a 	mov	r5,r20
   1a6ac:	9809883a 	mov	r4,r19
   1a6b0:	0019e940 	call	19e94 <_Balloc>
   1a6b4:	1023883a 	mov	r17,r2
   1a6b8:	00809c44 	movi	r2,625
   1a6bc:	88800515 	stw	r2,20(r17)
   1a6c0:	8d000415 	stw	r20,16(r17)
   1a6c4:	9c401215 	stw	r17,72(r19)
   1a6c8:	88000015 	stw	zero,0(r17)
   1a6cc:	003fc606 	br	1a5e8 <_gp+0xffff34e0>

0001a6d0 <__lshift>:
   1a6d0:	defff904 	addi	sp,sp,-28
   1a6d4:	dd400515 	stw	r21,20(sp)
   1a6d8:	dcc00315 	stw	r19,12(sp)
   1a6dc:	302bd17a 	srai	r21,r6,5
   1a6e0:	2cc00417 	ldw	r19,16(r5)
   1a6e4:	28800217 	ldw	r2,8(r5)
   1a6e8:	dd000415 	stw	r20,16(sp)
   1a6ec:	ace7883a 	add	r19,r21,r19
   1a6f0:	dc800215 	stw	r18,8(sp)
   1a6f4:	dc400115 	stw	r17,4(sp)
   1a6f8:	dc000015 	stw	r16,0(sp)
   1a6fc:	dfc00615 	stw	ra,24(sp)
   1a700:	9c000044 	addi	r16,r19,1
   1a704:	2823883a 	mov	r17,r5
   1a708:	3029883a 	mov	r20,r6
   1a70c:	2025883a 	mov	r18,r4
   1a710:	29400117 	ldw	r5,4(r5)
   1a714:	1400030e 	bge	r2,r16,1a724 <__lshift+0x54>
   1a718:	1085883a 	add	r2,r2,r2
   1a71c:	29400044 	addi	r5,r5,1
   1a720:	143ffd16 	blt	r2,r16,1a718 <_gp+0xffff3610>
   1a724:	9009883a 	mov	r4,r18
   1a728:	0019e940 	call	19e94 <_Balloc>
   1a72c:	10c00504 	addi	r3,r2,20
   1a730:	0540070e 	bge	zero,r21,1a750 <__lshift+0x80>
   1a734:	ad6b883a 	add	r21,r21,r21
   1a738:	ad6b883a 	add	r21,r21,r21
   1a73c:	1809883a 	mov	r4,r3
   1a740:	1d47883a 	add	r3,r3,r21
   1a744:	20000015 	stw	zero,0(r4)
   1a748:	21000104 	addi	r4,r4,4
   1a74c:	193ffd1e 	bne	r3,r4,1a744 <_gp+0xffff363c>
   1a750:	8a000417 	ldw	r8,16(r17)
   1a754:	89000504 	addi	r4,r17,20
   1a758:	a18007cc 	andi	r6,r20,31
   1a75c:	4211883a 	add	r8,r8,r8
   1a760:	4211883a 	add	r8,r8,r8
   1a764:	2211883a 	add	r8,r4,r8
   1a768:	30002326 	beq	r6,zero,1a7f8 <__lshift+0x128>
   1a76c:	02400804 	movi	r9,32
   1a770:	4993c83a 	sub	r9,r9,r6
   1a774:	000b883a 	mov	r5,zero
   1a778:	21c00017 	ldw	r7,0(r4)
   1a77c:	1815883a 	mov	r10,r3
   1a780:	18c00104 	addi	r3,r3,4
   1a784:	398e983a 	sll	r7,r7,r6
   1a788:	21000104 	addi	r4,r4,4
   1a78c:	394ab03a 	or	r5,r7,r5
   1a790:	197fff15 	stw	r5,-4(r3)
   1a794:	217fff17 	ldw	r5,-4(r4)
   1a798:	2a4ad83a 	srl	r5,r5,r9
   1a79c:	223ff636 	bltu	r4,r8,1a778 <_gp+0xffff3670>
   1a7a0:	51400115 	stw	r5,4(r10)
   1a7a4:	28001a1e 	bne	r5,zero,1a810 <__lshift+0x140>
   1a7a8:	843fffc4 	addi	r16,r16,-1
   1a7ac:	14000415 	stw	r16,16(r2)
   1a7b0:	88000826 	beq	r17,zero,1a7d4 <__lshift+0x104>
   1a7b4:	89000117 	ldw	r4,4(r17)
   1a7b8:	90c01317 	ldw	r3,76(r18)
   1a7bc:	2109883a 	add	r4,r4,r4
   1a7c0:	2109883a 	add	r4,r4,r4
   1a7c4:	1907883a 	add	r3,r3,r4
   1a7c8:	19000017 	ldw	r4,0(r3)
   1a7cc:	89000015 	stw	r4,0(r17)
   1a7d0:	1c400015 	stw	r17,0(r3)
   1a7d4:	dfc00617 	ldw	ra,24(sp)
   1a7d8:	dd400517 	ldw	r21,20(sp)
   1a7dc:	dd000417 	ldw	r20,16(sp)
   1a7e0:	dcc00317 	ldw	r19,12(sp)
   1a7e4:	dc800217 	ldw	r18,8(sp)
   1a7e8:	dc400117 	ldw	r17,4(sp)
   1a7ec:	dc000017 	ldw	r16,0(sp)
   1a7f0:	dec00704 	addi	sp,sp,28
   1a7f4:	f800283a 	ret
   1a7f8:	21400017 	ldw	r5,0(r4)
   1a7fc:	18c00104 	addi	r3,r3,4
   1a800:	21000104 	addi	r4,r4,4
   1a804:	197fff15 	stw	r5,-4(r3)
   1a808:	223ffb36 	bltu	r4,r8,1a7f8 <_gp+0xffff36f0>
   1a80c:	003fe606 	br	1a7a8 <_gp+0xffff36a0>
   1a810:	9c000084 	addi	r16,r19,2
   1a814:	003fe406 	br	1a7a8 <_gp+0xffff36a0>

0001a818 <__mcmp>:
   1a818:	20800417 	ldw	r2,16(r4)
   1a81c:	28c00417 	ldw	r3,16(r5)
   1a820:	10c5c83a 	sub	r2,r2,r3
   1a824:	1000111e 	bne	r2,zero,1a86c <__mcmp+0x54>
   1a828:	18c7883a 	add	r3,r3,r3
   1a82c:	18c7883a 	add	r3,r3,r3
   1a830:	21000504 	addi	r4,r4,20
   1a834:	29400504 	addi	r5,r5,20
   1a838:	20c5883a 	add	r2,r4,r3
   1a83c:	28cb883a 	add	r5,r5,r3
   1a840:	00000106 	br	1a848 <__mcmp+0x30>
   1a844:	20800a2e 	bgeu	r4,r2,1a870 <__mcmp+0x58>
   1a848:	10bfff04 	addi	r2,r2,-4
   1a84c:	297fff04 	addi	r5,r5,-4
   1a850:	11800017 	ldw	r6,0(r2)
   1a854:	28c00017 	ldw	r3,0(r5)
   1a858:	30fffa26 	beq	r6,r3,1a844 <_gp+0xffff373c>
   1a85c:	30c00236 	bltu	r6,r3,1a868 <__mcmp+0x50>
   1a860:	00800044 	movi	r2,1
   1a864:	f800283a 	ret
   1a868:	00bfffc4 	movi	r2,-1
   1a86c:	f800283a 	ret
   1a870:	0005883a 	mov	r2,zero
   1a874:	f800283a 	ret

0001a878 <__mdiff>:
   1a878:	28c00417 	ldw	r3,16(r5)
   1a87c:	30800417 	ldw	r2,16(r6)
   1a880:	defffa04 	addi	sp,sp,-24
   1a884:	dcc00315 	stw	r19,12(sp)
   1a888:	dc800215 	stw	r18,8(sp)
   1a88c:	dfc00515 	stw	ra,20(sp)
   1a890:	dd000415 	stw	r20,16(sp)
   1a894:	dc400115 	stw	r17,4(sp)
   1a898:	dc000015 	stw	r16,0(sp)
   1a89c:	1887c83a 	sub	r3,r3,r2
   1a8a0:	2825883a 	mov	r18,r5
   1a8a4:	3027883a 	mov	r19,r6
   1a8a8:	1800141e 	bne	r3,zero,1a8fc <__mdiff+0x84>
   1a8ac:	1085883a 	add	r2,r2,r2
   1a8b0:	1085883a 	add	r2,r2,r2
   1a8b4:	2a000504 	addi	r8,r5,20
   1a8b8:	34000504 	addi	r16,r6,20
   1a8bc:	4087883a 	add	r3,r8,r2
   1a8c0:	8085883a 	add	r2,r16,r2
   1a8c4:	00000106 	br	1a8cc <__mdiff+0x54>
   1a8c8:	40c0592e 	bgeu	r8,r3,1aa30 <__mdiff+0x1b8>
   1a8cc:	18ffff04 	addi	r3,r3,-4
   1a8d0:	10bfff04 	addi	r2,r2,-4
   1a8d4:	19c00017 	ldw	r7,0(r3)
   1a8d8:	11400017 	ldw	r5,0(r2)
   1a8dc:	397ffa26 	beq	r7,r5,1a8c8 <_gp+0xffff37c0>
   1a8e0:	3940592e 	bgeu	r7,r5,1aa48 <__mdiff+0x1d0>
   1a8e4:	9005883a 	mov	r2,r18
   1a8e8:	4023883a 	mov	r17,r8
   1a8ec:	9825883a 	mov	r18,r19
   1a8f0:	05000044 	movi	r20,1
   1a8f4:	1027883a 	mov	r19,r2
   1a8f8:	00000406 	br	1a90c <__mdiff+0x94>
   1a8fc:	18005616 	blt	r3,zero,1aa58 <__mdiff+0x1e0>
   1a900:	34400504 	addi	r17,r6,20
   1a904:	2c000504 	addi	r16,r5,20
   1a908:	0029883a 	mov	r20,zero
   1a90c:	91400117 	ldw	r5,4(r18)
   1a910:	0019e940 	call	19e94 <_Balloc>
   1a914:	92400417 	ldw	r9,16(r18)
   1a918:	9b000417 	ldw	r12,16(r19)
   1a91c:	12c00504 	addi	r11,r2,20
   1a920:	4a51883a 	add	r8,r9,r9
   1a924:	6319883a 	add	r12,r12,r12
   1a928:	4211883a 	add	r8,r8,r8
   1a92c:	6319883a 	add	r12,r12,r12
   1a930:	15000315 	stw	r20,12(r2)
   1a934:	8211883a 	add	r8,r16,r8
   1a938:	8b19883a 	add	r12,r17,r12
   1a93c:	0007883a 	mov	r3,zero
   1a940:	81400017 	ldw	r5,0(r16)
   1a944:	89c00017 	ldw	r7,0(r17)
   1a948:	59800104 	addi	r6,r11,4
   1a94c:	293fffcc 	andi	r4,r5,65535
   1a950:	20c7883a 	add	r3,r4,r3
   1a954:	393fffcc 	andi	r4,r7,65535
   1a958:	1909c83a 	sub	r4,r3,r4
   1a95c:	280ad43a 	srli	r5,r5,16
   1a960:	380ed43a 	srli	r7,r7,16
   1a964:	2007d43a 	srai	r3,r4,16
   1a968:	213fffcc 	andi	r4,r4,65535
   1a96c:	29cbc83a 	sub	r5,r5,r7
   1a970:	28c7883a 	add	r3,r5,r3
   1a974:	180a943a 	slli	r5,r3,16
   1a978:	8c400104 	addi	r17,r17,4
   1a97c:	84000104 	addi	r16,r16,4
   1a980:	2908b03a 	or	r4,r5,r4
   1a984:	59000015 	stw	r4,0(r11)
   1a988:	1807d43a 	srai	r3,r3,16
   1a98c:	3015883a 	mov	r10,r6
   1a990:	3017883a 	mov	r11,r6
   1a994:	8b3fea36 	bltu	r17,r12,1a940 <_gp+0xffff3838>
   1a998:	8200162e 	bgeu	r16,r8,1a9f4 <__mdiff+0x17c>
   1a99c:	8017883a 	mov	r11,r16
   1a9a0:	59400017 	ldw	r5,0(r11)
   1a9a4:	31800104 	addi	r6,r6,4
   1a9a8:	5ac00104 	addi	r11,r11,4
   1a9ac:	293fffcc 	andi	r4,r5,65535
   1a9b0:	20c7883a 	add	r3,r4,r3
   1a9b4:	280ed43a 	srli	r7,r5,16
   1a9b8:	180bd43a 	srai	r5,r3,16
   1a9bc:	193fffcc 	andi	r4,r3,65535
   1a9c0:	3947883a 	add	r3,r7,r5
   1a9c4:	180a943a 	slli	r5,r3,16
   1a9c8:	1807d43a 	srai	r3,r3,16
   1a9cc:	2908b03a 	or	r4,r5,r4
   1a9d0:	313fff15 	stw	r4,-4(r6)
   1a9d4:	5a3ff236 	bltu	r11,r8,1a9a0 <_gp+0xffff3898>
   1a9d8:	0406303a 	nor	r3,zero,r16
   1a9dc:	1a07883a 	add	r3,r3,r8
   1a9e0:	1806d0ba 	srli	r3,r3,2
   1a9e4:	18c00044 	addi	r3,r3,1
   1a9e8:	18c7883a 	add	r3,r3,r3
   1a9ec:	18c7883a 	add	r3,r3,r3
   1a9f0:	50d5883a 	add	r10,r10,r3
   1a9f4:	50ffff04 	addi	r3,r10,-4
   1a9f8:	2000041e 	bne	r4,zero,1aa0c <__mdiff+0x194>
   1a9fc:	18ffff04 	addi	r3,r3,-4
   1aa00:	19000017 	ldw	r4,0(r3)
   1aa04:	4a7fffc4 	addi	r9,r9,-1
   1aa08:	203ffc26 	beq	r4,zero,1a9fc <_gp+0xffff38f4>
   1aa0c:	12400415 	stw	r9,16(r2)
   1aa10:	dfc00517 	ldw	ra,20(sp)
   1aa14:	dd000417 	ldw	r20,16(sp)
   1aa18:	dcc00317 	ldw	r19,12(sp)
   1aa1c:	dc800217 	ldw	r18,8(sp)
   1aa20:	dc400117 	ldw	r17,4(sp)
   1aa24:	dc000017 	ldw	r16,0(sp)
   1aa28:	dec00604 	addi	sp,sp,24
   1aa2c:	f800283a 	ret
   1aa30:	000b883a 	mov	r5,zero
   1aa34:	0019e940 	call	19e94 <_Balloc>
   1aa38:	00c00044 	movi	r3,1
   1aa3c:	10c00415 	stw	r3,16(r2)
   1aa40:	10000515 	stw	zero,20(r2)
   1aa44:	003ff206 	br	1aa10 <_gp+0xffff3908>
   1aa48:	8023883a 	mov	r17,r16
   1aa4c:	0029883a 	mov	r20,zero
   1aa50:	4021883a 	mov	r16,r8
   1aa54:	003fad06 	br	1a90c <_gp+0xffff3804>
   1aa58:	9005883a 	mov	r2,r18
   1aa5c:	94400504 	addi	r17,r18,20
   1aa60:	9c000504 	addi	r16,r19,20
   1aa64:	9825883a 	mov	r18,r19
   1aa68:	05000044 	movi	r20,1
   1aa6c:	1027883a 	mov	r19,r2
   1aa70:	003fa606 	br	1a90c <_gp+0xffff3804>

0001aa74 <__ulp>:
   1aa74:	295ffc2c 	andhi	r5,r5,32752
   1aa78:	00bf3034 	movhi	r2,64704
   1aa7c:	2887883a 	add	r3,r5,r2
   1aa80:	00c0020e 	bge	zero,r3,1aa8c <__ulp+0x18>
   1aa84:	0005883a 	mov	r2,zero
   1aa88:	f800283a 	ret
   1aa8c:	00c7c83a 	sub	r3,zero,r3
   1aa90:	1807d53a 	srai	r3,r3,20
   1aa94:	008004c4 	movi	r2,19
   1aa98:	10c00b0e 	bge	r2,r3,1aac8 <__ulp+0x54>
   1aa9c:	18bffb04 	addi	r2,r3,-20
   1aaa0:	01000784 	movi	r4,30
   1aaa4:	0007883a 	mov	r3,zero
   1aaa8:	20800516 	blt	r4,r2,1aac0 <__ulp+0x4c>
   1aaac:	010007c4 	movi	r4,31
   1aab0:	2089c83a 	sub	r4,r4,r2
   1aab4:	00800044 	movi	r2,1
   1aab8:	1104983a 	sll	r2,r2,r4
   1aabc:	f800283a 	ret
   1aac0:	00800044 	movi	r2,1
   1aac4:	f800283a 	ret
   1aac8:	01400234 	movhi	r5,8
   1aacc:	28c7d83a 	sra	r3,r5,r3
   1aad0:	0005883a 	mov	r2,zero
   1aad4:	f800283a 	ret

0001aad8 <__b2d>:
   1aad8:	defffa04 	addi	sp,sp,-24
   1aadc:	dc000015 	stw	r16,0(sp)
   1aae0:	24000417 	ldw	r16,16(r4)
   1aae4:	dc400115 	stw	r17,4(sp)
   1aae8:	24400504 	addi	r17,r4,20
   1aaec:	8421883a 	add	r16,r16,r16
   1aaf0:	8421883a 	add	r16,r16,r16
   1aaf4:	8c21883a 	add	r16,r17,r16
   1aaf8:	dc800215 	stw	r18,8(sp)
   1aafc:	84bfff17 	ldw	r18,-4(r16)
   1ab00:	dd000415 	stw	r20,16(sp)
   1ab04:	dcc00315 	stw	r19,12(sp)
   1ab08:	9009883a 	mov	r4,r18
   1ab0c:	2829883a 	mov	r20,r5
   1ab10:	dfc00515 	stw	ra,20(sp)
   1ab14:	001a1b00 	call	1a1b0 <__hi0bits>
   1ab18:	00c00804 	movi	r3,32
   1ab1c:	1889c83a 	sub	r4,r3,r2
   1ab20:	a1000015 	stw	r4,0(r20)
   1ab24:	01000284 	movi	r4,10
   1ab28:	84ffff04 	addi	r19,r16,-4
   1ab2c:	20801216 	blt	r4,r2,1ab78 <__b2d+0xa0>
   1ab30:	018002c4 	movi	r6,11
   1ab34:	308dc83a 	sub	r6,r6,r2
   1ab38:	9186d83a 	srl	r3,r18,r6
   1ab3c:	18cffc34 	orhi	r3,r3,16368
   1ab40:	8cc0212e 	bgeu	r17,r19,1abc8 <__b2d+0xf0>
   1ab44:	813ffe17 	ldw	r4,-8(r16)
   1ab48:	218cd83a 	srl	r6,r4,r6
   1ab4c:	10800544 	addi	r2,r2,21
   1ab50:	9084983a 	sll	r2,r18,r2
   1ab54:	1184b03a 	or	r2,r2,r6
   1ab58:	dfc00517 	ldw	ra,20(sp)
   1ab5c:	dd000417 	ldw	r20,16(sp)
   1ab60:	dcc00317 	ldw	r19,12(sp)
   1ab64:	dc800217 	ldw	r18,8(sp)
   1ab68:	dc400117 	ldw	r17,4(sp)
   1ab6c:	dc000017 	ldw	r16,0(sp)
   1ab70:	dec00604 	addi	sp,sp,24
   1ab74:	f800283a 	ret
   1ab78:	8cc00f2e 	bgeu	r17,r19,1abb8 <__b2d+0xe0>
   1ab7c:	117ffd44 	addi	r5,r2,-11
   1ab80:	80bffe17 	ldw	r2,-8(r16)
   1ab84:	28000e26 	beq	r5,zero,1abc0 <__b2d+0xe8>
   1ab88:	1949c83a 	sub	r4,r3,r5
   1ab8c:	9164983a 	sll	r18,r18,r5
   1ab90:	1106d83a 	srl	r3,r2,r4
   1ab94:	81bffe04 	addi	r6,r16,-8
   1ab98:	948ffc34 	orhi	r18,r18,16368
   1ab9c:	90c6b03a 	or	r3,r18,r3
   1aba0:	89800e2e 	bgeu	r17,r6,1abdc <__b2d+0x104>
   1aba4:	81bffd17 	ldw	r6,-12(r16)
   1aba8:	1144983a 	sll	r2,r2,r5
   1abac:	310ad83a 	srl	r5,r6,r4
   1abb0:	2884b03a 	or	r2,r5,r2
   1abb4:	003fe806 	br	1ab58 <_gp+0xffff3a50>
   1abb8:	10bffd44 	addi	r2,r2,-11
   1abbc:	1000041e 	bne	r2,zero,1abd0 <__b2d+0xf8>
   1abc0:	90cffc34 	orhi	r3,r18,16368
   1abc4:	003fe406 	br	1ab58 <_gp+0xffff3a50>
   1abc8:	000d883a 	mov	r6,zero
   1abcc:	003fdf06 	br	1ab4c <_gp+0xffff3a44>
   1abd0:	90a4983a 	sll	r18,r18,r2
   1abd4:	0005883a 	mov	r2,zero
   1abd8:	003ff906 	br	1abc0 <_gp+0xffff3ab8>
   1abdc:	1144983a 	sll	r2,r2,r5
   1abe0:	003fdd06 	br	1ab58 <_gp+0xffff3a50>

0001abe4 <__d2b>:
   1abe4:	defff804 	addi	sp,sp,-32
   1abe8:	dc000215 	stw	r16,8(sp)
   1abec:	3021883a 	mov	r16,r6
   1abf0:	dc400315 	stw	r17,12(sp)
   1abf4:	8022907a 	slli	r17,r16,1
   1abf8:	dd000615 	stw	r20,24(sp)
   1abfc:	2829883a 	mov	r20,r5
   1ac00:	01400044 	movi	r5,1
   1ac04:	dcc00515 	stw	r19,20(sp)
   1ac08:	dc800415 	stw	r18,16(sp)
   1ac0c:	dfc00715 	stw	ra,28(sp)
   1ac10:	3825883a 	mov	r18,r7
   1ac14:	8822d57a 	srli	r17,r17,21
   1ac18:	0019e940 	call	19e94 <_Balloc>
   1ac1c:	1027883a 	mov	r19,r2
   1ac20:	00800434 	movhi	r2,16
   1ac24:	10bfffc4 	addi	r2,r2,-1
   1ac28:	808c703a 	and	r6,r16,r2
   1ac2c:	88000126 	beq	r17,zero,1ac34 <__d2b+0x50>
   1ac30:	31800434 	orhi	r6,r6,16
   1ac34:	d9800015 	stw	r6,0(sp)
   1ac38:	a0002426 	beq	r20,zero,1accc <__d2b+0xe8>
   1ac3c:	d9000104 	addi	r4,sp,4
   1ac40:	dd000115 	stw	r20,4(sp)
   1ac44:	001a2180 	call	1a218 <__lo0bits>
   1ac48:	d8c00017 	ldw	r3,0(sp)
   1ac4c:	10002f1e 	bne	r2,zero,1ad0c <__d2b+0x128>
   1ac50:	d9000117 	ldw	r4,4(sp)
   1ac54:	99000515 	stw	r4,20(r19)
   1ac58:	1821003a 	cmpeq	r16,r3,zero
   1ac5c:	01000084 	movi	r4,2
   1ac60:	2421c83a 	sub	r16,r4,r16
   1ac64:	98c00615 	stw	r3,24(r19)
   1ac68:	9c000415 	stw	r16,16(r19)
   1ac6c:	88001f1e 	bne	r17,zero,1acec <__d2b+0x108>
   1ac70:	10bef384 	addi	r2,r2,-1074
   1ac74:	90800015 	stw	r2,0(r18)
   1ac78:	00900034 	movhi	r2,16384
   1ac7c:	10bfffc4 	addi	r2,r2,-1
   1ac80:	8085883a 	add	r2,r16,r2
   1ac84:	1085883a 	add	r2,r2,r2
   1ac88:	1085883a 	add	r2,r2,r2
   1ac8c:	9885883a 	add	r2,r19,r2
   1ac90:	11000517 	ldw	r4,20(r2)
   1ac94:	8020917a 	slli	r16,r16,5
   1ac98:	001a1b00 	call	1a1b0 <__hi0bits>
   1ac9c:	d8c00817 	ldw	r3,32(sp)
   1aca0:	8085c83a 	sub	r2,r16,r2
   1aca4:	18800015 	stw	r2,0(r3)
   1aca8:	9805883a 	mov	r2,r19
   1acac:	dfc00717 	ldw	ra,28(sp)
   1acb0:	dd000617 	ldw	r20,24(sp)
   1acb4:	dcc00517 	ldw	r19,20(sp)
   1acb8:	dc800417 	ldw	r18,16(sp)
   1acbc:	dc400317 	ldw	r17,12(sp)
   1acc0:	dc000217 	ldw	r16,8(sp)
   1acc4:	dec00804 	addi	sp,sp,32
   1acc8:	f800283a 	ret
   1accc:	d809883a 	mov	r4,sp
   1acd0:	001a2180 	call	1a218 <__lo0bits>
   1acd4:	d8c00017 	ldw	r3,0(sp)
   1acd8:	04000044 	movi	r16,1
   1acdc:	9c000415 	stw	r16,16(r19)
   1ace0:	98c00515 	stw	r3,20(r19)
   1ace4:	10800804 	addi	r2,r2,32
   1ace8:	883fe126 	beq	r17,zero,1ac70 <_gp+0xffff3b68>
   1acec:	00c00d44 	movi	r3,53
   1acf0:	8c7ef344 	addi	r17,r17,-1075
   1acf4:	88a3883a 	add	r17,r17,r2
   1acf8:	1885c83a 	sub	r2,r3,r2
   1acfc:	d8c00817 	ldw	r3,32(sp)
   1ad00:	94400015 	stw	r17,0(r18)
   1ad04:	18800015 	stw	r2,0(r3)
   1ad08:	003fe706 	br	1aca8 <_gp+0xffff3ba0>
   1ad0c:	01000804 	movi	r4,32
   1ad10:	2089c83a 	sub	r4,r4,r2
   1ad14:	1908983a 	sll	r4,r3,r4
   1ad18:	d9400117 	ldw	r5,4(sp)
   1ad1c:	1886d83a 	srl	r3,r3,r2
   1ad20:	2148b03a 	or	r4,r4,r5
   1ad24:	99000515 	stw	r4,20(r19)
   1ad28:	d8c00015 	stw	r3,0(sp)
   1ad2c:	003fca06 	br	1ac58 <_gp+0xffff3b50>

0001ad30 <__ratio>:
   1ad30:	defff904 	addi	sp,sp,-28
   1ad34:	dc400315 	stw	r17,12(sp)
   1ad38:	2823883a 	mov	r17,r5
   1ad3c:	d9400104 	addi	r5,sp,4
   1ad40:	dfc00615 	stw	ra,24(sp)
   1ad44:	dcc00515 	stw	r19,20(sp)
   1ad48:	dc800415 	stw	r18,16(sp)
   1ad4c:	2027883a 	mov	r19,r4
   1ad50:	dc000215 	stw	r16,8(sp)
   1ad54:	001aad80 	call	1aad8 <__b2d>
   1ad58:	d80b883a 	mov	r5,sp
   1ad5c:	8809883a 	mov	r4,r17
   1ad60:	1025883a 	mov	r18,r2
   1ad64:	1821883a 	mov	r16,r3
   1ad68:	001aad80 	call	1aad8 <__b2d>
   1ad6c:	8a000417 	ldw	r8,16(r17)
   1ad70:	99000417 	ldw	r4,16(r19)
   1ad74:	d9400117 	ldw	r5,4(sp)
   1ad78:	2209c83a 	sub	r4,r4,r8
   1ad7c:	2010917a 	slli	r8,r4,5
   1ad80:	d9000017 	ldw	r4,0(sp)
   1ad84:	2909c83a 	sub	r4,r5,r4
   1ad88:	4109883a 	add	r4,r8,r4
   1ad8c:	01000e0e 	bge	zero,r4,1adc8 <__ratio+0x98>
   1ad90:	2008953a 	slli	r4,r4,20
   1ad94:	2421883a 	add	r16,r4,r16
   1ad98:	100d883a 	mov	r6,r2
   1ad9c:	180f883a 	mov	r7,r3
   1ada0:	9009883a 	mov	r4,r18
   1ada4:	800b883a 	mov	r5,r16
   1ada8:	001269c0 	call	1269c <__divdf3>
   1adac:	dfc00617 	ldw	ra,24(sp)
   1adb0:	dcc00517 	ldw	r19,20(sp)
   1adb4:	dc800417 	ldw	r18,16(sp)
   1adb8:	dc400317 	ldw	r17,12(sp)
   1adbc:	dc000217 	ldw	r16,8(sp)
   1adc0:	dec00704 	addi	sp,sp,28
   1adc4:	f800283a 	ret
   1adc8:	2008953a 	slli	r4,r4,20
   1adcc:	1907c83a 	sub	r3,r3,r4
   1add0:	003ff106 	br	1ad98 <_gp+0xffff3c90>

0001add4 <_mprec_log10>:
   1add4:	defffe04 	addi	sp,sp,-8
   1add8:	dc000015 	stw	r16,0(sp)
   1addc:	dfc00115 	stw	ra,4(sp)
   1ade0:	008005c4 	movi	r2,23
   1ade4:	2021883a 	mov	r16,r4
   1ade8:	11000d0e 	bge	r2,r4,1ae20 <_mprec_log10+0x4c>
   1adec:	0005883a 	mov	r2,zero
   1adf0:	00cffc34 	movhi	r3,16368
   1adf4:	843fffc4 	addi	r16,r16,-1
   1adf8:	000d883a 	mov	r6,zero
   1adfc:	01d00934 	movhi	r7,16420
   1ae00:	1009883a 	mov	r4,r2
   1ae04:	180b883a 	mov	r5,r3
   1ae08:	00131d00 	call	131d0 <__muldf3>
   1ae0c:	803ff91e 	bne	r16,zero,1adf4 <_gp+0xffff3cec>
   1ae10:	dfc00117 	ldw	ra,4(sp)
   1ae14:	dc000017 	ldw	r16,0(sp)
   1ae18:	dec00204 	addi	sp,sp,8
   1ae1c:	f800283a 	ret
   1ae20:	202090fa 	slli	r16,r4,3
   1ae24:	008000b4 	movhi	r2,2
   1ae28:	10b9bb04 	addi	r2,r2,-6420
   1ae2c:	1421883a 	add	r16,r2,r16
   1ae30:	80800017 	ldw	r2,0(r16)
   1ae34:	80c00117 	ldw	r3,4(r16)
   1ae38:	dfc00117 	ldw	ra,4(sp)
   1ae3c:	dc000017 	ldw	r16,0(sp)
   1ae40:	dec00204 	addi	sp,sp,8
   1ae44:	f800283a 	ret

0001ae48 <__copybits>:
   1ae48:	297fffc4 	addi	r5,r5,-1
   1ae4c:	280fd17a 	srai	r7,r5,5
   1ae50:	30c00417 	ldw	r3,16(r6)
   1ae54:	30800504 	addi	r2,r6,20
   1ae58:	39c00044 	addi	r7,r7,1
   1ae5c:	18c7883a 	add	r3,r3,r3
   1ae60:	39cf883a 	add	r7,r7,r7
   1ae64:	18c7883a 	add	r3,r3,r3
   1ae68:	39cf883a 	add	r7,r7,r7
   1ae6c:	10c7883a 	add	r3,r2,r3
   1ae70:	21cf883a 	add	r7,r4,r7
   1ae74:	10c00d2e 	bgeu	r2,r3,1aeac <__copybits+0x64>
   1ae78:	200b883a 	mov	r5,r4
   1ae7c:	12000017 	ldw	r8,0(r2)
   1ae80:	29400104 	addi	r5,r5,4
   1ae84:	10800104 	addi	r2,r2,4
   1ae88:	2a3fff15 	stw	r8,-4(r5)
   1ae8c:	10fffb36 	bltu	r2,r3,1ae7c <_gp+0xffff3d74>
   1ae90:	1985c83a 	sub	r2,r3,r6
   1ae94:	10bffac4 	addi	r2,r2,-21
   1ae98:	1004d0ba 	srli	r2,r2,2
   1ae9c:	10800044 	addi	r2,r2,1
   1aea0:	1085883a 	add	r2,r2,r2
   1aea4:	1085883a 	add	r2,r2,r2
   1aea8:	2089883a 	add	r4,r4,r2
   1aeac:	21c0032e 	bgeu	r4,r7,1aebc <__copybits+0x74>
   1aeb0:	20000015 	stw	zero,0(r4)
   1aeb4:	21000104 	addi	r4,r4,4
   1aeb8:	21fffd36 	bltu	r4,r7,1aeb0 <_gp+0xffff3da8>
   1aebc:	f800283a 	ret

0001aec0 <__any_on>:
   1aec0:	20c00417 	ldw	r3,16(r4)
   1aec4:	2805d17a 	srai	r2,r5,5
   1aec8:	21000504 	addi	r4,r4,20
   1aecc:	18800d0e 	bge	r3,r2,1af04 <__any_on+0x44>
   1aed0:	18c7883a 	add	r3,r3,r3
   1aed4:	18c7883a 	add	r3,r3,r3
   1aed8:	20c7883a 	add	r3,r4,r3
   1aedc:	20c0192e 	bgeu	r4,r3,1af44 <__any_on+0x84>
   1aee0:	18bfff17 	ldw	r2,-4(r3)
   1aee4:	18ffff04 	addi	r3,r3,-4
   1aee8:	1000041e 	bne	r2,zero,1aefc <__any_on+0x3c>
   1aeec:	20c0142e 	bgeu	r4,r3,1af40 <__any_on+0x80>
   1aef0:	18ffff04 	addi	r3,r3,-4
   1aef4:	19400017 	ldw	r5,0(r3)
   1aef8:	283ffc26 	beq	r5,zero,1aeec <_gp+0xffff3de4>
   1aefc:	00800044 	movi	r2,1
   1af00:	f800283a 	ret
   1af04:	10c00a0e 	bge	r2,r3,1af30 <__any_on+0x70>
   1af08:	1085883a 	add	r2,r2,r2
   1af0c:	1085883a 	add	r2,r2,r2
   1af10:	294007cc 	andi	r5,r5,31
   1af14:	2087883a 	add	r3,r4,r2
   1af18:	283ff026 	beq	r5,zero,1aedc <_gp+0xffff3dd4>
   1af1c:	19800017 	ldw	r6,0(r3)
   1af20:	3144d83a 	srl	r2,r6,r5
   1af24:	114a983a 	sll	r5,r2,r5
   1af28:	317ff41e 	bne	r6,r5,1aefc <_gp+0xffff3df4>
   1af2c:	003feb06 	br	1aedc <_gp+0xffff3dd4>
   1af30:	1085883a 	add	r2,r2,r2
   1af34:	1085883a 	add	r2,r2,r2
   1af38:	2087883a 	add	r3,r4,r2
   1af3c:	003fe706 	br	1aedc <_gp+0xffff3dd4>
   1af40:	f800283a 	ret
   1af44:	0005883a 	mov	r2,zero
   1af48:	f800283a 	ret

0001af4c <strcmp>:
   1af4c:	2144b03a 	or	r2,r4,r5
   1af50:	108000cc 	andi	r2,r2,3
   1af54:	1000171e 	bne	r2,zero,1afb4 <strcmp+0x68>
   1af58:	20800017 	ldw	r2,0(r4)
   1af5c:	28c00017 	ldw	r3,0(r5)
   1af60:	10c0141e 	bne	r2,r3,1afb4 <strcmp+0x68>
   1af64:	027fbff4 	movhi	r9,65279
   1af68:	4a7fbfc4 	addi	r9,r9,-257
   1af6c:	0086303a 	nor	r3,zero,r2
   1af70:	02202074 	movhi	r8,32897
   1af74:	1245883a 	add	r2,r2,r9
   1af78:	42202004 	addi	r8,r8,-32640
   1af7c:	10c4703a 	and	r2,r2,r3
   1af80:	1204703a 	and	r2,r2,r8
   1af84:	10000226 	beq	r2,zero,1af90 <strcmp+0x44>
   1af88:	00002306 	br	1b018 <strcmp+0xcc>
   1af8c:	1000221e 	bne	r2,zero,1b018 <strcmp+0xcc>
   1af90:	21000104 	addi	r4,r4,4
   1af94:	20c00017 	ldw	r3,0(r4)
   1af98:	29400104 	addi	r5,r5,4
   1af9c:	29800017 	ldw	r6,0(r5)
   1afa0:	1a4f883a 	add	r7,r3,r9
   1afa4:	00c4303a 	nor	r2,zero,r3
   1afa8:	3884703a 	and	r2,r7,r2
   1afac:	1204703a 	and	r2,r2,r8
   1afb0:	19bff626 	beq	r3,r6,1af8c <_gp+0xffff3e84>
   1afb4:	20800003 	ldbu	r2,0(r4)
   1afb8:	10c03fcc 	andi	r3,r2,255
   1afbc:	18c0201c 	xori	r3,r3,128
   1afc0:	18ffe004 	addi	r3,r3,-128
   1afc4:	18000c26 	beq	r3,zero,1aff8 <strcmp+0xac>
   1afc8:	29800007 	ldb	r6,0(r5)
   1afcc:	19800326 	beq	r3,r6,1afdc <strcmp+0x90>
   1afd0:	00001306 	br	1b020 <strcmp+0xd4>
   1afd4:	29800007 	ldb	r6,0(r5)
   1afd8:	11800b1e 	bne	r2,r6,1b008 <strcmp+0xbc>
   1afdc:	21000044 	addi	r4,r4,1
   1afe0:	20c00003 	ldbu	r3,0(r4)
   1afe4:	29400044 	addi	r5,r5,1
   1afe8:	18803fcc 	andi	r2,r3,255
   1afec:	1080201c 	xori	r2,r2,128
   1aff0:	10bfe004 	addi	r2,r2,-128
   1aff4:	103ff71e 	bne	r2,zero,1afd4 <_gp+0xffff3ecc>
   1aff8:	0007883a 	mov	r3,zero
   1affc:	28800003 	ldbu	r2,0(r5)
   1b000:	1885c83a 	sub	r2,r3,r2
   1b004:	f800283a 	ret
   1b008:	28800003 	ldbu	r2,0(r5)
   1b00c:	18c03fcc 	andi	r3,r3,255
   1b010:	1885c83a 	sub	r2,r3,r2
   1b014:	f800283a 	ret
   1b018:	0005883a 	mov	r2,zero
   1b01c:	f800283a 	ret
   1b020:	10c03fcc 	andi	r3,r2,255
   1b024:	003ff506 	br	1affc <_gp+0xffff3ef4>

0001b028 <__ssprint_r>:
   1b028:	30800217 	ldw	r2,8(r6)
   1b02c:	defff604 	addi	sp,sp,-40
   1b030:	dc800215 	stw	r18,8(sp)
   1b034:	dfc00915 	stw	ra,36(sp)
   1b038:	df000815 	stw	fp,32(sp)
   1b03c:	ddc00715 	stw	r23,28(sp)
   1b040:	dd800615 	stw	r22,24(sp)
   1b044:	dd400515 	stw	r21,20(sp)
   1b048:	dd000415 	stw	r20,16(sp)
   1b04c:	dcc00315 	stw	r19,12(sp)
   1b050:	dc400115 	stw	r17,4(sp)
   1b054:	dc000015 	stw	r16,0(sp)
   1b058:	3025883a 	mov	r18,r6
   1b05c:	10005826 	beq	r2,zero,1b1c0 <__ssprint_r+0x198>
   1b060:	2027883a 	mov	r19,r4
   1b064:	35c00017 	ldw	r23,0(r6)
   1b068:	29000017 	ldw	r4,0(r5)
   1b06c:	28800217 	ldw	r2,8(r5)
   1b070:	2823883a 	mov	r17,r5
   1b074:	0039883a 	mov	fp,zero
   1b078:	0021883a 	mov	r16,zero
   1b07c:	80003926 	beq	r16,zero,1b164 <__ssprint_r+0x13c>
   1b080:	102b883a 	mov	r21,r2
   1b084:	102d883a 	mov	r22,r2
   1b088:	80803a36 	bltu	r16,r2,1b174 <__ssprint_r+0x14c>
   1b08c:	88c0030b 	ldhu	r3,12(r17)
   1b090:	1881200c 	andi	r2,r3,1152
   1b094:	10002626 	beq	r2,zero,1b130 <__ssprint_r+0x108>
   1b098:	88800517 	ldw	r2,20(r17)
   1b09c:	89400417 	ldw	r5,16(r17)
   1b0a0:	81800044 	addi	r6,r16,1
   1b0a4:	108f883a 	add	r7,r2,r2
   1b0a8:	3885883a 	add	r2,r7,r2
   1b0ac:	100ed7fa 	srli	r7,r2,31
   1b0b0:	216dc83a 	sub	r22,r4,r5
   1b0b4:	3589883a 	add	r4,r6,r22
   1b0b8:	3885883a 	add	r2,r7,r2
   1b0bc:	102bd07a 	srai	r21,r2,1
   1b0c0:	a80d883a 	mov	r6,r21
   1b0c4:	a900022e 	bgeu	r21,r4,1b0d0 <__ssprint_r+0xa8>
   1b0c8:	202b883a 	mov	r21,r4
   1b0cc:	200d883a 	mov	r6,r4
   1b0d0:	18c1000c 	andi	r3,r3,1024
   1b0d4:	18002a26 	beq	r3,zero,1b180 <__ssprint_r+0x158>
   1b0d8:	300b883a 	mov	r5,r6
   1b0dc:	9809883a 	mov	r4,r19
   1b0e0:	00146340 	call	14634 <_malloc_r>
   1b0e4:	1029883a 	mov	r20,r2
   1b0e8:	10002c26 	beq	r2,zero,1b19c <__ssprint_r+0x174>
   1b0ec:	89400417 	ldw	r5,16(r17)
   1b0f0:	b00d883a 	mov	r6,r22
   1b0f4:	1009883a 	mov	r4,r2
   1b0f8:	0019d4c0 	call	19d4c <memcpy>
   1b0fc:	8880030b 	ldhu	r2,12(r17)
   1b100:	00fedfc4 	movi	r3,-1153
   1b104:	10c4703a 	and	r2,r2,r3
   1b108:	10802014 	ori	r2,r2,128
   1b10c:	8880030d 	sth	r2,12(r17)
   1b110:	a589883a 	add	r4,r20,r22
   1b114:	adadc83a 	sub	r22,r21,r22
   1b118:	8d400515 	stw	r21,20(r17)
   1b11c:	8d800215 	stw	r22,8(r17)
   1b120:	8d000415 	stw	r20,16(r17)
   1b124:	89000015 	stw	r4,0(r17)
   1b128:	802b883a 	mov	r21,r16
   1b12c:	802d883a 	mov	r22,r16
   1b130:	b00d883a 	mov	r6,r22
   1b134:	e00b883a 	mov	r5,fp
   1b138:	001c6740 	call	1c674 <memmove>
   1b13c:	88800217 	ldw	r2,8(r17)
   1b140:	89000017 	ldw	r4,0(r17)
   1b144:	90c00217 	ldw	r3,8(r18)
   1b148:	1545c83a 	sub	r2,r2,r21
   1b14c:	2589883a 	add	r4,r4,r22
   1b150:	88800215 	stw	r2,8(r17)
   1b154:	89000015 	stw	r4,0(r17)
   1b158:	1c21c83a 	sub	r16,r3,r16
   1b15c:	94000215 	stw	r16,8(r18)
   1b160:	80001726 	beq	r16,zero,1b1c0 <__ssprint_r+0x198>
   1b164:	bf000017 	ldw	fp,0(r23)
   1b168:	bc000117 	ldw	r16,4(r23)
   1b16c:	bdc00204 	addi	r23,r23,8
   1b170:	003fc206 	br	1b07c <_gp+0xffff3f74>
   1b174:	802b883a 	mov	r21,r16
   1b178:	802d883a 	mov	r22,r16
   1b17c:	003fec06 	br	1b130 <_gp+0xffff4028>
   1b180:	9809883a 	mov	r4,r19
   1b184:	001c7d00 	call	1c7d0 <_realloc_r>
   1b188:	1029883a 	mov	r20,r2
   1b18c:	103fe01e 	bne	r2,zero,1b110 <_gp+0xffff4008>
   1b190:	89400417 	ldw	r5,16(r17)
   1b194:	9809883a 	mov	r4,r19
   1b198:	00198000 	call	19800 <_free_r>
   1b19c:	88c0030b 	ldhu	r3,12(r17)
   1b1a0:	00800304 	movi	r2,12
   1b1a4:	98800015 	stw	r2,0(r19)
   1b1a8:	18c01014 	ori	r3,r3,64
   1b1ac:	88c0030d 	sth	r3,12(r17)
   1b1b0:	00bfffc4 	movi	r2,-1
   1b1b4:	90000215 	stw	zero,8(r18)
   1b1b8:	90000115 	stw	zero,4(r18)
   1b1bc:	00000206 	br	1b1c8 <__ssprint_r+0x1a0>
   1b1c0:	90000115 	stw	zero,4(r18)
   1b1c4:	0005883a 	mov	r2,zero
   1b1c8:	dfc00917 	ldw	ra,36(sp)
   1b1cc:	df000817 	ldw	fp,32(sp)
   1b1d0:	ddc00717 	ldw	r23,28(sp)
   1b1d4:	dd800617 	ldw	r22,24(sp)
   1b1d8:	dd400517 	ldw	r21,20(sp)
   1b1dc:	dd000417 	ldw	r20,16(sp)
   1b1e0:	dcc00317 	ldw	r19,12(sp)
   1b1e4:	dc800217 	ldw	r18,8(sp)
   1b1e8:	dc400117 	ldw	r17,4(sp)
   1b1ec:	dc000017 	ldw	r16,0(sp)
   1b1f0:	dec00a04 	addi	sp,sp,40
   1b1f4:	f800283a 	ret

0001b1f8 <___svfiprintf_internal_r>:
   1b1f8:	2880030b 	ldhu	r2,12(r5)
   1b1fc:	deffc804 	addi	sp,sp,-224
   1b200:	dcc03115 	stw	r19,196(sp)
   1b204:	dfc03715 	stw	ra,220(sp)
   1b208:	df003615 	stw	fp,216(sp)
   1b20c:	ddc03515 	stw	r23,212(sp)
   1b210:	dd803415 	stw	r22,208(sp)
   1b214:	dd403315 	stw	r21,204(sp)
   1b218:	dd003215 	stw	r20,200(sp)
   1b21c:	dc803015 	stw	r18,192(sp)
   1b220:	dc402f15 	stw	r17,188(sp)
   1b224:	dc002e15 	stw	r16,184(sp)
   1b228:	d9402315 	stw	r5,140(sp)
   1b22c:	d9002715 	stw	r4,156(sp)
   1b230:	1080200c 	andi	r2,r2,128
   1b234:	d9c02415 	stw	r7,144(sp)
   1b238:	3027883a 	mov	r19,r6
   1b23c:	10000226 	beq	r2,zero,1b248 <___svfiprintf_internal_r+0x50>
   1b240:	28800417 	ldw	r2,16(r5)
   1b244:	10046d26 	beq	r2,zero,1c3fc <___svfiprintf_internal_r+0x1204>
   1b248:	d8801a04 	addi	r2,sp,104
   1b24c:	d8c019c4 	addi	r3,sp,103
   1b250:	058000b4 	movhi	r22,2
   1b254:	10c9c83a 	sub	r4,r2,r3
   1b258:	b5b9ed04 	addi	r22,r22,-6220
   1b25c:	d8801e15 	stw	r2,120(sp)
   1b260:	d8c01f15 	stw	r3,124(sp)
   1b264:	dec01a15 	stw	sp,104(sp)
   1b268:	d8001c15 	stw	zero,112(sp)
   1b26c:	d8001b15 	stw	zero,108(sp)
   1b270:	d811883a 	mov	r8,sp
   1b274:	d8002915 	stw	zero,164(sp)
   1b278:	d8002615 	stw	zero,152(sp)
   1b27c:	d9002c15 	stw	r4,176(sp)
   1b280:	98800007 	ldb	r2,0(r19)
   1b284:	10031426 	beq	r2,zero,1bed8 <___svfiprintf_internal_r+0xce0>
   1b288:	00c00944 	movi	r3,37
   1b28c:	9825883a 	mov	r18,r19
   1b290:	10c0021e 	bne	r2,r3,1b29c <___svfiprintf_internal_r+0xa4>
   1b294:	00001406 	br	1b2e8 <___svfiprintf_internal_r+0xf0>
   1b298:	10c00326 	beq	r2,r3,1b2a8 <___svfiprintf_internal_r+0xb0>
   1b29c:	94800044 	addi	r18,r18,1
   1b2a0:	90800007 	ldb	r2,0(r18)
   1b2a4:	103ffc1e 	bne	r2,zero,1b298 <_gp+0xffff4190>
   1b2a8:	94e1c83a 	sub	r16,r18,r19
   1b2ac:	80000e26 	beq	r16,zero,1b2e8 <___svfiprintf_internal_r+0xf0>
   1b2b0:	d8c01c17 	ldw	r3,112(sp)
   1b2b4:	d8801b17 	ldw	r2,108(sp)
   1b2b8:	44c00015 	stw	r19,0(r8)
   1b2bc:	1c07883a 	add	r3,r3,r16
   1b2c0:	10800044 	addi	r2,r2,1
   1b2c4:	d8c01c15 	stw	r3,112(sp)
   1b2c8:	44000115 	stw	r16,4(r8)
   1b2cc:	d8801b15 	stw	r2,108(sp)
   1b2d0:	00c001c4 	movi	r3,7
   1b2d4:	18835c16 	blt	r3,r2,1c048 <___svfiprintf_internal_r+0xe50>
   1b2d8:	42000204 	addi	r8,r8,8
   1b2dc:	d9402617 	ldw	r5,152(sp)
   1b2e0:	2c0b883a 	add	r5,r5,r16
   1b2e4:	d9402615 	stw	r5,152(sp)
   1b2e8:	90800007 	ldb	r2,0(r18)
   1b2ec:	1002fc26 	beq	r2,zero,1bee0 <___svfiprintf_internal_r+0xce8>
   1b2f0:	0023883a 	mov	r17,zero
   1b2f4:	00bfffc4 	movi	r2,-1
   1b2f8:	0021883a 	mov	r16,zero
   1b2fc:	94c00044 	addi	r19,r18,1
   1b300:	90c00047 	ldb	r3,1(r18)
   1b304:	dc402105 	stb	r17,132(sp)
   1b308:	d8001d85 	stb	zero,118(sp)
   1b30c:	002b883a 	mov	r21,zero
   1b310:	d8802015 	stw	r2,128(sp)
   1b314:	d8002515 	stw	zero,148(sp)
   1b318:	04801604 	movi	r18,88
   1b31c:	05000244 	movi	r20,9
   1b320:	402f883a 	mov	r23,r8
   1b324:	8023883a 	mov	r17,r16
   1b328:	9cc00044 	addi	r19,r19,1
   1b32c:	18bff804 	addi	r2,r3,-32
   1b330:	9081fb36 	bltu	r18,r2,1bb20 <___svfiprintf_internal_r+0x928>
   1b334:	100490ba 	slli	r2,r2,2
   1b338:	010000b4 	movhi	r4,2
   1b33c:	212cd304 	addi	r4,r4,-19636
   1b340:	1105883a 	add	r2,r2,r4
   1b344:	10800017 	ldw	r2,0(r2)
   1b348:	1000683a 	jmp	r2
   1b34c:	0001b54c 	andi	zero,zero,1749
   1b350:	0001bb20 	cmpeqi	zero,zero,1772
   1b354:	0001bb20 	cmpeqi	zero,zero,1772
   1b358:	0001b540 	call	1b54 <__alt_mem_onchip_memory-0xe4ac>
   1b35c:	0001bb20 	cmpeqi	zero,zero,1772
   1b360:	0001bb20 	cmpeqi	zero,zero,1772
   1b364:	0001bb20 	cmpeqi	zero,zero,1772
   1b368:	0001bb20 	cmpeqi	zero,zero,1772
   1b36c:	0001bb20 	cmpeqi	zero,zero,1772
   1b370:	0001bb20 	cmpeqi	zero,zero,1772
   1b374:	0001b4b0 	cmpltui	zero,zero,1746
   1b378:	0001b6ac 	andhi	zero,zero,1754
   1b37c:	0001bb20 	cmpeqi	zero,zero,1772
   1b380:	0001b4d8 	cmpnei	zero,zero,1747
   1b384:	0001bb5c 	xori	zero,zero,1773
   1b388:	0001bb20 	cmpeqi	zero,zero,1772
   1b38c:	0001bb50 	cmplti	zero,zero,1773
   1b390:	0001bae4 	muli	zero,zero,1771
   1b394:	0001bae4 	muli	zero,zero,1771
   1b398:	0001bae4 	muli	zero,zero,1771
   1b39c:	0001bae4 	muli	zero,zero,1771
   1b3a0:	0001bae4 	muli	zero,zero,1771
   1b3a4:	0001bae4 	muli	zero,zero,1771
   1b3a8:	0001bae4 	muli	zero,zero,1771
   1b3ac:	0001bae4 	muli	zero,zero,1771
   1b3b0:	0001bae4 	muli	zero,zero,1771
   1b3b4:	0001bb20 	cmpeqi	zero,zero,1772
   1b3b8:	0001bb20 	cmpeqi	zero,zero,1772
   1b3bc:	0001bb20 	cmpeqi	zero,zero,1772
   1b3c0:	0001bb20 	cmpeqi	zero,zero,1772
   1b3c4:	0001bb20 	cmpeqi	zero,zero,1772
   1b3c8:	0001bb20 	cmpeqi	zero,zero,1772
   1b3cc:	0001bb20 	cmpeqi	zero,zero,1772
   1b3d0:	0001bb20 	cmpeqi	zero,zero,1772
   1b3d4:	0001bb20 	cmpeqi	zero,zero,1772
   1b3d8:	0001bb20 	cmpeqi	zero,zero,1772
   1b3dc:	0001ba68 	cmpgeui	zero,zero,1769
   1b3e0:	0001bb20 	cmpeqi	zero,zero,1772
   1b3e4:	0001bb20 	cmpeqi	zero,zero,1772
   1b3e8:	0001bb20 	cmpeqi	zero,zero,1772
   1b3ec:	0001bb20 	cmpeqi	zero,zero,1772
   1b3f0:	0001bb20 	cmpeqi	zero,zero,1772
   1b3f4:	0001bb20 	cmpeqi	zero,zero,1772
   1b3f8:	0001bb20 	cmpeqi	zero,zero,1772
   1b3fc:	0001bb20 	cmpeqi	zero,zero,1772
   1b400:	0001bb20 	cmpeqi	zero,zero,1772
   1b404:	0001bb20 	cmpeqi	zero,zero,1772
   1b408:	0001bc18 	cmpnei	zero,zero,1776
   1b40c:	0001bb20 	cmpeqi	zero,zero,1772
   1b410:	0001bb20 	cmpeqi	zero,zero,1772
   1b414:	0001bb20 	cmpeqi	zero,zero,1772
   1b418:	0001bb20 	cmpeqi	zero,zero,1772
   1b41c:	0001bb20 	cmpeqi	zero,zero,1772
   1b420:	0001bba4 	muli	zero,zero,1774
   1b424:	0001bb20 	cmpeqi	zero,zero,1772
   1b428:	0001bb20 	cmpeqi	zero,zero,1772
   1b42c:	0001b8a4 	muli	zero,zero,1762
   1b430:	0001bb20 	cmpeqi	zero,zero,1772
   1b434:	0001bb20 	cmpeqi	zero,zero,1772
   1b438:	0001bb20 	cmpeqi	zero,zero,1772
   1b43c:	0001bb20 	cmpeqi	zero,zero,1772
   1b440:	0001bb20 	cmpeqi	zero,zero,1772
   1b444:	0001bb20 	cmpeqi	zero,zero,1772
   1b448:	0001bb20 	cmpeqi	zero,zero,1772
   1b44c:	0001bb20 	cmpeqi	zero,zero,1772
   1b450:	0001bb20 	cmpeqi	zero,zero,1772
   1b454:	0001bb20 	cmpeqi	zero,zero,1772
   1b458:	0001b770 	cmpltui	zero,zero,1757
   1b45c:	0001b954 	movui	zero,1765
   1b460:	0001bb20 	cmpeqi	zero,zero,1772
   1b464:	0001bb20 	cmpeqi	zero,zero,1772
   1b468:	0001bb20 	cmpeqi	zero,zero,1772
   1b46c:	0001b948 	cmpgei	zero,zero,1765
   1b470:	0001b954 	movui	zero,1765
   1b474:	0001bb20 	cmpeqi	zero,zero,1772
   1b478:	0001bb20 	cmpeqi	zero,zero,1772
   1b47c:	0001b934 	movhi	zero,1764
   1b480:	0001bb20 	cmpeqi	zero,zero,1772
   1b484:	0001b8f4 	movhi	zero,1763
   1b488:	0001b6c0 	call	1b6c <__alt_mem_onchip_memory-0xe494>
   1b48c:	0001b4e4 	muli	zero,zero,1747
   1b490:	0001ba5c 	xori	zero,zero,1769
   1b494:	0001bb20 	cmpeqi	zero,zero,1772
   1b498:	0001ba08 	cmpgei	zero,zero,1768
   1b49c:	0001bb20 	cmpeqi	zero,zero,1772
   1b4a0:	0001b624 	muli	zero,zero,1752
   1b4a4:	0001bb20 	cmpeqi	zero,zero,1772
   1b4a8:	0001bb20 	cmpeqi	zero,zero,1772
   1b4ac:	0001b570 	cmpltui	zero,zero,1749
   1b4b0:	d9002417 	ldw	r4,144(sp)
   1b4b4:	d9402417 	ldw	r5,144(sp)
   1b4b8:	21000017 	ldw	r4,0(r4)
   1b4bc:	28800104 	addi	r2,r5,4
   1b4c0:	d9002515 	stw	r4,148(sp)
   1b4c4:	20032b0e 	bge	r4,zero,1c174 <___svfiprintf_internal_r+0xf7c>
   1b4c8:	d8c02517 	ldw	r3,148(sp)
   1b4cc:	d8802415 	stw	r2,144(sp)
   1b4d0:	00c7c83a 	sub	r3,zero,r3
   1b4d4:	d8c02515 	stw	r3,148(sp)
   1b4d8:	8c400114 	ori	r17,r17,4
   1b4dc:	98c00007 	ldb	r3,0(r19)
   1b4e0:	003f9106 	br	1b328 <_gp+0xffff4220>
   1b4e4:	00800c04 	movi	r2,48
   1b4e8:	d9402417 	ldw	r5,144(sp)
   1b4ec:	d9002017 	ldw	r4,128(sp)
   1b4f0:	d8801d05 	stb	r2,116(sp)
   1b4f4:	00801e04 	movi	r2,120
   1b4f8:	d8801d45 	stb	r2,117(sp)
   1b4fc:	d8001d85 	stb	zero,118(sp)
   1b500:	b811883a 	mov	r8,r23
   1b504:	28c00104 	addi	r3,r5,4
   1b508:	2c800017 	ldw	r18,0(r5)
   1b50c:	0029883a 	mov	r20,zero
   1b510:	88800094 	ori	r2,r17,2
   1b514:	20036316 	blt	r4,zero,1c2a4 <___svfiprintf_internal_r+0x10ac>
   1b518:	00bfdfc4 	movi	r2,-129
   1b51c:	88a0703a 	and	r16,r17,r2
   1b520:	d8c02415 	stw	r3,144(sp)
   1b524:	84000094 	ori	r16,r16,2
   1b528:	90031c26 	beq	r18,zero,1c19c <___svfiprintf_internal_r+0xfa4>
   1b52c:	014000b4 	movhi	r5,2
   1b530:	29798d04 	addi	r5,r5,-6604
   1b534:	002b883a 	mov	r21,zero
   1b538:	d9402915 	stw	r5,164(sp)
   1b53c:	00002906 	br	1b5e4 <___svfiprintf_internal_r+0x3ec>
   1b540:	8c400054 	ori	r17,r17,1
   1b544:	98c00007 	ldb	r3,0(r19)
   1b548:	003f7706 	br	1b328 <_gp+0xffff4220>
   1b54c:	a8803fcc 	andi	r2,r21,255
   1b550:	1080201c 	xori	r2,r2,128
   1b554:	10bfe004 	addi	r2,r2,-128
   1b558:	10032a1e 	bne	r2,zero,1c204 <___svfiprintf_internal_r+0x100c>
   1b55c:	00c00044 	movi	r3,1
   1b560:	d8c02105 	stb	r3,132(sp)
   1b564:	05400804 	movi	r21,32
   1b568:	98c00007 	ldb	r3,0(r19)
   1b56c:	003f6e06 	br	1b328 <_gp+0xffff4220>
   1b570:	8821883a 	mov	r16,r17
   1b574:	dc402103 	ldbu	r17,132(sp)
   1b578:	b811883a 	mov	r8,r23
   1b57c:	8c403fcc 	andi	r17,r17,255
   1b580:	8803f01e 	bne	r17,zero,1c544 <___svfiprintf_internal_r+0x134c>
   1b584:	008000b4 	movhi	r2,2
   1b588:	10b98d04 	addi	r2,r2,-6604
   1b58c:	d8802915 	stw	r2,164(sp)
   1b590:	8080080c 	andi	r2,r16,32
   1b594:	1000cd26 	beq	r2,zero,1b8cc <___svfiprintf_internal_r+0x6d4>
   1b598:	d9002417 	ldw	r4,144(sp)
   1b59c:	24800017 	ldw	r18,0(r4)
   1b5a0:	25000117 	ldw	r20,4(r4)
   1b5a4:	21000204 	addi	r4,r4,8
   1b5a8:	d9002415 	stw	r4,144(sp)
   1b5ac:	8080004c 	andi	r2,r16,1
   1b5b0:	1002c726 	beq	r2,zero,1c0d0 <___svfiprintf_internal_r+0xed8>
   1b5b4:	9504b03a 	or	r2,r18,r20
   1b5b8:	1003061e 	bne	r2,zero,1c1d4 <___svfiprintf_internal_r+0xfdc>
   1b5bc:	d9002017 	ldw	r4,128(sp)
   1b5c0:	d8001d85 	stb	zero,118(sp)
   1b5c4:	20033e16 	blt	r4,zero,1c2c0 <___svfiprintf_internal_r+0x10c8>
   1b5c8:	00bfdfc4 	movi	r2,-129
   1b5cc:	80a0703a 	and	r16,r16,r2
   1b5d0:	d9402017 	ldw	r5,128(sp)
   1b5d4:	002b883a 	mov	r21,zero
   1b5d8:	28002826 	beq	r5,zero,1b67c <___svfiprintf_internal_r+0x484>
   1b5dc:	0025883a 	mov	r18,zero
   1b5e0:	0029883a 	mov	r20,zero
   1b5e4:	d9002917 	ldw	r4,164(sp)
   1b5e8:	dc401a04 	addi	r17,sp,104
   1b5ec:	908003cc 	andi	r2,r18,15
   1b5f0:	a006973a 	slli	r3,r20,28
   1b5f4:	2085883a 	add	r2,r4,r2
   1b5f8:	9024d13a 	srli	r18,r18,4
   1b5fc:	10800003 	ldbu	r2,0(r2)
   1b600:	a028d13a 	srli	r20,r20,4
   1b604:	8c7fffc4 	addi	r17,r17,-1
   1b608:	1ca4b03a 	or	r18,r3,r18
   1b60c:	88800005 	stb	r2,0(r17)
   1b610:	9504b03a 	or	r2,r18,r20
   1b614:	103ff51e 	bne	r2,zero,1b5ec <_gp+0xffff44e4>
   1b618:	d8801e17 	ldw	r2,120(sp)
   1b61c:	1469c83a 	sub	r20,r2,r17
   1b620:	00001906 	br	1b688 <___svfiprintf_internal_r+0x490>
   1b624:	8821883a 	mov	r16,r17
   1b628:	dc402103 	ldbu	r17,132(sp)
   1b62c:	b811883a 	mov	r8,r23
   1b630:	8c403fcc 	andi	r17,r17,255
   1b634:	8803d01e 	bne	r17,zero,1c578 <___svfiprintf_internal_r+0x1380>
   1b638:	8080080c 	andi	r2,r16,32
   1b63c:	10016126 	beq	r2,zero,1bbc4 <___svfiprintf_internal_r+0x9cc>
   1b640:	d9002417 	ldw	r4,144(sp)
   1b644:	d9402017 	ldw	r5,128(sp)
   1b648:	d8001d85 	stb	zero,118(sp)
   1b64c:	20c00204 	addi	r3,r4,8
   1b650:	24800017 	ldw	r18,0(r4)
   1b654:	25000117 	ldw	r20,4(r4)
   1b658:	28030f16 	blt	r5,zero,1c298 <___svfiprintf_internal_r+0x10a0>
   1b65c:	013fdfc4 	movi	r4,-129
   1b660:	9504b03a 	or	r2,r18,r20
   1b664:	d8c02415 	stw	r3,144(sp)
   1b668:	8120703a 	and	r16,r16,r4
   1b66c:	002b883a 	mov	r21,zero
   1b670:	1000cd1e 	bne	r2,zero,1b9a8 <___svfiprintf_internal_r+0x7b0>
   1b674:	d8c02017 	ldw	r3,128(sp)
   1b678:	1803141e 	bne	r3,zero,1c2cc <___svfiprintf_internal_r+0x10d4>
   1b67c:	d8002015 	stw	zero,128(sp)
   1b680:	0029883a 	mov	r20,zero
   1b684:	dc401a04 	addi	r17,sp,104
   1b688:	dc802017 	ldw	r18,128(sp)
   1b68c:	9500010e 	bge	r18,r20,1b694 <___svfiprintf_internal_r+0x49c>
   1b690:	a025883a 	mov	r18,r20
   1b694:	ad403fcc 	andi	r21,r21,255
   1b698:	ad40201c 	xori	r21,r21,128
   1b69c:	ad7fe004 	addi	r21,r21,-128
   1b6a0:	a8003f26 	beq	r21,zero,1b7a0 <___svfiprintf_internal_r+0x5a8>
   1b6a4:	94800044 	addi	r18,r18,1
   1b6a8:	00003d06 	br	1b7a0 <___svfiprintf_internal_r+0x5a8>
   1b6ac:	00c00044 	movi	r3,1
   1b6b0:	d8c02105 	stb	r3,132(sp)
   1b6b4:	05400ac4 	movi	r21,43
   1b6b8:	98c00007 	ldb	r3,0(r19)
   1b6bc:	003f1a06 	br	1b328 <_gp+0xffff4220>
   1b6c0:	8821883a 	mov	r16,r17
   1b6c4:	dc402103 	ldbu	r17,132(sp)
   1b6c8:	b811883a 	mov	r8,r23
   1b6cc:	8c403fcc 	andi	r17,r17,255
   1b6d0:	8803a71e 	bne	r17,zero,1c570 <___svfiprintf_internal_r+0x1378>
   1b6d4:	8080080c 	andi	r2,r16,32
   1b6d8:	10015726 	beq	r2,zero,1bc38 <___svfiprintf_internal_r+0xa40>
   1b6dc:	d8c02417 	ldw	r3,144(sp)
   1b6e0:	d9002017 	ldw	r4,128(sp)
   1b6e4:	d8001d85 	stb	zero,118(sp)
   1b6e8:	18800204 	addi	r2,r3,8
   1b6ec:	1c800017 	ldw	r18,0(r3)
   1b6f0:	1d000117 	ldw	r20,4(r3)
   1b6f4:	2002db16 	blt	r4,zero,1c264 <___svfiprintf_internal_r+0x106c>
   1b6f8:	013fdfc4 	movi	r4,-129
   1b6fc:	9506b03a 	or	r3,r18,r20
   1b700:	d8802415 	stw	r2,144(sp)
   1b704:	8120703a 	and	r16,r16,r4
   1b708:	18015826 	beq	r3,zero,1bc6c <___svfiprintf_internal_r+0xa74>
   1b70c:	002b883a 	mov	r21,zero
   1b710:	dc401a04 	addi	r17,sp,104
   1b714:	9006d0fa 	srli	r3,r18,3
   1b718:	a008977a 	slli	r4,r20,29
   1b71c:	a028d0fa 	srli	r20,r20,3
   1b720:	948001cc 	andi	r18,r18,7
   1b724:	90800c04 	addi	r2,r18,48
   1b728:	8c7fffc4 	addi	r17,r17,-1
   1b72c:	20e4b03a 	or	r18,r4,r3
   1b730:	88800005 	stb	r2,0(r17)
   1b734:	9506b03a 	or	r3,r18,r20
   1b738:	183ff61e 	bne	r3,zero,1b714 <_gp+0xffff460c>
   1b73c:	80c0004c 	andi	r3,r16,1
   1b740:	18028926 	beq	r3,zero,1c168 <___svfiprintf_internal_r+0xf70>
   1b744:	10803fcc 	andi	r2,r2,255
   1b748:	1080201c 	xori	r2,r2,128
   1b74c:	10bfe004 	addi	r2,r2,-128
   1b750:	00c00c04 	movi	r3,48
   1b754:	10ffb026 	beq	r2,r3,1b618 <_gp+0xffff4510>
   1b758:	88ffffc5 	stb	r3,-1(r17)
   1b75c:	d8c01e17 	ldw	r3,120(sp)
   1b760:	88bfffc4 	addi	r2,r17,-1
   1b764:	1023883a 	mov	r17,r2
   1b768:	18a9c83a 	sub	r20,r3,r2
   1b76c:	003fc606 	br	1b688 <_gp+0xffff4580>
   1b770:	d8c02417 	ldw	r3,144(sp)
   1b774:	04800044 	movi	r18,1
   1b778:	8821883a 	mov	r16,r17
   1b77c:	18800017 	ldw	r2,0(r3)
   1b780:	18c00104 	addi	r3,r3,4
   1b784:	b811883a 	mov	r8,r23
   1b788:	d8001d85 	stb	zero,118(sp)
   1b78c:	d8801005 	stb	r2,64(sp)
   1b790:	d8c02415 	stw	r3,144(sp)
   1b794:	9029883a 	mov	r20,r18
   1b798:	dc401004 	addi	r17,sp,64
   1b79c:	d8002015 	stw	zero,128(sp)
   1b7a0:	80c0008c 	andi	r3,r16,2
   1b7a4:	d8c02115 	stw	r3,132(sp)
   1b7a8:	18000126 	beq	r3,zero,1b7b0 <___svfiprintf_internal_r+0x5b8>
   1b7ac:	94800084 	addi	r18,r18,2
   1b7b0:	80c0210c 	andi	r3,r16,132
   1b7b4:	d8c02215 	stw	r3,136(sp)
   1b7b8:	1801321e 	bne	r3,zero,1bc84 <___svfiprintf_internal_r+0xa8c>
   1b7bc:	d9002517 	ldw	r4,148(sp)
   1b7c0:	24b9c83a 	sub	fp,r4,r18
   1b7c4:	07012f0e 	bge	zero,fp,1bc84 <___svfiprintf_internal_r+0xa8c>
   1b7c8:	02400404 	movi	r9,16
   1b7cc:	d8c01c17 	ldw	r3,112(sp)
   1b7d0:	d8801b17 	ldw	r2,108(sp)
   1b7d4:	4f03250e 	bge	r9,fp,1c46c <___svfiprintf_internal_r+0x1274>
   1b7d8:	010000b4 	movhi	r4,2
   1b7dc:	2139f104 	addi	r4,r4,-6204
   1b7e0:	dc002a15 	stw	r16,168(sp)
   1b7e4:	dc402b15 	stw	r17,172(sp)
   1b7e8:	d9002815 	stw	r4,160(sp)
   1b7ec:	e023883a 	mov	r17,fp
   1b7f0:	482f883a 	mov	r23,r9
   1b7f4:	9839883a 	mov	fp,r19
   1b7f8:	054001c4 	movi	r21,7
   1b7fc:	9027883a 	mov	r19,r18
   1b800:	dc002717 	ldw	r16,156(sp)
   1b804:	dc802317 	ldw	r18,140(sp)
   1b808:	00000306 	br	1b818 <___svfiprintf_internal_r+0x620>
   1b80c:	8c7ffc04 	addi	r17,r17,-16
   1b810:	42000204 	addi	r8,r8,8
   1b814:	bc40130e 	bge	r23,r17,1b864 <___svfiprintf_internal_r+0x66c>
   1b818:	014000b4 	movhi	r5,2
   1b81c:	18c00404 	addi	r3,r3,16
   1b820:	10800044 	addi	r2,r2,1
   1b824:	2979f104 	addi	r5,r5,-6204
   1b828:	41400015 	stw	r5,0(r8)
   1b82c:	45c00115 	stw	r23,4(r8)
   1b830:	d8c01c15 	stw	r3,112(sp)
   1b834:	d8801b15 	stw	r2,108(sp)
   1b838:	a8bff40e 	bge	r21,r2,1b80c <_gp+0xffff4704>
   1b83c:	d9801a04 	addi	r6,sp,104
   1b840:	900b883a 	mov	r5,r18
   1b844:	8009883a 	mov	r4,r16
   1b848:	001b0280 	call	1b028 <__ssprint_r>
   1b84c:	1001aa1e 	bne	r2,zero,1bef8 <___svfiprintf_internal_r+0xd00>
   1b850:	8c7ffc04 	addi	r17,r17,-16
   1b854:	d8c01c17 	ldw	r3,112(sp)
   1b858:	d8801b17 	ldw	r2,108(sp)
   1b85c:	d811883a 	mov	r8,sp
   1b860:	bc7fed16 	blt	r23,r17,1b818 <_gp+0xffff4710>
   1b864:	9825883a 	mov	r18,r19
   1b868:	dc002a17 	ldw	r16,168(sp)
   1b86c:	e027883a 	mov	r19,fp
   1b870:	8839883a 	mov	fp,r17
   1b874:	dc402b17 	ldw	r17,172(sp)
   1b878:	d9002817 	ldw	r4,160(sp)
   1b87c:	e0c7883a 	add	r3,fp,r3
   1b880:	10800044 	addi	r2,r2,1
   1b884:	41000015 	stw	r4,0(r8)
   1b888:	47000115 	stw	fp,4(r8)
   1b88c:	d8c01c15 	stw	r3,112(sp)
   1b890:	d8801b15 	stw	r2,108(sp)
   1b894:	010001c4 	movi	r4,7
   1b898:	20821616 	blt	r4,r2,1c0f4 <___svfiprintf_internal_r+0xefc>
   1b89c:	42000204 	addi	r8,r8,8
   1b8a0:	0000fa06 	br	1bc8c <___svfiprintf_internal_r+0xa94>
   1b8a4:	8821883a 	mov	r16,r17
   1b8a8:	dc402103 	ldbu	r17,132(sp)
   1b8ac:	b811883a 	mov	r8,r23
   1b8b0:	8c403fcc 	andi	r17,r17,255
   1b8b4:	8803361e 	bne	r17,zero,1c590 <___svfiprintf_internal_r+0x1398>
   1b8b8:	014000b4 	movhi	r5,2
   1b8bc:	29798804 	addi	r5,r5,-6624
   1b8c0:	d9402915 	stw	r5,164(sp)
   1b8c4:	8080080c 	andi	r2,r16,32
   1b8c8:	103f331e 	bne	r2,zero,1b598 <_gp+0xffff4490>
   1b8cc:	8080040c 	andi	r2,r16,16
   1b8d0:	1002551e 	bne	r2,zero,1c228 <___svfiprintf_internal_r+0x1030>
   1b8d4:	8080100c 	andi	r2,r16,64
   1b8d8:	1002a626 	beq	r2,zero,1c374 <___svfiprintf_internal_r+0x117c>
   1b8dc:	d8802417 	ldw	r2,144(sp)
   1b8e0:	0029883a 	mov	r20,zero
   1b8e4:	1480000b 	ldhu	r18,0(r2)
   1b8e8:	10800104 	addi	r2,r2,4
   1b8ec:	d8802415 	stw	r2,144(sp)
   1b8f0:	003f2e06 	br	1b5ac <_gp+0xffff44a4>
   1b8f4:	8821883a 	mov	r16,r17
   1b8f8:	dc402103 	ldbu	r17,132(sp)
   1b8fc:	b811883a 	mov	r8,r23
   1b900:	8c403fcc 	andi	r17,r17,255
   1b904:	88030b1e 	bne	r17,zero,1c534 <___svfiprintf_internal_r+0x133c>
   1b908:	8080080c 	andi	r2,r16,32
   1b90c:	1002271e 	bne	r2,zero,1c1ac <___svfiprintf_internal_r+0xfb4>
   1b910:	8080040c 	andi	r2,r16,16
   1b914:	10028e26 	beq	r2,zero,1c350 <___svfiprintf_internal_r+0x1158>
   1b918:	d8c02417 	ldw	r3,144(sp)
   1b91c:	d9002617 	ldw	r4,152(sp)
   1b920:	18800017 	ldw	r2,0(r3)
   1b924:	18c00104 	addi	r3,r3,4
   1b928:	d8c02415 	stw	r3,144(sp)
   1b92c:	11000015 	stw	r4,0(r2)
   1b930:	003e5306 	br	1b280 <_gp+0xffff4178>
   1b934:	98c00007 	ldb	r3,0(r19)
   1b938:	01401b04 	movi	r5,108
   1b93c:	19424f26 	beq	r3,r5,1c27c <___svfiprintf_internal_r+0x1084>
   1b940:	8c400414 	ori	r17,r17,16
   1b944:	003e7806 	br	1b328 <_gp+0xffff4220>
   1b948:	8c401014 	ori	r17,r17,64
   1b94c:	98c00007 	ldb	r3,0(r19)
   1b950:	003e7506 	br	1b328 <_gp+0xffff4220>
   1b954:	8821883a 	mov	r16,r17
   1b958:	dc402103 	ldbu	r17,132(sp)
   1b95c:	b811883a 	mov	r8,r23
   1b960:	8c403fcc 	andi	r17,r17,255
   1b964:	8802fe1e 	bne	r17,zero,1c560 <___svfiprintf_internal_r+0x1368>
   1b968:	8080080c 	andi	r2,r16,32
   1b96c:	10004626 	beq	r2,zero,1ba88 <___svfiprintf_internal_r+0x890>
   1b970:	d9002417 	ldw	r4,144(sp)
   1b974:	20800117 	ldw	r2,4(r4)
   1b978:	24800017 	ldw	r18,0(r4)
   1b97c:	21000204 	addi	r4,r4,8
   1b980:	d9002415 	stw	r4,144(sp)
   1b984:	1029883a 	mov	r20,r2
   1b988:	10004a16 	blt	r2,zero,1bab4 <___svfiprintf_internal_r+0x8bc>
   1b98c:	d9002017 	ldw	r4,128(sp)
   1b990:	dd401d83 	ldbu	r21,118(sp)
   1b994:	2001eb16 	blt	r4,zero,1c144 <___svfiprintf_internal_r+0xf4c>
   1b998:	00ffdfc4 	movi	r3,-129
   1b99c:	9504b03a 	or	r2,r18,r20
   1b9a0:	80e0703a 	and	r16,r16,r3
   1b9a4:	103f3326 	beq	r2,zero,1b674 <_gp+0xffff456c>
   1b9a8:	a0009426 	beq	r20,zero,1bbfc <___svfiprintf_internal_r+0xa04>
   1b9ac:	dc401a04 	addi	r17,sp,104
   1b9b0:	402f883a 	mov	r23,r8
   1b9b4:	9009883a 	mov	r4,r18
   1b9b8:	a00b883a 	mov	r5,r20
   1b9bc:	01800284 	movi	r6,10
   1b9c0:	000f883a 	mov	r7,zero
   1b9c4:	001d3300 	call	1d330 <__umoddi3>
   1b9c8:	10800c04 	addi	r2,r2,48
   1b9cc:	8c7fffc4 	addi	r17,r17,-1
   1b9d0:	9009883a 	mov	r4,r18
   1b9d4:	a00b883a 	mov	r5,r20
   1b9d8:	88800005 	stb	r2,0(r17)
   1b9dc:	01800284 	movi	r6,10
   1b9e0:	000f883a 	mov	r7,zero
   1b9e4:	001cd340 	call	1cd34 <__udivdi3>
   1b9e8:	1025883a 	mov	r18,r2
   1b9ec:	10c4b03a 	or	r2,r2,r3
   1b9f0:	1829883a 	mov	r20,r3
   1b9f4:	103fef1e 	bne	r2,zero,1b9b4 <_gp+0xffff48ac>
   1b9f8:	d9001e17 	ldw	r4,120(sp)
   1b9fc:	b811883a 	mov	r8,r23
   1ba00:	2469c83a 	sub	r20,r4,r17
   1ba04:	003f2006 	br	1b688 <_gp+0xffff4580>
   1ba08:	d8802417 	ldw	r2,144(sp)
   1ba0c:	8821883a 	mov	r16,r17
   1ba10:	d8001d85 	stb	zero,118(sp)
   1ba14:	14400017 	ldw	r17,0(r2)
   1ba18:	b811883a 	mov	r8,r23
   1ba1c:	15c00104 	addi	r23,r2,4
   1ba20:	88026c26 	beq	r17,zero,1c3d4 <___svfiprintf_internal_r+0x11dc>
   1ba24:	d8c02017 	ldw	r3,128(sp)
   1ba28:	18025f16 	blt	r3,zero,1c3a8 <___svfiprintf_internal_r+0x11b0>
   1ba2c:	180d883a 	mov	r6,r3
   1ba30:	000b883a 	mov	r5,zero
   1ba34:	8809883a 	mov	r4,r17
   1ba38:	da002d15 	stw	r8,180(sp)
   1ba3c:	0019bec0 	call	19bec <memchr>
   1ba40:	da002d17 	ldw	r8,180(sp)
   1ba44:	1002a526 	beq	r2,zero,1c4dc <___svfiprintf_internal_r+0x12e4>
   1ba48:	1469c83a 	sub	r20,r2,r17
   1ba4c:	dd401d83 	ldbu	r21,118(sp)
   1ba50:	ddc02415 	stw	r23,144(sp)
   1ba54:	d8002015 	stw	zero,128(sp)
   1ba58:	003f0b06 	br	1b688 <_gp+0xffff4580>
   1ba5c:	8c400814 	ori	r17,r17,32
   1ba60:	98c00007 	ldb	r3,0(r19)
   1ba64:	003e3006 	br	1b328 <_gp+0xffff4220>
   1ba68:	8821883a 	mov	r16,r17
   1ba6c:	dc402103 	ldbu	r17,132(sp)
   1ba70:	b811883a 	mov	r8,r23
   1ba74:	8c403fcc 	andi	r17,r17,255
   1ba78:	8802b01e 	bne	r17,zero,1c53c <___svfiprintf_internal_r+0x1344>
   1ba7c:	84000414 	ori	r16,r16,16
   1ba80:	8080080c 	andi	r2,r16,32
   1ba84:	103fba1e 	bne	r2,zero,1b970 <_gp+0xffff4868>
   1ba88:	8080040c 	andi	r2,r16,16
   1ba8c:	1001df1e 	bne	r2,zero,1c20c <___svfiprintf_internal_r+0x1014>
   1ba90:	8080100c 	andi	r2,r16,64
   1ba94:	10023d26 	beq	r2,zero,1c38c <___svfiprintf_internal_r+0x1194>
   1ba98:	d8802417 	ldw	r2,144(sp)
   1ba9c:	1480000f 	ldh	r18,0(r2)
   1baa0:	10800104 	addi	r2,r2,4
   1baa4:	d8802415 	stw	r2,144(sp)
   1baa8:	9029d7fa 	srai	r20,r18,31
   1baac:	a005883a 	mov	r2,r20
   1bab0:	103fb60e 	bge	r2,zero,1b98c <_gp+0xffff4884>
   1bab4:	d9402017 	ldw	r5,128(sp)
   1bab8:	04a5c83a 	sub	r18,zero,r18
   1babc:	05400b44 	movi	r21,45
   1bac0:	9004c03a 	cmpne	r2,r18,zero
   1bac4:	0529c83a 	sub	r20,zero,r20
   1bac8:	dd401d85 	stb	r21,118(sp)
   1bacc:	a0a9c83a 	sub	r20,r20,r2
   1bad0:	28026c16 	blt	r5,zero,1c484 <___svfiprintf_internal_r+0x128c>
   1bad4:	00bfdfc4 	movi	r2,-129
   1bad8:	80a0703a 	and	r16,r16,r2
   1badc:	a03fb31e 	bne	r20,zero,1b9ac <_gp+0xffff48a4>
   1bae0:	00004606 	br	1bbfc <___svfiprintf_internal_r+0xa04>
   1bae4:	9839883a 	mov	fp,r19
   1bae8:	d8002515 	stw	zero,148(sp)
   1baec:	1c3ff404 	addi	r16,r3,-48
   1baf0:	0009883a 	mov	r4,zero
   1baf4:	01400284 	movi	r5,10
   1baf8:	00144f80 	call	144f8 <__mulsi3>
   1bafc:	e0c00007 	ldb	r3,0(fp)
   1bb00:	8089883a 	add	r4,r16,r2
   1bb04:	9cc00044 	addi	r19,r19,1
   1bb08:	1c3ff404 	addi	r16,r3,-48
   1bb0c:	9839883a 	mov	fp,r19
   1bb10:	a43ff82e 	bgeu	r20,r16,1baf4 <_gp+0xffff49ec>
   1bb14:	d9002515 	stw	r4,148(sp)
   1bb18:	18bff804 	addi	r2,r3,-32
   1bb1c:	90be052e 	bgeu	r18,r2,1b334 <_gp+0xffff422c>
   1bb20:	8821883a 	mov	r16,r17
   1bb24:	dc402103 	ldbu	r17,132(sp)
   1bb28:	b811883a 	mov	r8,r23
   1bb2c:	8c403fcc 	andi	r17,r17,255
   1bb30:	88028d1e 	bne	r17,zero,1c568 <___svfiprintf_internal_r+0x1370>
   1bb34:	1800ea26 	beq	r3,zero,1bee0 <___svfiprintf_internal_r+0xce8>
   1bb38:	04800044 	movi	r18,1
   1bb3c:	d8c01005 	stb	r3,64(sp)
   1bb40:	d8001d85 	stb	zero,118(sp)
   1bb44:	9029883a 	mov	r20,r18
   1bb48:	dc401004 	addi	r17,sp,64
   1bb4c:	003f1306 	br	1b79c <_gp+0xffff4694>
   1bb50:	8c402014 	ori	r17,r17,128
   1bb54:	98c00007 	ldb	r3,0(r19)
   1bb58:	003df306 	br	1b328 <_gp+0xffff4220>
   1bb5c:	98c00007 	ldb	r3,0(r19)
   1bb60:	01000a84 	movi	r4,42
   1bb64:	9f000044 	addi	fp,r19,1
   1bb68:	19026326 	beq	r3,r4,1c4f8 <___svfiprintf_internal_r+0x1300>
   1bb6c:	1c3ff404 	addi	r16,r3,-48
   1bb70:	0009883a 	mov	r4,zero
   1bb74:	a4025636 	bltu	r20,r16,1c4d0 <___svfiprintf_internal_r+0x12d8>
   1bb78:	01400284 	movi	r5,10
   1bb7c:	00144f80 	call	144f8 <__mulsi3>
   1bb80:	e0c00007 	ldb	r3,0(fp)
   1bb84:	1409883a 	add	r4,r2,r16
   1bb88:	e4c00044 	addi	r19,fp,1
   1bb8c:	1c3ff404 	addi	r16,r3,-48
   1bb90:	9839883a 	mov	fp,r19
   1bb94:	a43ff82e 	bgeu	r20,r16,1bb78 <_gp+0xffff4a70>
   1bb98:	20020c16 	blt	r4,zero,1c3cc <___svfiprintf_internal_r+0x11d4>
   1bb9c:	d9002015 	stw	r4,128(sp)
   1bba0:	003de206 	br	1b32c <_gp+0xffff4224>
   1bba4:	8821883a 	mov	r16,r17
   1bba8:	dc402103 	ldbu	r17,132(sp)
   1bbac:	b811883a 	mov	r8,r23
   1bbb0:	8c403fcc 	andi	r17,r17,255
   1bbb4:	8802721e 	bne	r17,zero,1c580 <___svfiprintf_internal_r+0x1388>
   1bbb8:	84000414 	ori	r16,r16,16
   1bbbc:	8080080c 	andi	r2,r16,32
   1bbc0:	103e9f1e 	bne	r2,zero,1b640 <_gp+0xffff4538>
   1bbc4:	8080040c 	andi	r2,r16,16
   1bbc8:	10015326 	beq	r2,zero,1c118 <___svfiprintf_internal_r+0xf20>
   1bbcc:	d8c02417 	ldw	r3,144(sp)
   1bbd0:	d9002017 	ldw	r4,128(sp)
   1bbd4:	d8001d85 	stb	zero,118(sp)
   1bbd8:	18800104 	addi	r2,r3,4
   1bbdc:	1c800017 	ldw	r18,0(r3)
   1bbe0:	0029883a 	mov	r20,zero
   1bbe4:	20015516 	blt	r4,zero,1c13c <___svfiprintf_internal_r+0xf44>
   1bbe8:	00ffdfc4 	movi	r3,-129
   1bbec:	d8802415 	stw	r2,144(sp)
   1bbf0:	80e0703a 	and	r16,r16,r3
   1bbf4:	002b883a 	mov	r21,zero
   1bbf8:	903e9e26 	beq	r18,zero,1b674 <_gp+0xffff456c>
   1bbfc:	00800244 	movi	r2,9
   1bc00:	14bf6a36 	bltu	r2,r18,1b9ac <_gp+0xffff48a4>
   1bc04:	94800c04 	addi	r18,r18,48
   1bc08:	dc8019c5 	stb	r18,103(sp)
   1bc0c:	dd002c17 	ldw	r20,176(sp)
   1bc10:	dc4019c4 	addi	r17,sp,103
   1bc14:	003e9c06 	br	1b688 <_gp+0xffff4580>
   1bc18:	8821883a 	mov	r16,r17
   1bc1c:	dc402103 	ldbu	r17,132(sp)
   1bc20:	b811883a 	mov	r8,r23
   1bc24:	8c403fcc 	andi	r17,r17,255
   1bc28:	8802571e 	bne	r17,zero,1c588 <___svfiprintf_internal_r+0x1390>
   1bc2c:	84000414 	ori	r16,r16,16
   1bc30:	8080080c 	andi	r2,r16,32
   1bc34:	103ea91e 	bne	r2,zero,1b6dc <_gp+0xffff45d4>
   1bc38:	8080040c 	andi	r2,r16,16
   1bc3c:	10018026 	beq	r2,zero,1c240 <___svfiprintf_internal_r+0x1048>
   1bc40:	d9402417 	ldw	r5,144(sp)
   1bc44:	d8c02017 	ldw	r3,128(sp)
   1bc48:	d8001d85 	stb	zero,118(sp)
   1bc4c:	28800104 	addi	r2,r5,4
   1bc50:	2c800017 	ldw	r18,0(r5)
   1bc54:	0029883a 	mov	r20,zero
   1bc58:	18018216 	blt	r3,zero,1c264 <___svfiprintf_internal_r+0x106c>
   1bc5c:	00ffdfc4 	movi	r3,-129
   1bc60:	d8802415 	stw	r2,144(sp)
   1bc64:	80e0703a 	and	r16,r16,r3
   1bc68:	903ea81e 	bne	r18,zero,1b70c <_gp+0xffff4604>
   1bc6c:	d8802017 	ldw	r2,128(sp)
   1bc70:	002b883a 	mov	r21,zero
   1bc74:	1001f226 	beq	r2,zero,1c440 <___svfiprintf_internal_r+0x1248>
   1bc78:	0025883a 	mov	r18,zero
   1bc7c:	0029883a 	mov	r20,zero
   1bc80:	003ea306 	br	1b710 <_gp+0xffff4608>
   1bc84:	d8c01c17 	ldw	r3,112(sp)
   1bc88:	d8801b17 	ldw	r2,108(sp)
   1bc8c:	d9001d87 	ldb	r4,118(sp)
   1bc90:	20000b26 	beq	r4,zero,1bcc0 <___svfiprintf_internal_r+0xac8>
   1bc94:	d9001d84 	addi	r4,sp,118
   1bc98:	18c00044 	addi	r3,r3,1
   1bc9c:	10800044 	addi	r2,r2,1
   1bca0:	41000015 	stw	r4,0(r8)
   1bca4:	01000044 	movi	r4,1
   1bca8:	41000115 	stw	r4,4(r8)
   1bcac:	d8c01c15 	stw	r3,112(sp)
   1bcb0:	d8801b15 	stw	r2,108(sp)
   1bcb4:	010001c4 	movi	r4,7
   1bcb8:	2080f316 	blt	r4,r2,1c088 <___svfiprintf_internal_r+0xe90>
   1bcbc:	42000204 	addi	r8,r8,8
   1bcc0:	d9402117 	ldw	r5,132(sp)
   1bcc4:	28000b26 	beq	r5,zero,1bcf4 <___svfiprintf_internal_r+0xafc>
   1bcc8:	d9001d04 	addi	r4,sp,116
   1bccc:	18c00084 	addi	r3,r3,2
   1bcd0:	10800044 	addi	r2,r2,1
   1bcd4:	41000015 	stw	r4,0(r8)
   1bcd8:	01000084 	movi	r4,2
   1bcdc:	41000115 	stw	r4,4(r8)
   1bce0:	d8c01c15 	stw	r3,112(sp)
   1bce4:	d8801b15 	stw	r2,108(sp)
   1bce8:	010001c4 	movi	r4,7
   1bcec:	2080ef16 	blt	r4,r2,1c0ac <___svfiprintf_internal_r+0xeb4>
   1bcf0:	42000204 	addi	r8,r8,8
   1bcf4:	d9402217 	ldw	r5,136(sp)
   1bcf8:	01002004 	movi	r4,128
   1bcfc:	29008f26 	beq	r5,r4,1bf3c <___svfiprintf_internal_r+0xd44>
   1bd00:	d9002017 	ldw	r4,128(sp)
   1bd04:	252fc83a 	sub	r23,r4,r20
   1bd08:	05c0310e 	bge	zero,r23,1bdd0 <___svfiprintf_internal_r+0xbd8>
   1bd0c:	07000404 	movi	fp,16
   1bd10:	e5c17d0e 	bge	fp,r23,1c308 <___svfiprintf_internal_r+0x1110>
   1bd14:	010000b4 	movhi	r4,2
   1bd18:	2139ed04 	addi	r4,r4,-6220
   1bd1c:	dc002015 	stw	r16,128(sp)
   1bd20:	dc402215 	stw	r17,136(sp)
   1bd24:	d9002115 	stw	r4,132(sp)
   1bd28:	b823883a 	mov	r17,r23
   1bd2c:	054001c4 	movi	r21,7
   1bd30:	982f883a 	mov	r23,r19
   1bd34:	dc002717 	ldw	r16,156(sp)
   1bd38:	9027883a 	mov	r19,r18
   1bd3c:	dc802317 	ldw	r18,140(sp)
   1bd40:	00000306 	br	1bd50 <___svfiprintf_internal_r+0xb58>
   1bd44:	8c7ffc04 	addi	r17,r17,-16
   1bd48:	42000204 	addi	r8,r8,8
   1bd4c:	e440110e 	bge	fp,r17,1bd94 <___svfiprintf_internal_r+0xb9c>
   1bd50:	18c00404 	addi	r3,r3,16
   1bd54:	10800044 	addi	r2,r2,1
   1bd58:	45800015 	stw	r22,0(r8)
   1bd5c:	47000115 	stw	fp,4(r8)
   1bd60:	d8c01c15 	stw	r3,112(sp)
   1bd64:	d8801b15 	stw	r2,108(sp)
   1bd68:	a8bff60e 	bge	r21,r2,1bd44 <_gp+0xffff4c3c>
   1bd6c:	d9801a04 	addi	r6,sp,104
   1bd70:	900b883a 	mov	r5,r18
   1bd74:	8009883a 	mov	r4,r16
   1bd78:	001b0280 	call	1b028 <__ssprint_r>
   1bd7c:	10005e1e 	bne	r2,zero,1bef8 <___svfiprintf_internal_r+0xd00>
   1bd80:	8c7ffc04 	addi	r17,r17,-16
   1bd84:	d8c01c17 	ldw	r3,112(sp)
   1bd88:	d8801b17 	ldw	r2,108(sp)
   1bd8c:	d811883a 	mov	r8,sp
   1bd90:	e47fef16 	blt	fp,r17,1bd50 <_gp+0xffff4c48>
   1bd94:	9825883a 	mov	r18,r19
   1bd98:	dc002017 	ldw	r16,128(sp)
   1bd9c:	b827883a 	mov	r19,r23
   1bda0:	882f883a 	mov	r23,r17
   1bda4:	dc402217 	ldw	r17,136(sp)
   1bda8:	d9402117 	ldw	r5,132(sp)
   1bdac:	1dc7883a 	add	r3,r3,r23
   1bdb0:	10800044 	addi	r2,r2,1
   1bdb4:	41400015 	stw	r5,0(r8)
   1bdb8:	45c00115 	stw	r23,4(r8)
   1bdbc:	d8c01c15 	stw	r3,112(sp)
   1bdc0:	d8801b15 	stw	r2,108(sp)
   1bdc4:	010001c4 	movi	r4,7
   1bdc8:	2080a616 	blt	r4,r2,1c064 <___svfiprintf_internal_r+0xe6c>
   1bdcc:	42000204 	addi	r8,r8,8
   1bdd0:	a0c7883a 	add	r3,r20,r3
   1bdd4:	10800044 	addi	r2,r2,1
   1bdd8:	44400015 	stw	r17,0(r8)
   1bddc:	45000115 	stw	r20,4(r8)
   1bde0:	d8c01c15 	stw	r3,112(sp)
   1bde4:	d8801b15 	stw	r2,108(sp)
   1bde8:	010001c4 	movi	r4,7
   1bdec:	20808816 	blt	r4,r2,1c010 <___svfiprintf_internal_r+0xe18>
   1bdf0:	42000204 	addi	r8,r8,8
   1bdf4:	8400010c 	andi	r16,r16,4
   1bdf8:	80002c26 	beq	r16,zero,1beac <___svfiprintf_internal_r+0xcb4>
   1bdfc:	d8802517 	ldw	r2,148(sp)
   1be00:	14a1c83a 	sub	r16,r2,r18
   1be04:	0400290e 	bge	zero,r16,1beac <___svfiprintf_internal_r+0xcb4>
   1be08:	04400404 	movi	r17,16
   1be0c:	d8801b17 	ldw	r2,108(sp)
   1be10:	8c01a70e 	bge	r17,r16,1c4b0 <___svfiprintf_internal_r+0x12b8>
   1be14:	014000b4 	movhi	r5,2
   1be18:	2979f104 	addi	r5,r5,-6204
   1be1c:	d9402815 	stw	r5,160(sp)
   1be20:	050001c4 	movi	r20,7
   1be24:	dd402717 	ldw	r21,156(sp)
   1be28:	ddc02317 	ldw	r23,140(sp)
   1be2c:	00000306 	br	1be3c <___svfiprintf_internal_r+0xc44>
   1be30:	843ffc04 	addi	r16,r16,-16
   1be34:	42000204 	addi	r8,r8,8
   1be38:	8c00130e 	bge	r17,r16,1be88 <___svfiprintf_internal_r+0xc90>
   1be3c:	010000b4 	movhi	r4,2
   1be40:	18c00404 	addi	r3,r3,16
   1be44:	10800044 	addi	r2,r2,1
   1be48:	2139f104 	addi	r4,r4,-6204
   1be4c:	41000015 	stw	r4,0(r8)
   1be50:	44400115 	stw	r17,4(r8)
   1be54:	d8c01c15 	stw	r3,112(sp)
   1be58:	d8801b15 	stw	r2,108(sp)
   1be5c:	a0bff40e 	bge	r20,r2,1be30 <_gp+0xffff4d28>
   1be60:	d9801a04 	addi	r6,sp,104
   1be64:	b80b883a 	mov	r5,r23
   1be68:	a809883a 	mov	r4,r21
   1be6c:	001b0280 	call	1b028 <__ssprint_r>
   1be70:	1000211e 	bne	r2,zero,1bef8 <___svfiprintf_internal_r+0xd00>
   1be74:	843ffc04 	addi	r16,r16,-16
   1be78:	d8c01c17 	ldw	r3,112(sp)
   1be7c:	d8801b17 	ldw	r2,108(sp)
   1be80:	d811883a 	mov	r8,sp
   1be84:	8c3fed16 	blt	r17,r16,1be3c <_gp+0xffff4d34>
   1be88:	d9402817 	ldw	r5,160(sp)
   1be8c:	1c07883a 	add	r3,r3,r16
   1be90:	10800044 	addi	r2,r2,1
   1be94:	41400015 	stw	r5,0(r8)
   1be98:	44000115 	stw	r16,4(r8)
   1be9c:	d8c01c15 	stw	r3,112(sp)
   1bea0:	d8801b15 	stw	r2,108(sp)
   1bea4:	010001c4 	movi	r4,7
   1bea8:	2080b516 	blt	r4,r2,1c180 <___svfiprintf_internal_r+0xf88>
   1beac:	d8802517 	ldw	r2,148(sp)
   1beb0:	1480010e 	bge	r2,r18,1beb8 <___svfiprintf_internal_r+0xcc0>
   1beb4:	9005883a 	mov	r2,r18
   1beb8:	d9002617 	ldw	r4,152(sp)
   1bebc:	2089883a 	add	r4,r4,r2
   1bec0:	d9002615 	stw	r4,152(sp)
   1bec4:	18005a1e 	bne	r3,zero,1c030 <___svfiprintf_internal_r+0xe38>
   1bec8:	98800007 	ldb	r2,0(r19)
   1becc:	d8001b15 	stw	zero,108(sp)
   1bed0:	d811883a 	mov	r8,sp
   1bed4:	103cec1e 	bne	r2,zero,1b288 <_gp+0xffff4180>
   1bed8:	9825883a 	mov	r18,r19
   1bedc:	003d0206 	br	1b2e8 <_gp+0xffff41e0>
   1bee0:	d8801c17 	ldw	r2,112(sp)
   1bee4:	10000426 	beq	r2,zero,1bef8 <___svfiprintf_internal_r+0xd00>
   1bee8:	d9402317 	ldw	r5,140(sp)
   1beec:	d9002717 	ldw	r4,156(sp)
   1bef0:	d9801a04 	addi	r6,sp,104
   1bef4:	001b0280 	call	1b028 <__ssprint_r>
   1bef8:	d9402317 	ldw	r5,140(sp)
   1befc:	d8802617 	ldw	r2,152(sp)
   1bf00:	28c0030b 	ldhu	r3,12(r5)
   1bf04:	18c0100c 	andi	r3,r3,64
   1bf08:	18015c1e 	bne	r3,zero,1c47c <___svfiprintf_internal_r+0x1284>
   1bf0c:	dfc03717 	ldw	ra,220(sp)
   1bf10:	df003617 	ldw	fp,216(sp)
   1bf14:	ddc03517 	ldw	r23,212(sp)
   1bf18:	dd803417 	ldw	r22,208(sp)
   1bf1c:	dd403317 	ldw	r21,204(sp)
   1bf20:	dd003217 	ldw	r20,200(sp)
   1bf24:	dcc03117 	ldw	r19,196(sp)
   1bf28:	dc803017 	ldw	r18,192(sp)
   1bf2c:	dc402f17 	ldw	r17,188(sp)
   1bf30:	dc002e17 	ldw	r16,184(sp)
   1bf34:	dec03804 	addi	sp,sp,224
   1bf38:	f800283a 	ret
   1bf3c:	d9002517 	ldw	r4,148(sp)
   1bf40:	24afc83a 	sub	r23,r4,r18
   1bf44:	05ff6e0e 	bge	zero,r23,1bd00 <_gp+0xffff4bf8>
   1bf48:	07000404 	movi	fp,16
   1bf4c:	e5c15c0e 	bge	fp,r23,1c4c0 <___svfiprintf_internal_r+0x12c8>
   1bf50:	010000b4 	movhi	r4,2
   1bf54:	2139ed04 	addi	r4,r4,-6220
   1bf58:	dc002215 	stw	r16,136(sp)
   1bf5c:	dc402815 	stw	r17,160(sp)
   1bf60:	d9002115 	stw	r4,132(sp)
   1bf64:	b823883a 	mov	r17,r23
   1bf68:	054001c4 	movi	r21,7
   1bf6c:	982f883a 	mov	r23,r19
   1bf70:	dc002717 	ldw	r16,156(sp)
   1bf74:	9027883a 	mov	r19,r18
   1bf78:	dc802317 	ldw	r18,140(sp)
   1bf7c:	00000306 	br	1bf8c <___svfiprintf_internal_r+0xd94>
   1bf80:	8c7ffc04 	addi	r17,r17,-16
   1bf84:	42000204 	addi	r8,r8,8
   1bf88:	e440110e 	bge	fp,r17,1bfd0 <___svfiprintf_internal_r+0xdd8>
   1bf8c:	18c00404 	addi	r3,r3,16
   1bf90:	10800044 	addi	r2,r2,1
   1bf94:	45800015 	stw	r22,0(r8)
   1bf98:	47000115 	stw	fp,4(r8)
   1bf9c:	d8c01c15 	stw	r3,112(sp)
   1bfa0:	d8801b15 	stw	r2,108(sp)
   1bfa4:	a8bff60e 	bge	r21,r2,1bf80 <_gp+0xffff4e78>
   1bfa8:	d9801a04 	addi	r6,sp,104
   1bfac:	900b883a 	mov	r5,r18
   1bfb0:	8009883a 	mov	r4,r16
   1bfb4:	001b0280 	call	1b028 <__ssprint_r>
   1bfb8:	103fcf1e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1bfbc:	8c7ffc04 	addi	r17,r17,-16
   1bfc0:	d8c01c17 	ldw	r3,112(sp)
   1bfc4:	d8801b17 	ldw	r2,108(sp)
   1bfc8:	d811883a 	mov	r8,sp
   1bfcc:	e47fef16 	blt	fp,r17,1bf8c <_gp+0xffff4e84>
   1bfd0:	9825883a 	mov	r18,r19
   1bfd4:	dc002217 	ldw	r16,136(sp)
   1bfd8:	b827883a 	mov	r19,r23
   1bfdc:	882f883a 	mov	r23,r17
   1bfe0:	dc402817 	ldw	r17,160(sp)
   1bfe4:	d9402117 	ldw	r5,132(sp)
   1bfe8:	1dc7883a 	add	r3,r3,r23
   1bfec:	10800044 	addi	r2,r2,1
   1bff0:	41400015 	stw	r5,0(r8)
   1bff4:	45c00115 	stw	r23,4(r8)
   1bff8:	d8c01c15 	stw	r3,112(sp)
   1bffc:	d8801b15 	stw	r2,108(sp)
   1c000:	010001c4 	movi	r4,7
   1c004:	2080b716 	blt	r4,r2,1c2e4 <___svfiprintf_internal_r+0x10ec>
   1c008:	42000204 	addi	r8,r8,8
   1c00c:	003f3c06 	br	1bd00 <_gp+0xffff4bf8>
   1c010:	d9402317 	ldw	r5,140(sp)
   1c014:	d9002717 	ldw	r4,156(sp)
   1c018:	d9801a04 	addi	r6,sp,104
   1c01c:	001b0280 	call	1b028 <__ssprint_r>
   1c020:	103fb51e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c024:	d8c01c17 	ldw	r3,112(sp)
   1c028:	d811883a 	mov	r8,sp
   1c02c:	003f7106 	br	1bdf4 <_gp+0xffff4cec>
   1c030:	d9402317 	ldw	r5,140(sp)
   1c034:	d9002717 	ldw	r4,156(sp)
   1c038:	d9801a04 	addi	r6,sp,104
   1c03c:	001b0280 	call	1b028 <__ssprint_r>
   1c040:	103fa126 	beq	r2,zero,1bec8 <_gp+0xffff4dc0>
   1c044:	003fac06 	br	1bef8 <_gp+0xffff4df0>
   1c048:	d9402317 	ldw	r5,140(sp)
   1c04c:	d9002717 	ldw	r4,156(sp)
   1c050:	d9801a04 	addi	r6,sp,104
   1c054:	001b0280 	call	1b028 <__ssprint_r>
   1c058:	103fa71e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c05c:	d811883a 	mov	r8,sp
   1c060:	003c9e06 	br	1b2dc <_gp+0xffff41d4>
   1c064:	d9402317 	ldw	r5,140(sp)
   1c068:	d9002717 	ldw	r4,156(sp)
   1c06c:	d9801a04 	addi	r6,sp,104
   1c070:	001b0280 	call	1b028 <__ssprint_r>
   1c074:	103fa01e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c078:	d8c01c17 	ldw	r3,112(sp)
   1c07c:	d8801b17 	ldw	r2,108(sp)
   1c080:	d811883a 	mov	r8,sp
   1c084:	003f5206 	br	1bdd0 <_gp+0xffff4cc8>
   1c088:	d9402317 	ldw	r5,140(sp)
   1c08c:	d9002717 	ldw	r4,156(sp)
   1c090:	d9801a04 	addi	r6,sp,104
   1c094:	001b0280 	call	1b028 <__ssprint_r>
   1c098:	103f971e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c09c:	d8c01c17 	ldw	r3,112(sp)
   1c0a0:	d8801b17 	ldw	r2,108(sp)
   1c0a4:	d811883a 	mov	r8,sp
   1c0a8:	003f0506 	br	1bcc0 <_gp+0xffff4bb8>
   1c0ac:	d9402317 	ldw	r5,140(sp)
   1c0b0:	d9002717 	ldw	r4,156(sp)
   1c0b4:	d9801a04 	addi	r6,sp,104
   1c0b8:	001b0280 	call	1b028 <__ssprint_r>
   1c0bc:	103f8e1e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c0c0:	d8c01c17 	ldw	r3,112(sp)
   1c0c4:	d8801b17 	ldw	r2,108(sp)
   1c0c8:	d811883a 	mov	r8,sp
   1c0cc:	003f0906 	br	1bcf4 <_gp+0xffff4bec>
   1c0d0:	d9402017 	ldw	r5,128(sp)
   1c0d4:	d8001d85 	stb	zero,118(sp)
   1c0d8:	28007716 	blt	r5,zero,1c2b8 <___svfiprintf_internal_r+0x10c0>
   1c0dc:	00ffdfc4 	movi	r3,-129
   1c0e0:	9504b03a 	or	r2,r18,r20
   1c0e4:	80e0703a 	and	r16,r16,r3
   1c0e8:	103d3926 	beq	r2,zero,1b5d0 <_gp+0xffff44c8>
   1c0ec:	002b883a 	mov	r21,zero
   1c0f0:	003d3c06 	br	1b5e4 <_gp+0xffff44dc>
   1c0f4:	d9402317 	ldw	r5,140(sp)
   1c0f8:	d9002717 	ldw	r4,156(sp)
   1c0fc:	d9801a04 	addi	r6,sp,104
   1c100:	001b0280 	call	1b028 <__ssprint_r>
   1c104:	103f7c1e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c108:	d8c01c17 	ldw	r3,112(sp)
   1c10c:	d8801b17 	ldw	r2,108(sp)
   1c110:	d811883a 	mov	r8,sp
   1c114:	003edd06 	br	1bc8c <_gp+0xffff4b84>
   1c118:	8080100c 	andi	r2,r16,64
   1c11c:	d8001d85 	stb	zero,118(sp)
   1c120:	10008426 	beq	r2,zero,1c334 <___svfiprintf_internal_r+0x113c>
   1c124:	d9402417 	ldw	r5,144(sp)
   1c128:	d8c02017 	ldw	r3,128(sp)
   1c12c:	0029883a 	mov	r20,zero
   1c130:	28800104 	addi	r2,r5,4
   1c134:	2c80000b 	ldhu	r18,0(r5)
   1c138:	183eab0e 	bge	r3,zero,1bbe8 <_gp+0xffff4ae0>
   1c13c:	d8802415 	stw	r2,144(sp)
   1c140:	002b883a 	mov	r21,zero
   1c144:	9504b03a 	or	r2,r18,r20
   1c148:	103e171e 	bne	r2,zero,1b9a8 <_gp+0xffff48a0>
   1c14c:	00800044 	movi	r2,1
   1c150:	10803fcc 	andi	r2,r2,255
   1c154:	00c00044 	movi	r3,1
   1c158:	10c05c26 	beq	r2,r3,1c2cc <___svfiprintf_internal_r+0x10d4>
   1c15c:	00c00084 	movi	r3,2
   1c160:	10fd1e26 	beq	r2,r3,1b5dc <_gp+0xffff44d4>
   1c164:	003ec406 	br	1bc78 <_gp+0xffff4b70>
   1c168:	d9401e17 	ldw	r5,120(sp)
   1c16c:	2c69c83a 	sub	r20,r5,r17
   1c170:	003d4506 	br	1b688 <_gp+0xffff4580>
   1c174:	d8802415 	stw	r2,144(sp)
   1c178:	98c00007 	ldb	r3,0(r19)
   1c17c:	003c6a06 	br	1b328 <_gp+0xffff4220>
   1c180:	d9402317 	ldw	r5,140(sp)
   1c184:	d9002717 	ldw	r4,156(sp)
   1c188:	d9801a04 	addi	r6,sp,104
   1c18c:	001b0280 	call	1b028 <__ssprint_r>
   1c190:	103f591e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c194:	d8c01c17 	ldw	r3,112(sp)
   1c198:	003f4406 	br	1beac <_gp+0xffff4da4>
   1c19c:	014000b4 	movhi	r5,2
   1c1a0:	29798d04 	addi	r5,r5,-6604
   1c1a4:	d9402915 	stw	r5,164(sp)
   1c1a8:	003d0906 	br	1b5d0 <_gp+0xffff44c8>
   1c1ac:	d8c02417 	ldw	r3,144(sp)
   1c1b0:	d9002617 	ldw	r4,152(sp)
   1c1b4:	d9402417 	ldw	r5,144(sp)
   1c1b8:	18800017 	ldw	r2,0(r3)
   1c1bc:	2007d7fa 	srai	r3,r4,31
   1c1c0:	29400104 	addi	r5,r5,4
   1c1c4:	d9402415 	stw	r5,144(sp)
   1c1c8:	11000015 	stw	r4,0(r2)
   1c1cc:	10c00115 	stw	r3,4(r2)
   1c1d0:	003c2b06 	br	1b280 <_gp+0xffff4178>
   1c1d4:	d8c01d45 	stb	r3,117(sp)
   1c1d8:	d8c02017 	ldw	r3,128(sp)
   1c1dc:	00800c04 	movi	r2,48
   1c1e0:	d8801d05 	stb	r2,116(sp)
   1c1e4:	d8001d85 	stb	zero,118(sp)
   1c1e8:	80800094 	ori	r2,r16,2
   1c1ec:	1800ac16 	blt	r3,zero,1c4a0 <___svfiprintf_internal_r+0x12a8>
   1c1f0:	00bfdfc4 	movi	r2,-129
   1c1f4:	80a0703a 	and	r16,r16,r2
   1c1f8:	84000094 	ori	r16,r16,2
   1c1fc:	002b883a 	mov	r21,zero
   1c200:	003cf806 	br	1b5e4 <_gp+0xffff44dc>
   1c204:	98c00007 	ldb	r3,0(r19)
   1c208:	003c4706 	br	1b328 <_gp+0xffff4220>
   1c20c:	d9402417 	ldw	r5,144(sp)
   1c210:	2c800017 	ldw	r18,0(r5)
   1c214:	29400104 	addi	r5,r5,4
   1c218:	d9402415 	stw	r5,144(sp)
   1c21c:	9029d7fa 	srai	r20,r18,31
   1c220:	a005883a 	mov	r2,r20
   1c224:	003dd806 	br	1b988 <_gp+0xffff4880>
   1c228:	d9402417 	ldw	r5,144(sp)
   1c22c:	0029883a 	mov	r20,zero
   1c230:	2c800017 	ldw	r18,0(r5)
   1c234:	29400104 	addi	r5,r5,4
   1c238:	d9402415 	stw	r5,144(sp)
   1c23c:	003cdb06 	br	1b5ac <_gp+0xffff44a4>
   1c240:	8080100c 	andi	r2,r16,64
   1c244:	d8001d85 	stb	zero,118(sp)
   1c248:	10003326 	beq	r2,zero,1c318 <___svfiprintf_internal_r+0x1120>
   1c24c:	d9002417 	ldw	r4,144(sp)
   1c250:	d9402017 	ldw	r5,128(sp)
   1c254:	0029883a 	mov	r20,zero
   1c258:	20800104 	addi	r2,r4,4
   1c25c:	2480000b 	ldhu	r18,0(r4)
   1c260:	283e7e0e 	bge	r5,zero,1bc5c <_gp+0xffff4b54>
   1c264:	9506b03a 	or	r3,r18,r20
   1c268:	d8802415 	stw	r2,144(sp)
   1c26c:	183d271e 	bne	r3,zero,1b70c <_gp+0xffff4604>
   1c270:	002b883a 	mov	r21,zero
   1c274:	0005883a 	mov	r2,zero
   1c278:	003fb506 	br	1c150 <_gp+0xffff5048>
   1c27c:	98c00043 	ldbu	r3,1(r19)
   1c280:	8c400814 	ori	r17,r17,32
   1c284:	9cc00044 	addi	r19,r19,1
   1c288:	18c03fcc 	andi	r3,r3,255
   1c28c:	18c0201c 	xori	r3,r3,128
   1c290:	18ffe004 	addi	r3,r3,-128
   1c294:	003c2406 	br	1b328 <_gp+0xffff4220>
   1c298:	d8c02415 	stw	r3,144(sp)
   1c29c:	002b883a 	mov	r21,zero
   1c2a0:	003fa806 	br	1c144 <_gp+0xffff503c>
   1c2a4:	010000b4 	movhi	r4,2
   1c2a8:	21398d04 	addi	r4,r4,-6604
   1c2ac:	d9002915 	stw	r4,164(sp)
   1c2b0:	d8c02415 	stw	r3,144(sp)
   1c2b4:	1021883a 	mov	r16,r2
   1c2b8:	9504b03a 	or	r2,r18,r20
   1c2bc:	103f8b1e 	bne	r2,zero,1c0ec <_gp+0xffff4fe4>
   1c2c0:	002b883a 	mov	r21,zero
   1c2c4:	00800084 	movi	r2,2
   1c2c8:	003fa106 	br	1c150 <_gp+0xffff5048>
   1c2cc:	0025883a 	mov	r18,zero
   1c2d0:	94800c04 	addi	r18,r18,48
   1c2d4:	dc8019c5 	stb	r18,103(sp)
   1c2d8:	dd002c17 	ldw	r20,176(sp)
   1c2dc:	dc4019c4 	addi	r17,sp,103
   1c2e0:	003ce906 	br	1b688 <_gp+0xffff4580>
   1c2e4:	d9402317 	ldw	r5,140(sp)
   1c2e8:	d9002717 	ldw	r4,156(sp)
   1c2ec:	d9801a04 	addi	r6,sp,104
   1c2f0:	001b0280 	call	1b028 <__ssprint_r>
   1c2f4:	103f001e 	bne	r2,zero,1bef8 <_gp+0xffff4df0>
   1c2f8:	d8c01c17 	ldw	r3,112(sp)
   1c2fc:	d8801b17 	ldw	r2,108(sp)
   1c300:	d811883a 	mov	r8,sp
   1c304:	003e7e06 	br	1bd00 <_gp+0xffff4bf8>
   1c308:	014000b4 	movhi	r5,2
   1c30c:	2979ed04 	addi	r5,r5,-6220
   1c310:	d9402115 	stw	r5,132(sp)
   1c314:	003ea406 	br	1bda8 <_gp+0xffff4ca0>
   1c318:	d8c02417 	ldw	r3,144(sp)
   1c31c:	d9002017 	ldw	r4,128(sp)
   1c320:	0029883a 	mov	r20,zero
   1c324:	18800104 	addi	r2,r3,4
   1c328:	1c800017 	ldw	r18,0(r3)
   1c32c:	203e4b0e 	bge	r4,zero,1bc5c <_gp+0xffff4b54>
   1c330:	003fcc06 	br	1c264 <_gp+0xffff515c>
   1c334:	d9002417 	ldw	r4,144(sp)
   1c338:	d9402017 	ldw	r5,128(sp)
   1c33c:	0029883a 	mov	r20,zero
   1c340:	20800104 	addi	r2,r4,4
   1c344:	24800017 	ldw	r18,0(r4)
   1c348:	283e270e 	bge	r5,zero,1bbe8 <_gp+0xffff4ae0>
   1c34c:	003f7b06 	br	1c13c <_gp+0xffff5034>
   1c350:	8400100c 	andi	r16,r16,64
   1c354:	80003326 	beq	r16,zero,1c424 <___svfiprintf_internal_r+0x122c>
   1c358:	d9402417 	ldw	r5,144(sp)
   1c35c:	d8c02617 	ldw	r3,152(sp)
   1c360:	28800017 	ldw	r2,0(r5)
   1c364:	29400104 	addi	r5,r5,4
   1c368:	d9402415 	stw	r5,144(sp)
   1c36c:	10c0000d 	sth	r3,0(r2)
   1c370:	003bc306 	br	1b280 <_gp+0xffff4178>
   1c374:	d9002417 	ldw	r4,144(sp)
   1c378:	0029883a 	mov	r20,zero
   1c37c:	24800017 	ldw	r18,0(r4)
   1c380:	21000104 	addi	r4,r4,4
   1c384:	d9002415 	stw	r4,144(sp)
   1c388:	003c8806 	br	1b5ac <_gp+0xffff44a4>
   1c38c:	d8c02417 	ldw	r3,144(sp)
   1c390:	1c800017 	ldw	r18,0(r3)
   1c394:	18c00104 	addi	r3,r3,4
   1c398:	d8c02415 	stw	r3,144(sp)
   1c39c:	9029d7fa 	srai	r20,r18,31
   1c3a0:	a005883a 	mov	r2,r20
   1c3a4:	003d7806 	br	1b988 <_gp+0xffff4880>
   1c3a8:	8809883a 	mov	r4,r17
   1c3ac:	da002d15 	stw	r8,180(sp)
   1c3b0:	00152740 	call	15274 <strlen>
   1c3b4:	1029883a 	mov	r20,r2
   1c3b8:	dd401d83 	ldbu	r21,118(sp)
   1c3bc:	ddc02415 	stw	r23,144(sp)
   1c3c0:	d8002015 	stw	zero,128(sp)
   1c3c4:	da002d17 	ldw	r8,180(sp)
   1c3c8:	003caf06 	br	1b688 <_gp+0xffff4580>
   1c3cc:	013fffc4 	movi	r4,-1
   1c3d0:	003df206 	br	1bb9c <_gp+0xffff4a94>
   1c3d4:	dd002017 	ldw	r20,128(sp)
   1c3d8:	00800184 	movi	r2,6
   1c3dc:	1500012e 	bgeu	r2,r20,1c3e4 <___svfiprintf_internal_r+0x11ec>
   1c3e0:	1029883a 	mov	r20,r2
   1c3e4:	a025883a 	mov	r18,r20
   1c3e8:	a0004116 	blt	r20,zero,1c4f0 <___svfiprintf_internal_r+0x12f8>
   1c3ec:	044000b4 	movhi	r17,2
   1c3f0:	ddc02415 	stw	r23,144(sp)
   1c3f4:	8c799204 	addi	r17,r17,-6584
   1c3f8:	003ce806 	br	1b79c <_gp+0xffff4694>
   1c3fc:	04001004 	movi	r16,64
   1c400:	800b883a 	mov	r5,r16
   1c404:	00146340 	call	14634 <_malloc_r>
   1c408:	d8c02317 	ldw	r3,140(sp)
   1c40c:	18800015 	stw	r2,0(r3)
   1c410:	18800415 	stw	r2,16(r3)
   1c414:	10004d26 	beq	r2,zero,1c54c <___svfiprintf_internal_r+0x1354>
   1c418:	d9402317 	ldw	r5,140(sp)
   1c41c:	2c000515 	stw	r16,20(r5)
   1c420:	003b8906 	br	1b248 <_gp+0xffff4140>
   1c424:	d9002417 	ldw	r4,144(sp)
   1c428:	d9402617 	ldw	r5,152(sp)
   1c42c:	20800017 	ldw	r2,0(r4)
   1c430:	21000104 	addi	r4,r4,4
   1c434:	d9002415 	stw	r4,144(sp)
   1c438:	11400015 	stw	r5,0(r2)
   1c43c:	003b9006 	br	1b280 <_gp+0xffff4178>
   1c440:	8080004c 	andi	r2,r16,1
   1c444:	002b883a 	mov	r21,zero
   1c448:	10000526 	beq	r2,zero,1c460 <___svfiprintf_internal_r+0x1268>
   1c44c:	00800c04 	movi	r2,48
   1c450:	d88019c5 	stb	r2,103(sp)
   1c454:	dd002c17 	ldw	r20,176(sp)
   1c458:	dc4019c4 	addi	r17,sp,103
   1c45c:	003c8a06 	br	1b688 <_gp+0xffff4580>
   1c460:	0029883a 	mov	r20,zero
   1c464:	dc401a04 	addi	r17,sp,104
   1c468:	003c8706 	br	1b688 <_gp+0xffff4580>
   1c46c:	014000b4 	movhi	r5,2
   1c470:	2979f104 	addi	r5,r5,-6204
   1c474:	d9402815 	stw	r5,160(sp)
   1c478:	003cff06 	br	1b878 <_gp+0xffff4770>
   1c47c:	00bfffc4 	movi	r2,-1
   1c480:	003ea206 	br	1bf0c <_gp+0xffff4e04>
   1c484:	00800044 	movi	r2,1
   1c488:	10803fcc 	andi	r2,r2,255
   1c48c:	00c00044 	movi	r3,1
   1c490:	10fd4526 	beq	r2,r3,1b9a8 <_gp+0xffff48a0>
   1c494:	00c00084 	movi	r3,2
   1c498:	10fc5226 	beq	r2,r3,1b5e4 <_gp+0xffff44dc>
   1c49c:	003c9c06 	br	1b710 <_gp+0xffff4608>
   1c4a0:	1021883a 	mov	r16,r2
   1c4a4:	002b883a 	mov	r21,zero
   1c4a8:	00800084 	movi	r2,2
   1c4ac:	003ff606 	br	1c488 <_gp+0xffff5380>
   1c4b0:	010000b4 	movhi	r4,2
   1c4b4:	2139f104 	addi	r4,r4,-6204
   1c4b8:	d9002815 	stw	r4,160(sp)
   1c4bc:	003e7206 	br	1be88 <_gp+0xffff4d80>
   1c4c0:	014000b4 	movhi	r5,2
   1c4c4:	2979ed04 	addi	r5,r5,-6220
   1c4c8:	d9402115 	stw	r5,132(sp)
   1c4cc:	003ec506 	br	1bfe4 <_gp+0xffff4edc>
   1c4d0:	e027883a 	mov	r19,fp
   1c4d4:	d8002015 	stw	zero,128(sp)
   1c4d8:	003b9406 	br	1b32c <_gp+0xffff4224>
   1c4dc:	dd002017 	ldw	r20,128(sp)
   1c4e0:	dd401d83 	ldbu	r21,118(sp)
   1c4e4:	ddc02415 	stw	r23,144(sp)
   1c4e8:	d8002015 	stw	zero,128(sp)
   1c4ec:	003c6606 	br	1b688 <_gp+0xffff4580>
   1c4f0:	0025883a 	mov	r18,zero
   1c4f4:	003fbd06 	br	1c3ec <_gp+0xffff52e4>
   1c4f8:	d9402417 	ldw	r5,144(sp)
   1c4fc:	d8c02417 	ldw	r3,144(sp)
   1c500:	29400017 	ldw	r5,0(r5)
   1c504:	19000104 	addi	r4,r3,4
   1c508:	d9002415 	stw	r4,144(sp)
   1c50c:	d9402015 	stw	r5,128(sp)
   1c510:	98c00043 	ldbu	r3,1(r19)
   1c514:	e027883a 	mov	r19,fp
   1c518:	283f5b0e 	bge	r5,zero,1c288 <_gp+0xffff5180>
   1c51c:	18c03fcc 	andi	r3,r3,255
   1c520:	013fffc4 	movi	r4,-1
   1c524:	18c0201c 	xori	r3,r3,128
   1c528:	d9002015 	stw	r4,128(sp)
   1c52c:	18ffe004 	addi	r3,r3,-128
   1c530:	003b7d06 	br	1b328 <_gp+0xffff4220>
   1c534:	dd401d85 	stb	r21,118(sp)
   1c538:	003cf306 	br	1b908 <_gp+0xffff4800>
   1c53c:	dd401d85 	stb	r21,118(sp)
   1c540:	003d4e06 	br	1ba7c <_gp+0xffff4974>
   1c544:	dd401d85 	stb	r21,118(sp)
   1c548:	003c0e06 	br	1b584 <_gp+0xffff447c>
   1c54c:	d9002717 	ldw	r4,156(sp)
   1c550:	00800304 	movi	r2,12
   1c554:	20800015 	stw	r2,0(r4)
   1c558:	00bfffc4 	movi	r2,-1
   1c55c:	003e6b06 	br	1bf0c <_gp+0xffff4e04>
   1c560:	dd401d85 	stb	r21,118(sp)
   1c564:	003d0006 	br	1b968 <_gp+0xffff4860>
   1c568:	dd401d85 	stb	r21,118(sp)
   1c56c:	003d7106 	br	1bb34 <_gp+0xffff4a2c>
   1c570:	dd401d85 	stb	r21,118(sp)
   1c574:	003c5706 	br	1b6d4 <_gp+0xffff45cc>
   1c578:	dd401d85 	stb	r21,118(sp)
   1c57c:	003c2e06 	br	1b638 <_gp+0xffff4530>
   1c580:	dd401d85 	stb	r21,118(sp)
   1c584:	003d8c06 	br	1bbb8 <_gp+0xffff4ab0>
   1c588:	dd401d85 	stb	r21,118(sp)
   1c58c:	003da706 	br	1bc2c <_gp+0xffff4b24>
   1c590:	dd401d85 	stb	r21,118(sp)
   1c594:	003cc806 	br	1b8b8 <_gp+0xffff47b0>

0001c598 <_calloc_r>:
   1c598:	defffe04 	addi	sp,sp,-8
   1c59c:	2805883a 	mov	r2,r5
   1c5a0:	dc000015 	stw	r16,0(sp)
   1c5a4:	300b883a 	mov	r5,r6
   1c5a8:	2021883a 	mov	r16,r4
   1c5ac:	1009883a 	mov	r4,r2
   1c5b0:	dfc00115 	stw	ra,4(sp)
   1c5b4:	00144f80 	call	144f8 <__mulsi3>
   1c5b8:	100b883a 	mov	r5,r2
   1c5bc:	8009883a 	mov	r4,r16
   1c5c0:	00146340 	call	14634 <_malloc_r>
   1c5c4:	10002926 	beq	r2,zero,1c66c <_calloc_r+0xd4>
   1c5c8:	11bfff17 	ldw	r6,-4(r2)
   1c5cc:	1021883a 	mov	r16,r2
   1c5d0:	00bfff04 	movi	r2,-4
   1c5d4:	308c703a 	and	r6,r6,r2
   1c5d8:	00c00904 	movi	r3,36
   1c5dc:	308d883a 	add	r6,r6,r2
   1c5e0:	19801636 	bltu	r3,r6,1c63c <_calloc_r+0xa4>
   1c5e4:	008004c4 	movi	r2,19
   1c5e8:	11800b2e 	bgeu	r2,r6,1c618 <_calloc_r+0x80>
   1c5ec:	80000015 	stw	zero,0(r16)
   1c5f0:	80000115 	stw	zero,4(r16)
   1c5f4:	008006c4 	movi	r2,27
   1c5f8:	11801a2e 	bgeu	r2,r6,1c664 <_calloc_r+0xcc>
   1c5fc:	80000215 	stw	zero,8(r16)
   1c600:	80000315 	stw	zero,12(r16)
   1c604:	30c0151e 	bne	r6,r3,1c65c <_calloc_r+0xc4>
   1c608:	80000415 	stw	zero,16(r16)
   1c60c:	80800604 	addi	r2,r16,24
   1c610:	80000515 	stw	zero,20(r16)
   1c614:	00000106 	br	1c61c <_calloc_r+0x84>
   1c618:	8005883a 	mov	r2,r16
   1c61c:	10000015 	stw	zero,0(r2)
   1c620:	10000115 	stw	zero,4(r2)
   1c624:	10000215 	stw	zero,8(r2)
   1c628:	8005883a 	mov	r2,r16
   1c62c:	dfc00117 	ldw	ra,4(sp)
   1c630:	dc000017 	ldw	r16,0(sp)
   1c634:	dec00204 	addi	sp,sp,8
   1c638:	f800283a 	ret
   1c63c:	000b883a 	mov	r5,zero
   1c640:	8009883a 	mov	r4,r16
   1c644:	0014e400 	call	14e40 <memset>
   1c648:	8005883a 	mov	r2,r16
   1c64c:	dfc00117 	ldw	ra,4(sp)
   1c650:	dc000017 	ldw	r16,0(sp)
   1c654:	dec00204 	addi	sp,sp,8
   1c658:	f800283a 	ret
   1c65c:	80800404 	addi	r2,r16,16
   1c660:	003fee06 	br	1c61c <_gp+0xffff5514>
   1c664:	80800204 	addi	r2,r16,8
   1c668:	003fec06 	br	1c61c <_gp+0xffff5514>
   1c66c:	0005883a 	mov	r2,zero
   1c670:	003fee06 	br	1c62c <_gp+0xffff5524>

0001c674 <memmove>:
   1c674:	2005883a 	mov	r2,r4
   1c678:	29000b2e 	bgeu	r5,r4,1c6a8 <memmove+0x34>
   1c67c:	298f883a 	add	r7,r5,r6
   1c680:	21c0092e 	bgeu	r4,r7,1c6a8 <memmove+0x34>
   1c684:	2187883a 	add	r3,r4,r6
   1c688:	198bc83a 	sub	r5,r3,r6
   1c68c:	30004826 	beq	r6,zero,1c7b0 <memmove+0x13c>
   1c690:	39ffffc4 	addi	r7,r7,-1
   1c694:	39000003 	ldbu	r4,0(r7)
   1c698:	18ffffc4 	addi	r3,r3,-1
   1c69c:	19000005 	stb	r4,0(r3)
   1c6a0:	28fffb1e 	bne	r5,r3,1c690 <_gp+0xffff5588>
   1c6a4:	f800283a 	ret
   1c6a8:	00c003c4 	movi	r3,15
   1c6ac:	1980412e 	bgeu	r3,r6,1c7b4 <memmove+0x140>
   1c6b0:	2886b03a 	or	r3,r5,r2
   1c6b4:	18c000cc 	andi	r3,r3,3
   1c6b8:	1800401e 	bne	r3,zero,1c7bc <memmove+0x148>
   1c6bc:	33fffc04 	addi	r15,r6,-16
   1c6c0:	781ed13a 	srli	r15,r15,4
   1c6c4:	28c00104 	addi	r3,r5,4
   1c6c8:	13400104 	addi	r13,r2,4
   1c6cc:	781c913a 	slli	r14,r15,4
   1c6d0:	2b000204 	addi	r12,r5,8
   1c6d4:	12c00204 	addi	r11,r2,8
   1c6d8:	73800504 	addi	r14,r14,20
   1c6dc:	2a800304 	addi	r10,r5,12
   1c6e0:	12400304 	addi	r9,r2,12
   1c6e4:	2b9d883a 	add	r14,r5,r14
   1c6e8:	2811883a 	mov	r8,r5
   1c6ec:	100f883a 	mov	r7,r2
   1c6f0:	41000017 	ldw	r4,0(r8)
   1c6f4:	39c00404 	addi	r7,r7,16
   1c6f8:	18c00404 	addi	r3,r3,16
   1c6fc:	393ffc15 	stw	r4,-16(r7)
   1c700:	193ffc17 	ldw	r4,-16(r3)
   1c704:	6b400404 	addi	r13,r13,16
   1c708:	5ac00404 	addi	r11,r11,16
   1c70c:	693ffc15 	stw	r4,-16(r13)
   1c710:	61000017 	ldw	r4,0(r12)
   1c714:	4a400404 	addi	r9,r9,16
   1c718:	42000404 	addi	r8,r8,16
   1c71c:	593ffc15 	stw	r4,-16(r11)
   1c720:	51000017 	ldw	r4,0(r10)
   1c724:	63000404 	addi	r12,r12,16
   1c728:	52800404 	addi	r10,r10,16
   1c72c:	493ffc15 	stw	r4,-16(r9)
   1c730:	1bbfef1e 	bne	r3,r14,1c6f0 <_gp+0xffff55e8>
   1c734:	79000044 	addi	r4,r15,1
   1c738:	2008913a 	slli	r4,r4,4
   1c73c:	328003cc 	andi	r10,r6,15
   1c740:	02c000c4 	movi	r11,3
   1c744:	1107883a 	add	r3,r2,r4
   1c748:	290b883a 	add	r5,r5,r4
   1c74c:	5a801e2e 	bgeu	r11,r10,1c7c8 <memmove+0x154>
   1c750:	1813883a 	mov	r9,r3
   1c754:	2811883a 	mov	r8,r5
   1c758:	500f883a 	mov	r7,r10
   1c75c:	41000017 	ldw	r4,0(r8)
   1c760:	4a400104 	addi	r9,r9,4
   1c764:	39ffff04 	addi	r7,r7,-4
   1c768:	493fff15 	stw	r4,-4(r9)
   1c76c:	42000104 	addi	r8,r8,4
   1c770:	59fffa36 	bltu	r11,r7,1c75c <_gp+0xffff5654>
   1c774:	513fff04 	addi	r4,r10,-4
   1c778:	2008d0ba 	srli	r4,r4,2
   1c77c:	318000cc 	andi	r6,r6,3
   1c780:	21000044 	addi	r4,r4,1
   1c784:	2109883a 	add	r4,r4,r4
   1c788:	2109883a 	add	r4,r4,r4
   1c78c:	1907883a 	add	r3,r3,r4
   1c790:	290b883a 	add	r5,r5,r4
   1c794:	30000b26 	beq	r6,zero,1c7c4 <memmove+0x150>
   1c798:	198d883a 	add	r6,r3,r6
   1c79c:	29c00003 	ldbu	r7,0(r5)
   1c7a0:	18c00044 	addi	r3,r3,1
   1c7a4:	29400044 	addi	r5,r5,1
   1c7a8:	19ffffc5 	stb	r7,-1(r3)
   1c7ac:	19bffb1e 	bne	r3,r6,1c79c <_gp+0xffff5694>
   1c7b0:	f800283a 	ret
   1c7b4:	1007883a 	mov	r3,r2
   1c7b8:	003ff606 	br	1c794 <_gp+0xffff568c>
   1c7bc:	1007883a 	mov	r3,r2
   1c7c0:	003ff506 	br	1c798 <_gp+0xffff5690>
   1c7c4:	f800283a 	ret
   1c7c8:	500d883a 	mov	r6,r10
   1c7cc:	003ff106 	br	1c794 <_gp+0xffff568c>

0001c7d0 <_realloc_r>:
   1c7d0:	defff604 	addi	sp,sp,-40
   1c7d4:	dc800215 	stw	r18,8(sp)
   1c7d8:	dfc00915 	stw	ra,36(sp)
   1c7dc:	df000815 	stw	fp,32(sp)
   1c7e0:	ddc00715 	stw	r23,28(sp)
   1c7e4:	dd800615 	stw	r22,24(sp)
   1c7e8:	dd400515 	stw	r21,20(sp)
   1c7ec:	dd000415 	stw	r20,16(sp)
   1c7f0:	dcc00315 	stw	r19,12(sp)
   1c7f4:	dc400115 	stw	r17,4(sp)
   1c7f8:	dc000015 	stw	r16,0(sp)
   1c7fc:	3025883a 	mov	r18,r6
   1c800:	2800b726 	beq	r5,zero,1cae0 <_realloc_r+0x310>
   1c804:	282b883a 	mov	r21,r5
   1c808:	2029883a 	mov	r20,r4
   1c80c:	001dc740 	call	1dc74 <__malloc_lock>
   1c810:	a8bfff17 	ldw	r2,-4(r21)
   1c814:	043fff04 	movi	r16,-4
   1c818:	90c002c4 	addi	r3,r18,11
   1c81c:	01000584 	movi	r4,22
   1c820:	acfffe04 	addi	r19,r21,-8
   1c824:	1420703a 	and	r16,r2,r16
   1c828:	20c0332e 	bgeu	r4,r3,1c8f8 <_realloc_r+0x128>
   1c82c:	047ffe04 	movi	r17,-8
   1c830:	1c62703a 	and	r17,r3,r17
   1c834:	8807883a 	mov	r3,r17
   1c838:	88005816 	blt	r17,zero,1c99c <_realloc_r+0x1cc>
   1c83c:	8c805736 	bltu	r17,r18,1c99c <_realloc_r+0x1cc>
   1c840:	80c0300e 	bge	r16,r3,1c904 <_realloc_r+0x134>
   1c844:	070000b4 	movhi	fp,2
   1c848:	e73b0104 	addi	fp,fp,-5116
   1c84c:	e1c00217 	ldw	r7,8(fp)
   1c850:	9c09883a 	add	r4,r19,r16
   1c854:	22000117 	ldw	r8,4(r4)
   1c858:	21c06326 	beq	r4,r7,1c9e8 <_realloc_r+0x218>
   1c85c:	017fff84 	movi	r5,-2
   1c860:	414a703a 	and	r5,r8,r5
   1c864:	214b883a 	add	r5,r4,r5
   1c868:	29800117 	ldw	r6,4(r5)
   1c86c:	3180004c 	andi	r6,r6,1
   1c870:	30003f26 	beq	r6,zero,1c970 <_realloc_r+0x1a0>
   1c874:	1080004c 	andi	r2,r2,1
   1c878:	10008326 	beq	r2,zero,1ca88 <_realloc_r+0x2b8>
   1c87c:	900b883a 	mov	r5,r18
   1c880:	a009883a 	mov	r4,r20
   1c884:	00146340 	call	14634 <_malloc_r>
   1c888:	1025883a 	mov	r18,r2
   1c88c:	10011e26 	beq	r2,zero,1cd08 <_realloc_r+0x538>
   1c890:	a93fff17 	ldw	r4,-4(r21)
   1c894:	10fffe04 	addi	r3,r2,-8
   1c898:	00bfff84 	movi	r2,-2
   1c89c:	2084703a 	and	r2,r4,r2
   1c8a0:	9885883a 	add	r2,r19,r2
   1c8a4:	1880ee26 	beq	r3,r2,1cc60 <_realloc_r+0x490>
   1c8a8:	81bfff04 	addi	r6,r16,-4
   1c8ac:	00800904 	movi	r2,36
   1c8b0:	1180b836 	bltu	r2,r6,1cb94 <_realloc_r+0x3c4>
   1c8b4:	00c004c4 	movi	r3,19
   1c8b8:	19809636 	bltu	r3,r6,1cb14 <_realloc_r+0x344>
   1c8bc:	9005883a 	mov	r2,r18
   1c8c0:	a807883a 	mov	r3,r21
   1c8c4:	19000017 	ldw	r4,0(r3)
   1c8c8:	11000015 	stw	r4,0(r2)
   1c8cc:	19000117 	ldw	r4,4(r3)
   1c8d0:	11000115 	stw	r4,4(r2)
   1c8d4:	18c00217 	ldw	r3,8(r3)
   1c8d8:	10c00215 	stw	r3,8(r2)
   1c8dc:	a80b883a 	mov	r5,r21
   1c8e0:	a009883a 	mov	r4,r20
   1c8e4:	00198000 	call	19800 <_free_r>
   1c8e8:	a009883a 	mov	r4,r20
   1c8ec:	001dc780 	call	1dc78 <__malloc_unlock>
   1c8f0:	9005883a 	mov	r2,r18
   1c8f4:	00001206 	br	1c940 <_realloc_r+0x170>
   1c8f8:	00c00404 	movi	r3,16
   1c8fc:	1823883a 	mov	r17,r3
   1c900:	003fce06 	br	1c83c <_gp+0xffff5734>
   1c904:	a825883a 	mov	r18,r21
   1c908:	8445c83a 	sub	r2,r16,r17
   1c90c:	00c003c4 	movi	r3,15
   1c910:	18802636 	bltu	r3,r2,1c9ac <_realloc_r+0x1dc>
   1c914:	99800117 	ldw	r6,4(r19)
   1c918:	9c07883a 	add	r3,r19,r16
   1c91c:	3180004c 	andi	r6,r6,1
   1c920:	3420b03a 	or	r16,r6,r16
   1c924:	9c000115 	stw	r16,4(r19)
   1c928:	18800117 	ldw	r2,4(r3)
   1c92c:	10800054 	ori	r2,r2,1
   1c930:	18800115 	stw	r2,4(r3)
   1c934:	a009883a 	mov	r4,r20
   1c938:	001dc780 	call	1dc78 <__malloc_unlock>
   1c93c:	9005883a 	mov	r2,r18
   1c940:	dfc00917 	ldw	ra,36(sp)
   1c944:	df000817 	ldw	fp,32(sp)
   1c948:	ddc00717 	ldw	r23,28(sp)
   1c94c:	dd800617 	ldw	r22,24(sp)
   1c950:	dd400517 	ldw	r21,20(sp)
   1c954:	dd000417 	ldw	r20,16(sp)
   1c958:	dcc00317 	ldw	r19,12(sp)
   1c95c:	dc800217 	ldw	r18,8(sp)
   1c960:	dc400117 	ldw	r17,4(sp)
   1c964:	dc000017 	ldw	r16,0(sp)
   1c968:	dec00a04 	addi	sp,sp,40
   1c96c:	f800283a 	ret
   1c970:	017fff04 	movi	r5,-4
   1c974:	414a703a 	and	r5,r8,r5
   1c978:	814d883a 	add	r6,r16,r5
   1c97c:	30c01f16 	blt	r6,r3,1c9fc <_realloc_r+0x22c>
   1c980:	20800317 	ldw	r2,12(r4)
   1c984:	20c00217 	ldw	r3,8(r4)
   1c988:	a825883a 	mov	r18,r21
   1c98c:	3021883a 	mov	r16,r6
   1c990:	18800315 	stw	r2,12(r3)
   1c994:	10c00215 	stw	r3,8(r2)
   1c998:	003fdb06 	br	1c908 <_gp+0xffff5800>
   1c99c:	00800304 	movi	r2,12
   1c9a0:	a0800015 	stw	r2,0(r20)
   1c9a4:	0005883a 	mov	r2,zero
   1c9a8:	003fe506 	br	1c940 <_gp+0xffff5838>
   1c9ac:	98c00117 	ldw	r3,4(r19)
   1c9b0:	9c4b883a 	add	r5,r19,r17
   1c9b4:	11000054 	ori	r4,r2,1
   1c9b8:	18c0004c 	andi	r3,r3,1
   1c9bc:	1c62b03a 	or	r17,r3,r17
   1c9c0:	9c400115 	stw	r17,4(r19)
   1c9c4:	29000115 	stw	r4,4(r5)
   1c9c8:	2885883a 	add	r2,r5,r2
   1c9cc:	10c00117 	ldw	r3,4(r2)
   1c9d0:	29400204 	addi	r5,r5,8
   1c9d4:	a009883a 	mov	r4,r20
   1c9d8:	18c00054 	ori	r3,r3,1
   1c9dc:	10c00115 	stw	r3,4(r2)
   1c9e0:	00198000 	call	19800 <_free_r>
   1c9e4:	003fd306 	br	1c934 <_gp+0xffff582c>
   1c9e8:	017fff04 	movi	r5,-4
   1c9ec:	414a703a 	and	r5,r8,r5
   1c9f0:	89800404 	addi	r6,r17,16
   1c9f4:	8151883a 	add	r8,r16,r5
   1c9f8:	4180590e 	bge	r8,r6,1cb60 <_realloc_r+0x390>
   1c9fc:	1080004c 	andi	r2,r2,1
   1ca00:	103f9e1e 	bne	r2,zero,1c87c <_gp+0xffff5774>
   1ca04:	adbffe17 	ldw	r22,-8(r21)
   1ca08:	00bfff04 	movi	r2,-4
   1ca0c:	9dadc83a 	sub	r22,r19,r22
   1ca10:	b1800117 	ldw	r6,4(r22)
   1ca14:	3084703a 	and	r2,r6,r2
   1ca18:	20002026 	beq	r4,zero,1ca9c <_realloc_r+0x2cc>
   1ca1c:	80af883a 	add	r23,r16,r2
   1ca20:	b96f883a 	add	r23,r23,r5
   1ca24:	21c05f26 	beq	r4,r7,1cba4 <_realloc_r+0x3d4>
   1ca28:	b8c01c16 	blt	r23,r3,1ca9c <_realloc_r+0x2cc>
   1ca2c:	20800317 	ldw	r2,12(r4)
   1ca30:	20c00217 	ldw	r3,8(r4)
   1ca34:	81bfff04 	addi	r6,r16,-4
   1ca38:	01000904 	movi	r4,36
   1ca3c:	18800315 	stw	r2,12(r3)
   1ca40:	10c00215 	stw	r3,8(r2)
   1ca44:	b0c00217 	ldw	r3,8(r22)
   1ca48:	b0800317 	ldw	r2,12(r22)
   1ca4c:	b4800204 	addi	r18,r22,8
   1ca50:	18800315 	stw	r2,12(r3)
   1ca54:	10c00215 	stw	r3,8(r2)
   1ca58:	21801b36 	bltu	r4,r6,1cac8 <_realloc_r+0x2f8>
   1ca5c:	008004c4 	movi	r2,19
   1ca60:	1180352e 	bgeu	r2,r6,1cb38 <_realloc_r+0x368>
   1ca64:	a8800017 	ldw	r2,0(r21)
   1ca68:	b0800215 	stw	r2,8(r22)
   1ca6c:	a8800117 	ldw	r2,4(r21)
   1ca70:	b0800315 	stw	r2,12(r22)
   1ca74:	008006c4 	movi	r2,27
   1ca78:	11807f36 	bltu	r2,r6,1cc78 <_realloc_r+0x4a8>
   1ca7c:	b0800404 	addi	r2,r22,16
   1ca80:	ad400204 	addi	r21,r21,8
   1ca84:	00002d06 	br	1cb3c <_realloc_r+0x36c>
   1ca88:	adbffe17 	ldw	r22,-8(r21)
   1ca8c:	00bfff04 	movi	r2,-4
   1ca90:	9dadc83a 	sub	r22,r19,r22
   1ca94:	b1000117 	ldw	r4,4(r22)
   1ca98:	2084703a 	and	r2,r4,r2
   1ca9c:	b03f7726 	beq	r22,zero,1c87c <_gp+0xffff5774>
   1caa0:	80af883a 	add	r23,r16,r2
   1caa4:	b8ff7516 	blt	r23,r3,1c87c <_gp+0xffff5774>
   1caa8:	b0800317 	ldw	r2,12(r22)
   1caac:	b0c00217 	ldw	r3,8(r22)
   1cab0:	81bfff04 	addi	r6,r16,-4
   1cab4:	01000904 	movi	r4,36
   1cab8:	18800315 	stw	r2,12(r3)
   1cabc:	10c00215 	stw	r3,8(r2)
   1cac0:	b4800204 	addi	r18,r22,8
   1cac4:	21bfe52e 	bgeu	r4,r6,1ca5c <_gp+0xffff5954>
   1cac8:	a80b883a 	mov	r5,r21
   1cacc:	9009883a 	mov	r4,r18
   1cad0:	001c6740 	call	1c674 <memmove>
   1cad4:	b821883a 	mov	r16,r23
   1cad8:	b027883a 	mov	r19,r22
   1cadc:	003f8a06 	br	1c908 <_gp+0xffff5800>
   1cae0:	300b883a 	mov	r5,r6
   1cae4:	dfc00917 	ldw	ra,36(sp)
   1cae8:	df000817 	ldw	fp,32(sp)
   1caec:	ddc00717 	ldw	r23,28(sp)
   1caf0:	dd800617 	ldw	r22,24(sp)
   1caf4:	dd400517 	ldw	r21,20(sp)
   1caf8:	dd000417 	ldw	r20,16(sp)
   1cafc:	dcc00317 	ldw	r19,12(sp)
   1cb00:	dc800217 	ldw	r18,8(sp)
   1cb04:	dc400117 	ldw	r17,4(sp)
   1cb08:	dc000017 	ldw	r16,0(sp)
   1cb0c:	dec00a04 	addi	sp,sp,40
   1cb10:	00146341 	jmpi	14634 <_malloc_r>
   1cb14:	a8c00017 	ldw	r3,0(r21)
   1cb18:	90c00015 	stw	r3,0(r18)
   1cb1c:	a8c00117 	ldw	r3,4(r21)
   1cb20:	90c00115 	stw	r3,4(r18)
   1cb24:	00c006c4 	movi	r3,27
   1cb28:	19804536 	bltu	r3,r6,1cc40 <_realloc_r+0x470>
   1cb2c:	90800204 	addi	r2,r18,8
   1cb30:	a8c00204 	addi	r3,r21,8
   1cb34:	003f6306 	br	1c8c4 <_gp+0xffff57bc>
   1cb38:	9005883a 	mov	r2,r18
   1cb3c:	a8c00017 	ldw	r3,0(r21)
   1cb40:	b821883a 	mov	r16,r23
   1cb44:	b027883a 	mov	r19,r22
   1cb48:	10c00015 	stw	r3,0(r2)
   1cb4c:	a8c00117 	ldw	r3,4(r21)
   1cb50:	10c00115 	stw	r3,4(r2)
   1cb54:	a8c00217 	ldw	r3,8(r21)
   1cb58:	10c00215 	stw	r3,8(r2)
   1cb5c:	003f6a06 	br	1c908 <_gp+0xffff5800>
   1cb60:	9c67883a 	add	r19,r19,r17
   1cb64:	4445c83a 	sub	r2,r8,r17
   1cb68:	e4c00215 	stw	r19,8(fp)
   1cb6c:	10800054 	ori	r2,r2,1
   1cb70:	98800115 	stw	r2,4(r19)
   1cb74:	a8bfff17 	ldw	r2,-4(r21)
   1cb78:	a009883a 	mov	r4,r20
   1cb7c:	1080004c 	andi	r2,r2,1
   1cb80:	1462b03a 	or	r17,r2,r17
   1cb84:	ac7fff15 	stw	r17,-4(r21)
   1cb88:	001dc780 	call	1dc78 <__malloc_unlock>
   1cb8c:	a805883a 	mov	r2,r21
   1cb90:	003f6b06 	br	1c940 <_gp+0xffff5838>
   1cb94:	a80b883a 	mov	r5,r21
   1cb98:	9009883a 	mov	r4,r18
   1cb9c:	001c6740 	call	1c674 <memmove>
   1cba0:	003f4e06 	br	1c8dc <_gp+0xffff57d4>
   1cba4:	89000404 	addi	r4,r17,16
   1cba8:	b93fbc16 	blt	r23,r4,1ca9c <_gp+0xffff5994>
   1cbac:	b0800317 	ldw	r2,12(r22)
   1cbb0:	b0c00217 	ldw	r3,8(r22)
   1cbb4:	81bfff04 	addi	r6,r16,-4
   1cbb8:	01000904 	movi	r4,36
   1cbbc:	18800315 	stw	r2,12(r3)
   1cbc0:	10c00215 	stw	r3,8(r2)
   1cbc4:	b4800204 	addi	r18,r22,8
   1cbc8:	21804336 	bltu	r4,r6,1ccd8 <_realloc_r+0x508>
   1cbcc:	008004c4 	movi	r2,19
   1cbd0:	11803f2e 	bgeu	r2,r6,1ccd0 <_realloc_r+0x500>
   1cbd4:	a8800017 	ldw	r2,0(r21)
   1cbd8:	b0800215 	stw	r2,8(r22)
   1cbdc:	a8800117 	ldw	r2,4(r21)
   1cbe0:	b0800315 	stw	r2,12(r22)
   1cbe4:	008006c4 	movi	r2,27
   1cbe8:	11803f36 	bltu	r2,r6,1cce8 <_realloc_r+0x518>
   1cbec:	b0800404 	addi	r2,r22,16
   1cbf0:	ad400204 	addi	r21,r21,8
   1cbf4:	a8c00017 	ldw	r3,0(r21)
   1cbf8:	10c00015 	stw	r3,0(r2)
   1cbfc:	a8c00117 	ldw	r3,4(r21)
   1cc00:	10c00115 	stw	r3,4(r2)
   1cc04:	a8c00217 	ldw	r3,8(r21)
   1cc08:	10c00215 	stw	r3,8(r2)
   1cc0c:	b447883a 	add	r3,r22,r17
   1cc10:	bc45c83a 	sub	r2,r23,r17
   1cc14:	e0c00215 	stw	r3,8(fp)
   1cc18:	10800054 	ori	r2,r2,1
   1cc1c:	18800115 	stw	r2,4(r3)
   1cc20:	b0800117 	ldw	r2,4(r22)
   1cc24:	a009883a 	mov	r4,r20
   1cc28:	1080004c 	andi	r2,r2,1
   1cc2c:	1462b03a 	or	r17,r2,r17
   1cc30:	b4400115 	stw	r17,4(r22)
   1cc34:	001dc780 	call	1dc78 <__malloc_unlock>
   1cc38:	9005883a 	mov	r2,r18
   1cc3c:	003f4006 	br	1c940 <_gp+0xffff5838>
   1cc40:	a8c00217 	ldw	r3,8(r21)
   1cc44:	90c00215 	stw	r3,8(r18)
   1cc48:	a8c00317 	ldw	r3,12(r21)
   1cc4c:	90c00315 	stw	r3,12(r18)
   1cc50:	30801126 	beq	r6,r2,1cc98 <_realloc_r+0x4c8>
   1cc54:	90800404 	addi	r2,r18,16
   1cc58:	a8c00404 	addi	r3,r21,16
   1cc5c:	003f1906 	br	1c8c4 <_gp+0xffff57bc>
   1cc60:	90ffff17 	ldw	r3,-4(r18)
   1cc64:	00bfff04 	movi	r2,-4
   1cc68:	a825883a 	mov	r18,r21
   1cc6c:	1884703a 	and	r2,r3,r2
   1cc70:	80a1883a 	add	r16,r16,r2
   1cc74:	003f2406 	br	1c908 <_gp+0xffff5800>
   1cc78:	a8800217 	ldw	r2,8(r21)
   1cc7c:	b0800415 	stw	r2,16(r22)
   1cc80:	a8800317 	ldw	r2,12(r21)
   1cc84:	b0800515 	stw	r2,20(r22)
   1cc88:	31000a26 	beq	r6,r4,1ccb4 <_realloc_r+0x4e4>
   1cc8c:	b0800604 	addi	r2,r22,24
   1cc90:	ad400404 	addi	r21,r21,16
   1cc94:	003fa906 	br	1cb3c <_gp+0xffff5a34>
   1cc98:	a9000417 	ldw	r4,16(r21)
   1cc9c:	90800604 	addi	r2,r18,24
   1cca0:	a8c00604 	addi	r3,r21,24
   1cca4:	91000415 	stw	r4,16(r18)
   1cca8:	a9000517 	ldw	r4,20(r21)
   1ccac:	91000515 	stw	r4,20(r18)
   1ccb0:	003f0406 	br	1c8c4 <_gp+0xffff57bc>
   1ccb4:	a8c00417 	ldw	r3,16(r21)
   1ccb8:	ad400604 	addi	r21,r21,24
   1ccbc:	b0800804 	addi	r2,r22,32
   1ccc0:	b0c00615 	stw	r3,24(r22)
   1ccc4:	a8ffff17 	ldw	r3,-4(r21)
   1ccc8:	b0c00715 	stw	r3,28(r22)
   1cccc:	003f9b06 	br	1cb3c <_gp+0xffff5a34>
   1ccd0:	9005883a 	mov	r2,r18
   1ccd4:	003fc706 	br	1cbf4 <_gp+0xffff5aec>
   1ccd8:	a80b883a 	mov	r5,r21
   1ccdc:	9009883a 	mov	r4,r18
   1cce0:	001c6740 	call	1c674 <memmove>
   1cce4:	003fc906 	br	1cc0c <_gp+0xffff5b04>
   1cce8:	a8800217 	ldw	r2,8(r21)
   1ccec:	b0800415 	stw	r2,16(r22)
   1ccf0:	a8800317 	ldw	r2,12(r21)
   1ccf4:	b0800515 	stw	r2,20(r22)
   1ccf8:	31000726 	beq	r6,r4,1cd18 <_realloc_r+0x548>
   1ccfc:	b0800604 	addi	r2,r22,24
   1cd00:	ad400404 	addi	r21,r21,16
   1cd04:	003fbb06 	br	1cbf4 <_gp+0xffff5aec>
   1cd08:	a009883a 	mov	r4,r20
   1cd0c:	001dc780 	call	1dc78 <__malloc_unlock>
   1cd10:	0005883a 	mov	r2,zero
   1cd14:	003f0a06 	br	1c940 <_gp+0xffff5838>
   1cd18:	a8c00417 	ldw	r3,16(r21)
   1cd1c:	ad400604 	addi	r21,r21,24
   1cd20:	b0800804 	addi	r2,r22,32
   1cd24:	b0c00615 	stw	r3,24(r22)
   1cd28:	a8ffff17 	ldw	r3,-4(r21)
   1cd2c:	b0c00715 	stw	r3,28(r22)
   1cd30:	003fb006 	br	1cbf4 <_gp+0xffff5aec>

0001cd34 <__udivdi3>:
   1cd34:	defff404 	addi	sp,sp,-48
   1cd38:	dcc00515 	stw	r19,20(sp)
   1cd3c:	dc000215 	stw	r16,8(sp)
   1cd40:	dfc00b15 	stw	ra,44(sp)
   1cd44:	df000a15 	stw	fp,40(sp)
   1cd48:	ddc00915 	stw	r23,36(sp)
   1cd4c:	dd800815 	stw	r22,32(sp)
   1cd50:	dd400715 	stw	r21,28(sp)
   1cd54:	dd000615 	stw	r20,24(sp)
   1cd58:	dc800415 	stw	r18,16(sp)
   1cd5c:	dc400315 	stw	r17,12(sp)
   1cd60:	2027883a 	mov	r19,r4
   1cd64:	2821883a 	mov	r16,r5
   1cd68:	3800461e 	bne	r7,zero,1ce84 <__udivdi3+0x150>
   1cd6c:	3023883a 	mov	r17,r6
   1cd70:	2025883a 	mov	r18,r4
   1cd74:	2980572e 	bgeu	r5,r6,1ced4 <__udivdi3+0x1a0>
   1cd78:	00bfffd4 	movui	r2,65535
   1cd7c:	282d883a 	mov	r22,r5
   1cd80:	1180b236 	bltu	r2,r6,1d04c <__udivdi3+0x318>
   1cd84:	00803fc4 	movi	r2,255
   1cd88:	1185803a 	cmpltu	r2,r2,r6
   1cd8c:	100490fa 	slli	r2,r2,3
   1cd90:	3086d83a 	srl	r3,r6,r2
   1cd94:	010000b4 	movhi	r4,2
   1cd98:	21394304 	addi	r4,r4,-6900
   1cd9c:	20c7883a 	add	r3,r4,r3
   1cda0:	18c00003 	ldbu	r3,0(r3)
   1cda4:	1885883a 	add	r2,r3,r2
   1cda8:	00c00804 	movi	r3,32
   1cdac:	1887c83a 	sub	r3,r3,r2
   1cdb0:	18000526 	beq	r3,zero,1cdc8 <__udivdi3+0x94>
   1cdb4:	80e0983a 	sll	r16,r16,r3
   1cdb8:	9884d83a 	srl	r2,r19,r2
   1cdbc:	30e2983a 	sll	r17,r6,r3
   1cdc0:	98e4983a 	sll	r18,r19,r3
   1cdc4:	142cb03a 	or	r22,r2,r16
   1cdc8:	882ad43a 	srli	r21,r17,16
   1cdcc:	b009883a 	mov	r4,r22
   1cdd0:	8d3fffcc 	andi	r20,r17,65535
   1cdd4:	a80b883a 	mov	r5,r21
   1cdd8:	0011d980 	call	11d98 <__umodsi3>
   1cddc:	b009883a 	mov	r4,r22
   1cde0:	a80b883a 	mov	r5,r21
   1cde4:	1027883a 	mov	r19,r2
   1cde8:	0011d340 	call	11d34 <__udivsi3>
   1cdec:	100b883a 	mov	r5,r2
   1cdf0:	a009883a 	mov	r4,r20
   1cdf4:	102d883a 	mov	r22,r2
   1cdf8:	00144f80 	call	144f8 <__mulsi3>
   1cdfc:	9826943a 	slli	r19,r19,16
   1ce00:	9006d43a 	srli	r3,r18,16
   1ce04:	1cc6b03a 	or	r3,r3,r19
   1ce08:	1880052e 	bgeu	r3,r2,1ce20 <__udivdi3+0xec>
   1ce0c:	1c47883a 	add	r3,r3,r17
   1ce10:	b13fffc4 	addi	r4,r22,-1
   1ce14:	1c400136 	bltu	r3,r17,1ce1c <__udivdi3+0xe8>
   1ce18:	18814236 	bltu	r3,r2,1d324 <__udivdi3+0x5f0>
   1ce1c:	202d883a 	mov	r22,r4
   1ce20:	18a1c83a 	sub	r16,r3,r2
   1ce24:	8009883a 	mov	r4,r16
   1ce28:	a80b883a 	mov	r5,r21
   1ce2c:	0011d980 	call	11d98 <__umodsi3>
   1ce30:	1027883a 	mov	r19,r2
   1ce34:	8009883a 	mov	r4,r16
   1ce38:	a80b883a 	mov	r5,r21
   1ce3c:	9826943a 	slli	r19,r19,16
   1ce40:	0011d340 	call	11d34 <__udivsi3>
   1ce44:	100b883a 	mov	r5,r2
   1ce48:	a009883a 	mov	r4,r20
   1ce4c:	94bfffcc 	andi	r18,r18,65535
   1ce50:	1021883a 	mov	r16,r2
   1ce54:	94e4b03a 	or	r18,r18,r19
   1ce58:	00144f80 	call	144f8 <__mulsi3>
   1ce5c:	9080052e 	bgeu	r18,r2,1ce74 <__udivdi3+0x140>
   1ce60:	8ca5883a 	add	r18,r17,r18
   1ce64:	80ffffc4 	addi	r3,r16,-1
   1ce68:	94410c36 	bltu	r18,r17,1d29c <__udivdi3+0x568>
   1ce6c:	90810b2e 	bgeu	r18,r2,1d29c <__udivdi3+0x568>
   1ce70:	843fff84 	addi	r16,r16,-2
   1ce74:	b004943a 	slli	r2,r22,16
   1ce78:	0007883a 	mov	r3,zero
   1ce7c:	1404b03a 	or	r2,r2,r16
   1ce80:	00005e06 	br	1cffc <__udivdi3+0x2c8>
   1ce84:	29c05b36 	bltu	r5,r7,1cff4 <__udivdi3+0x2c0>
   1ce88:	00bfffd4 	movui	r2,65535
   1ce8c:	11c0672e 	bgeu	r2,r7,1d02c <__udivdi3+0x2f8>
   1ce90:	00804034 	movhi	r2,256
   1ce94:	10bfffc4 	addi	r2,r2,-1
   1ce98:	11c10a36 	bltu	r2,r7,1d2c4 <__udivdi3+0x590>
   1ce9c:	00800404 	movi	r2,16
   1cea0:	3886d83a 	srl	r3,r7,r2
   1cea4:	010000b4 	movhi	r4,2
   1cea8:	21394304 	addi	r4,r4,-6900
   1ceac:	20c7883a 	add	r3,r4,r3
   1ceb0:	18c00003 	ldbu	r3,0(r3)
   1ceb4:	05c00804 	movi	r23,32
   1ceb8:	1885883a 	add	r2,r3,r2
   1cebc:	b8afc83a 	sub	r23,r23,r2
   1cec0:	b800671e 	bne	r23,zero,1d060 <__udivdi3+0x32c>
   1cec4:	3c010536 	bltu	r7,r16,1d2dc <__udivdi3+0x5a8>
   1cec8:	9985403a 	cmpgeu	r2,r19,r6
   1cecc:	0007883a 	mov	r3,zero
   1ced0:	00004a06 	br	1cffc <__udivdi3+0x2c8>
   1ced4:	3000041e 	bne	r6,zero,1cee8 <__udivdi3+0x1b4>
   1ced8:	000b883a 	mov	r5,zero
   1cedc:	01000044 	movi	r4,1
   1cee0:	0011d340 	call	11d34 <__udivsi3>
   1cee4:	1023883a 	mov	r17,r2
   1cee8:	00bfffd4 	movui	r2,65535
   1ceec:	1440532e 	bgeu	r2,r17,1d03c <__udivdi3+0x308>
   1cef0:	00804034 	movhi	r2,256
   1cef4:	10bfffc4 	addi	r2,r2,-1
   1cef8:	1440f436 	bltu	r2,r17,1d2cc <__udivdi3+0x598>
   1cefc:	00800404 	movi	r2,16
   1cf00:	8886d83a 	srl	r3,r17,r2
   1cf04:	010000b4 	movhi	r4,2
   1cf08:	21394304 	addi	r4,r4,-6900
   1cf0c:	20c7883a 	add	r3,r4,r3
   1cf10:	18c00003 	ldbu	r3,0(r3)
   1cf14:	1885883a 	add	r2,r3,r2
   1cf18:	00c00804 	movi	r3,32
   1cf1c:	1887c83a 	sub	r3,r3,r2
   1cf20:	1800a51e 	bne	r3,zero,1d1b8 <__udivdi3+0x484>
   1cf24:	882ad43a 	srli	r21,r17,16
   1cf28:	8461c83a 	sub	r16,r16,r17
   1cf2c:	8d3fffcc 	andi	r20,r17,65535
   1cf30:	00c00044 	movi	r3,1
   1cf34:	a80b883a 	mov	r5,r21
   1cf38:	8009883a 	mov	r4,r16
   1cf3c:	d8c00115 	stw	r3,4(sp)
   1cf40:	0011d980 	call	11d98 <__umodsi3>
   1cf44:	a80b883a 	mov	r5,r21
   1cf48:	8009883a 	mov	r4,r16
   1cf4c:	1027883a 	mov	r19,r2
   1cf50:	0011d340 	call	11d34 <__udivsi3>
   1cf54:	a00b883a 	mov	r5,r20
   1cf58:	1009883a 	mov	r4,r2
   1cf5c:	102d883a 	mov	r22,r2
   1cf60:	00144f80 	call	144f8 <__mulsi3>
   1cf64:	9826943a 	slli	r19,r19,16
   1cf68:	900ed43a 	srli	r7,r18,16
   1cf6c:	d8c00117 	ldw	r3,4(sp)
   1cf70:	3cceb03a 	or	r7,r7,r19
   1cf74:	3880052e 	bgeu	r7,r2,1cf8c <__udivdi3+0x258>
   1cf78:	3c4f883a 	add	r7,r7,r17
   1cf7c:	b13fffc4 	addi	r4,r22,-1
   1cf80:	3c400136 	bltu	r7,r17,1cf88 <__udivdi3+0x254>
   1cf84:	3880e436 	bltu	r7,r2,1d318 <__udivdi3+0x5e4>
   1cf88:	202d883a 	mov	r22,r4
   1cf8c:	38a1c83a 	sub	r16,r7,r2
   1cf90:	8009883a 	mov	r4,r16
   1cf94:	a80b883a 	mov	r5,r21
   1cf98:	d8c00115 	stw	r3,4(sp)
   1cf9c:	0011d980 	call	11d98 <__umodsi3>
   1cfa0:	1027883a 	mov	r19,r2
   1cfa4:	8009883a 	mov	r4,r16
   1cfa8:	a80b883a 	mov	r5,r21
   1cfac:	9826943a 	slli	r19,r19,16
   1cfb0:	0011d340 	call	11d34 <__udivsi3>
   1cfb4:	a00b883a 	mov	r5,r20
   1cfb8:	1009883a 	mov	r4,r2
   1cfbc:	94bfffcc 	andi	r18,r18,65535
   1cfc0:	1021883a 	mov	r16,r2
   1cfc4:	94e4b03a 	or	r18,r18,r19
   1cfc8:	00144f80 	call	144f8 <__mulsi3>
   1cfcc:	d8c00117 	ldw	r3,4(sp)
   1cfd0:	9080052e 	bgeu	r18,r2,1cfe8 <__udivdi3+0x2b4>
   1cfd4:	8ca5883a 	add	r18,r17,r18
   1cfd8:	813fffc4 	addi	r4,r16,-1
   1cfdc:	9440ad36 	bltu	r18,r17,1d294 <__udivdi3+0x560>
   1cfe0:	9080ac2e 	bgeu	r18,r2,1d294 <__udivdi3+0x560>
   1cfe4:	843fff84 	addi	r16,r16,-2
   1cfe8:	b004943a 	slli	r2,r22,16
   1cfec:	1404b03a 	or	r2,r2,r16
   1cff0:	00000206 	br	1cffc <__udivdi3+0x2c8>
   1cff4:	0007883a 	mov	r3,zero
   1cff8:	0005883a 	mov	r2,zero
   1cffc:	dfc00b17 	ldw	ra,44(sp)
   1d000:	df000a17 	ldw	fp,40(sp)
   1d004:	ddc00917 	ldw	r23,36(sp)
   1d008:	dd800817 	ldw	r22,32(sp)
   1d00c:	dd400717 	ldw	r21,28(sp)
   1d010:	dd000617 	ldw	r20,24(sp)
   1d014:	dcc00517 	ldw	r19,20(sp)
   1d018:	dc800417 	ldw	r18,16(sp)
   1d01c:	dc400317 	ldw	r17,12(sp)
   1d020:	dc000217 	ldw	r16,8(sp)
   1d024:	dec00c04 	addi	sp,sp,48
   1d028:	f800283a 	ret
   1d02c:	00803fc4 	movi	r2,255
   1d030:	11c5803a 	cmpltu	r2,r2,r7
   1d034:	100490fa 	slli	r2,r2,3
   1d038:	003f9906 	br	1cea0 <_gp+0xffff5d98>
   1d03c:	00803fc4 	movi	r2,255
   1d040:	1445803a 	cmpltu	r2,r2,r17
   1d044:	100490fa 	slli	r2,r2,3
   1d048:	003fad06 	br	1cf00 <_gp+0xffff5df8>
   1d04c:	00804034 	movhi	r2,256
   1d050:	10bfffc4 	addi	r2,r2,-1
   1d054:	11809f36 	bltu	r2,r6,1d2d4 <__udivdi3+0x5a0>
   1d058:	00800404 	movi	r2,16
   1d05c:	003f4c06 	br	1cd90 <_gp+0xffff5c88>
   1d060:	3dce983a 	sll	r7,r7,r23
   1d064:	30b8d83a 	srl	fp,r6,r2
   1d068:	80a2d83a 	srl	r17,r16,r2
   1d06c:	35cc983a 	sll	r6,r6,r23
   1d070:	3f38b03a 	or	fp,r7,fp
   1d074:	e024d43a 	srli	r18,fp,16
   1d078:	9884d83a 	srl	r2,r19,r2
   1d07c:	85e0983a 	sll	r16,r16,r23
   1d080:	8809883a 	mov	r4,r17
   1d084:	900b883a 	mov	r5,r18
   1d088:	d9800015 	stw	r6,0(sp)
   1d08c:	1420b03a 	or	r16,r2,r16
   1d090:	0011d980 	call	11d98 <__umodsi3>
   1d094:	900b883a 	mov	r5,r18
   1d098:	8809883a 	mov	r4,r17
   1d09c:	1029883a 	mov	r20,r2
   1d0a0:	e5bfffcc 	andi	r22,fp,65535
   1d0a4:	0011d340 	call	11d34 <__udivsi3>
   1d0a8:	100b883a 	mov	r5,r2
   1d0ac:	b009883a 	mov	r4,r22
   1d0b0:	102b883a 	mov	r21,r2
   1d0b4:	00144f80 	call	144f8 <__mulsi3>
   1d0b8:	a028943a 	slli	r20,r20,16
   1d0bc:	8006d43a 	srli	r3,r16,16
   1d0c0:	1d06b03a 	or	r3,r3,r20
   1d0c4:	1880042e 	bgeu	r3,r2,1d0d8 <__udivdi3+0x3a4>
   1d0c8:	1f07883a 	add	r3,r3,fp
   1d0cc:	a93fffc4 	addi	r4,r21,-1
   1d0d0:	1f00892e 	bgeu	r3,fp,1d2f8 <__udivdi3+0x5c4>
   1d0d4:	202b883a 	mov	r21,r4
   1d0d8:	18a3c83a 	sub	r17,r3,r2
   1d0dc:	8809883a 	mov	r4,r17
   1d0e0:	900b883a 	mov	r5,r18
   1d0e4:	0011d980 	call	11d98 <__umodsi3>
   1d0e8:	1029883a 	mov	r20,r2
   1d0ec:	8809883a 	mov	r4,r17
   1d0f0:	900b883a 	mov	r5,r18
   1d0f4:	a028943a 	slli	r20,r20,16
   1d0f8:	0011d340 	call	11d34 <__udivsi3>
   1d0fc:	100b883a 	mov	r5,r2
   1d100:	b009883a 	mov	r4,r22
   1d104:	843fffcc 	andi	r16,r16,65535
   1d108:	1023883a 	mov	r17,r2
   1d10c:	8520b03a 	or	r16,r16,r20
   1d110:	00144f80 	call	144f8 <__mulsi3>
   1d114:	8080042e 	bgeu	r16,r2,1d128 <__udivdi3+0x3f4>
   1d118:	8721883a 	add	r16,r16,fp
   1d11c:	88ffffc4 	addi	r3,r17,-1
   1d120:	8700712e 	bgeu	r16,fp,1d2e8 <__udivdi3+0x5b4>
   1d124:	1823883a 	mov	r17,r3
   1d128:	a80e943a 	slli	r7,r21,16
   1d12c:	d8c00017 	ldw	r3,0(sp)
   1d130:	80a1c83a 	sub	r16,r16,r2
   1d134:	3c64b03a 	or	r18,r7,r17
   1d138:	1d3fffcc 	andi	r20,r3,65535
   1d13c:	9022d43a 	srli	r17,r18,16
   1d140:	95bfffcc 	andi	r22,r18,65535
   1d144:	a00b883a 	mov	r5,r20
   1d148:	b009883a 	mov	r4,r22
   1d14c:	182ad43a 	srli	r21,r3,16
   1d150:	00144f80 	call	144f8 <__mulsi3>
   1d154:	a00b883a 	mov	r5,r20
   1d158:	8809883a 	mov	r4,r17
   1d15c:	1039883a 	mov	fp,r2
   1d160:	00144f80 	call	144f8 <__mulsi3>
   1d164:	8809883a 	mov	r4,r17
   1d168:	a80b883a 	mov	r5,r21
   1d16c:	1029883a 	mov	r20,r2
   1d170:	00144f80 	call	144f8 <__mulsi3>
   1d174:	a80b883a 	mov	r5,r21
   1d178:	b009883a 	mov	r4,r22
   1d17c:	1023883a 	mov	r17,r2
   1d180:	00144f80 	call	144f8 <__mulsi3>
   1d184:	e006d43a 	srli	r3,fp,16
   1d188:	1505883a 	add	r2,r2,r20
   1d18c:	1887883a 	add	r3,r3,r2
   1d190:	1d00022e 	bgeu	r3,r20,1d19c <__udivdi3+0x468>
   1d194:	00800074 	movhi	r2,1
   1d198:	88a3883a 	add	r17,r17,r2
   1d19c:	1804d43a 	srli	r2,r3,16
   1d1a0:	1463883a 	add	r17,r2,r17
   1d1a4:	84404436 	bltu	r16,r17,1d2b8 <__udivdi3+0x584>
   1d1a8:	84403e26 	beq	r16,r17,1d2a4 <__udivdi3+0x570>
   1d1ac:	9005883a 	mov	r2,r18
   1d1b0:	0007883a 	mov	r3,zero
   1d1b4:	003f9106 	br	1cffc <_gp+0xffff5ef4>
   1d1b8:	88e2983a 	sll	r17,r17,r3
   1d1bc:	80aed83a 	srl	r23,r16,r2
   1d1c0:	80e0983a 	sll	r16,r16,r3
   1d1c4:	882ad43a 	srli	r21,r17,16
   1d1c8:	9884d83a 	srl	r2,r19,r2
   1d1cc:	b809883a 	mov	r4,r23
   1d1d0:	a80b883a 	mov	r5,r21
   1d1d4:	98e4983a 	sll	r18,r19,r3
   1d1d8:	142cb03a 	or	r22,r2,r16
   1d1dc:	0011d980 	call	11d98 <__umodsi3>
   1d1e0:	b809883a 	mov	r4,r23
   1d1e4:	a80b883a 	mov	r5,r21
   1d1e8:	1027883a 	mov	r19,r2
   1d1ec:	8d3fffcc 	andi	r20,r17,65535
   1d1f0:	0011d340 	call	11d34 <__udivsi3>
   1d1f4:	a009883a 	mov	r4,r20
   1d1f8:	100b883a 	mov	r5,r2
   1d1fc:	102f883a 	mov	r23,r2
   1d200:	00144f80 	call	144f8 <__mulsi3>
   1d204:	9826943a 	slli	r19,r19,16
   1d208:	b008d43a 	srli	r4,r22,16
   1d20c:	24c8b03a 	or	r4,r4,r19
   1d210:	2080062e 	bgeu	r4,r2,1d22c <__udivdi3+0x4f8>
   1d214:	2449883a 	add	r4,r4,r17
   1d218:	b8ffffc4 	addi	r3,r23,-1
   1d21c:	24403c36 	bltu	r4,r17,1d310 <__udivdi3+0x5dc>
   1d220:	20803b2e 	bgeu	r4,r2,1d310 <__udivdi3+0x5dc>
   1d224:	bdffff84 	addi	r23,r23,-2
   1d228:	2449883a 	add	r4,r4,r17
   1d22c:	20a1c83a 	sub	r16,r4,r2
   1d230:	a80b883a 	mov	r5,r21
   1d234:	8009883a 	mov	r4,r16
   1d238:	0011d980 	call	11d98 <__umodsi3>
   1d23c:	a80b883a 	mov	r5,r21
   1d240:	8009883a 	mov	r4,r16
   1d244:	1027883a 	mov	r19,r2
   1d248:	0011d340 	call	11d34 <__udivsi3>
   1d24c:	a009883a 	mov	r4,r20
   1d250:	100b883a 	mov	r5,r2
   1d254:	9826943a 	slli	r19,r19,16
   1d258:	1039883a 	mov	fp,r2
   1d25c:	00144f80 	call	144f8 <__mulsi3>
   1d260:	b13fffcc 	andi	r4,r22,65535
   1d264:	24c8b03a 	or	r4,r4,r19
   1d268:	2080062e 	bgeu	r4,r2,1d284 <__udivdi3+0x550>
   1d26c:	2449883a 	add	r4,r4,r17
   1d270:	e0ffffc4 	addi	r3,fp,-1
   1d274:	24402436 	bltu	r4,r17,1d308 <__udivdi3+0x5d4>
   1d278:	2080232e 	bgeu	r4,r2,1d308 <__udivdi3+0x5d4>
   1d27c:	e73fff84 	addi	fp,fp,-2
   1d280:	2449883a 	add	r4,r4,r17
   1d284:	b82e943a 	slli	r23,r23,16
   1d288:	20a1c83a 	sub	r16,r4,r2
   1d28c:	bf06b03a 	or	r3,r23,fp
   1d290:	003f2806 	br	1cf34 <_gp+0xffff5e2c>
   1d294:	2021883a 	mov	r16,r4
   1d298:	003f5306 	br	1cfe8 <_gp+0xffff5ee0>
   1d29c:	1821883a 	mov	r16,r3
   1d2a0:	003ef406 	br	1ce74 <_gp+0xffff5d6c>
   1d2a4:	1806943a 	slli	r3,r3,16
   1d2a8:	9de6983a 	sll	r19,r19,r23
   1d2ac:	e73fffcc 	andi	fp,fp,65535
   1d2b0:	1f07883a 	add	r3,r3,fp
   1d2b4:	98ffbd2e 	bgeu	r19,r3,1d1ac <_gp+0xffff60a4>
   1d2b8:	90bfffc4 	addi	r2,r18,-1
   1d2bc:	0007883a 	mov	r3,zero
   1d2c0:	003f4e06 	br	1cffc <_gp+0xffff5ef4>
   1d2c4:	00800604 	movi	r2,24
   1d2c8:	003ef506 	br	1cea0 <_gp+0xffff5d98>
   1d2cc:	00800604 	movi	r2,24
   1d2d0:	003f0b06 	br	1cf00 <_gp+0xffff5df8>
   1d2d4:	00800604 	movi	r2,24
   1d2d8:	003ead06 	br	1cd90 <_gp+0xffff5c88>
   1d2dc:	0007883a 	mov	r3,zero
   1d2e0:	00800044 	movi	r2,1
   1d2e4:	003f4506 	br	1cffc <_gp+0xffff5ef4>
   1d2e8:	80bf8e2e 	bgeu	r16,r2,1d124 <_gp+0xffff601c>
   1d2ec:	8c7fff84 	addi	r17,r17,-2
   1d2f0:	8721883a 	add	r16,r16,fp
   1d2f4:	003f8c06 	br	1d128 <_gp+0xffff6020>
   1d2f8:	18bf762e 	bgeu	r3,r2,1d0d4 <_gp+0xffff5fcc>
   1d2fc:	ad7fff84 	addi	r21,r21,-2
   1d300:	1f07883a 	add	r3,r3,fp
   1d304:	003f7406 	br	1d0d8 <_gp+0xffff5fd0>
   1d308:	1839883a 	mov	fp,r3
   1d30c:	003fdd06 	br	1d284 <_gp+0xffff617c>
   1d310:	182f883a 	mov	r23,r3
   1d314:	003fc506 	br	1d22c <_gp+0xffff6124>
   1d318:	b5bfff84 	addi	r22,r22,-2
   1d31c:	3c4f883a 	add	r7,r7,r17
   1d320:	003f1a06 	br	1cf8c <_gp+0xffff5e84>
   1d324:	b5bfff84 	addi	r22,r22,-2
   1d328:	1c47883a 	add	r3,r3,r17
   1d32c:	003ebc06 	br	1ce20 <_gp+0xffff5d18>

0001d330 <__umoddi3>:
   1d330:	defff304 	addi	sp,sp,-52
   1d334:	df000b15 	stw	fp,44(sp)
   1d338:	dc400415 	stw	r17,16(sp)
   1d33c:	dc000315 	stw	r16,12(sp)
   1d340:	dfc00c15 	stw	ra,48(sp)
   1d344:	ddc00a15 	stw	r23,40(sp)
   1d348:	dd800915 	stw	r22,36(sp)
   1d34c:	dd400815 	stw	r21,32(sp)
   1d350:	dd000715 	stw	r20,28(sp)
   1d354:	dcc00615 	stw	r19,24(sp)
   1d358:	dc800515 	stw	r18,20(sp)
   1d35c:	2021883a 	mov	r16,r4
   1d360:	2823883a 	mov	r17,r5
   1d364:	2839883a 	mov	fp,r5
   1d368:	3800401e 	bne	r7,zero,1d46c <__umoddi3+0x13c>
   1d36c:	3027883a 	mov	r19,r6
   1d370:	2029883a 	mov	r20,r4
   1d374:	2980552e 	bgeu	r5,r6,1d4cc <__umoddi3+0x19c>
   1d378:	00bfffd4 	movui	r2,65535
   1d37c:	1180a236 	bltu	r2,r6,1d608 <__umoddi3+0x2d8>
   1d380:	01003fc4 	movi	r4,255
   1d384:	2189803a 	cmpltu	r4,r4,r6
   1d388:	200890fa 	slli	r4,r4,3
   1d38c:	3104d83a 	srl	r2,r6,r4
   1d390:	00c000b4 	movhi	r3,2
   1d394:	18f94304 	addi	r3,r3,-6900
   1d398:	1885883a 	add	r2,r3,r2
   1d39c:	10c00003 	ldbu	r3,0(r2)
   1d3a0:	00800804 	movi	r2,32
   1d3a4:	1909883a 	add	r4,r3,r4
   1d3a8:	1125c83a 	sub	r18,r2,r4
   1d3ac:	90000526 	beq	r18,zero,1d3c4 <__umoddi3+0x94>
   1d3b0:	8ca2983a 	sll	r17,r17,r18
   1d3b4:	8108d83a 	srl	r4,r16,r4
   1d3b8:	34a6983a 	sll	r19,r6,r18
   1d3bc:	84a8983a 	sll	r20,r16,r18
   1d3c0:	2478b03a 	or	fp,r4,r17
   1d3c4:	982cd43a 	srli	r22,r19,16
   1d3c8:	e009883a 	mov	r4,fp
   1d3cc:	9dffffcc 	andi	r23,r19,65535
   1d3d0:	b00b883a 	mov	r5,r22
   1d3d4:	0011d980 	call	11d98 <__umodsi3>
   1d3d8:	b00b883a 	mov	r5,r22
   1d3dc:	e009883a 	mov	r4,fp
   1d3e0:	102b883a 	mov	r21,r2
   1d3e4:	0011d340 	call	11d34 <__udivsi3>
   1d3e8:	100b883a 	mov	r5,r2
   1d3ec:	b809883a 	mov	r4,r23
   1d3f0:	00144f80 	call	144f8 <__mulsi3>
   1d3f4:	a82a943a 	slli	r21,r21,16
   1d3f8:	a006d43a 	srli	r3,r20,16
   1d3fc:	1d46b03a 	or	r3,r3,r21
   1d400:	1880032e 	bgeu	r3,r2,1d410 <__umoddi3+0xe0>
   1d404:	1cc7883a 	add	r3,r3,r19
   1d408:	1cc00136 	bltu	r3,r19,1d410 <__umoddi3+0xe0>
   1d40c:	18813136 	bltu	r3,r2,1d8d4 <__umoddi3+0x5a4>
   1d410:	18a1c83a 	sub	r16,r3,r2
   1d414:	b00b883a 	mov	r5,r22
   1d418:	8009883a 	mov	r4,r16
   1d41c:	0011d980 	call	11d98 <__umodsi3>
   1d420:	b00b883a 	mov	r5,r22
   1d424:	8009883a 	mov	r4,r16
   1d428:	1023883a 	mov	r17,r2
   1d42c:	0011d340 	call	11d34 <__udivsi3>
   1d430:	100b883a 	mov	r5,r2
   1d434:	b809883a 	mov	r4,r23
   1d438:	8822943a 	slli	r17,r17,16
   1d43c:	00144f80 	call	144f8 <__mulsi3>
   1d440:	a0ffffcc 	andi	r3,r20,65535
   1d444:	1c46b03a 	or	r3,r3,r17
   1d448:	1880042e 	bgeu	r3,r2,1d45c <__umoddi3+0x12c>
   1d44c:	1cc7883a 	add	r3,r3,r19
   1d450:	1cc00236 	bltu	r3,r19,1d45c <__umoddi3+0x12c>
   1d454:	1880012e 	bgeu	r3,r2,1d45c <__umoddi3+0x12c>
   1d458:	1cc7883a 	add	r3,r3,r19
   1d45c:	1885c83a 	sub	r2,r3,r2
   1d460:	1484d83a 	srl	r2,r2,r18
   1d464:	0007883a 	mov	r3,zero
   1d468:	00005306 	br	1d5b8 <__umoddi3+0x288>
   1d46c:	29c05036 	bltu	r5,r7,1d5b0 <__umoddi3+0x280>
   1d470:	00bfffd4 	movui	r2,65535
   1d474:	11c05c2e 	bgeu	r2,r7,1d5e8 <__umoddi3+0x2b8>
   1d478:	00804034 	movhi	r2,256
   1d47c:	10bfffc4 	addi	r2,r2,-1
   1d480:	11c10636 	bltu	r2,r7,1d89c <__umoddi3+0x56c>
   1d484:	01000404 	movi	r4,16
   1d488:	3904d83a 	srl	r2,r7,r4
   1d48c:	00c000b4 	movhi	r3,2
   1d490:	18f94304 	addi	r3,r3,-6900
   1d494:	1885883a 	add	r2,r3,r2
   1d498:	14c00003 	ldbu	r19,0(r2)
   1d49c:	00c00804 	movi	r3,32
   1d4a0:	9927883a 	add	r19,r19,r4
   1d4a4:	1ce9c83a 	sub	r20,r3,r19
   1d4a8:	a0005c1e 	bne	r20,zero,1d61c <__umoddi3+0x2ec>
   1d4ac:	3c400136 	bltu	r7,r17,1d4b4 <__umoddi3+0x184>
   1d4b0:	81810a36 	bltu	r16,r6,1d8dc <__umoddi3+0x5ac>
   1d4b4:	8185c83a 	sub	r2,r16,r6
   1d4b8:	89e3c83a 	sub	r17,r17,r7
   1d4bc:	8089803a 	cmpltu	r4,r16,r2
   1d4c0:	8939c83a 	sub	fp,r17,r4
   1d4c4:	e007883a 	mov	r3,fp
   1d4c8:	00003b06 	br	1d5b8 <__umoddi3+0x288>
   1d4cc:	3000041e 	bne	r6,zero,1d4e0 <__umoddi3+0x1b0>
   1d4d0:	000b883a 	mov	r5,zero
   1d4d4:	01000044 	movi	r4,1
   1d4d8:	0011d340 	call	11d34 <__udivsi3>
   1d4dc:	1027883a 	mov	r19,r2
   1d4e0:	00bfffd4 	movui	r2,65535
   1d4e4:	14c0442e 	bgeu	r2,r19,1d5f8 <__umoddi3+0x2c8>
   1d4e8:	00804034 	movhi	r2,256
   1d4ec:	10bfffc4 	addi	r2,r2,-1
   1d4f0:	14c0ec36 	bltu	r2,r19,1d8a4 <__umoddi3+0x574>
   1d4f4:	00800404 	movi	r2,16
   1d4f8:	9886d83a 	srl	r3,r19,r2
   1d4fc:	010000b4 	movhi	r4,2
   1d500:	21394304 	addi	r4,r4,-6900
   1d504:	20c7883a 	add	r3,r4,r3
   1d508:	18c00003 	ldbu	r3,0(r3)
   1d50c:	1887883a 	add	r3,r3,r2
   1d510:	00800804 	movi	r2,32
   1d514:	10e5c83a 	sub	r18,r2,r3
   1d518:	9000ab1e 	bne	r18,zero,1d7c8 <__umoddi3+0x498>
   1d51c:	982cd43a 	srli	r22,r19,16
   1d520:	8ce3c83a 	sub	r17,r17,r19
   1d524:	9dffffcc 	andi	r23,r19,65535
   1d528:	b00b883a 	mov	r5,r22
   1d52c:	8809883a 	mov	r4,r17
   1d530:	0011d980 	call	11d98 <__umodsi3>
   1d534:	b00b883a 	mov	r5,r22
   1d538:	8809883a 	mov	r4,r17
   1d53c:	102b883a 	mov	r21,r2
   1d540:	0011d340 	call	11d34 <__udivsi3>
   1d544:	b80b883a 	mov	r5,r23
   1d548:	1009883a 	mov	r4,r2
   1d54c:	00144f80 	call	144f8 <__mulsi3>
   1d550:	a82a943a 	slli	r21,r21,16
   1d554:	a006d43a 	srli	r3,r20,16
   1d558:	1d46b03a 	or	r3,r3,r21
   1d55c:	1880042e 	bgeu	r3,r2,1d570 <__umoddi3+0x240>
   1d560:	1cc7883a 	add	r3,r3,r19
   1d564:	1cc00236 	bltu	r3,r19,1d570 <__umoddi3+0x240>
   1d568:	1880012e 	bgeu	r3,r2,1d570 <__umoddi3+0x240>
   1d56c:	1cc7883a 	add	r3,r3,r19
   1d570:	18a1c83a 	sub	r16,r3,r2
   1d574:	b00b883a 	mov	r5,r22
   1d578:	8009883a 	mov	r4,r16
   1d57c:	0011d980 	call	11d98 <__umodsi3>
   1d580:	1023883a 	mov	r17,r2
   1d584:	b00b883a 	mov	r5,r22
   1d588:	8009883a 	mov	r4,r16
   1d58c:	0011d340 	call	11d34 <__udivsi3>
   1d590:	8822943a 	slli	r17,r17,16
   1d594:	b80b883a 	mov	r5,r23
   1d598:	1009883a 	mov	r4,r2
   1d59c:	00144f80 	call	144f8 <__mulsi3>
   1d5a0:	a53fffcc 	andi	r20,r20,65535
   1d5a4:	a446b03a 	or	r3,r20,r17
   1d5a8:	18bfac2e 	bgeu	r3,r2,1d45c <_gp+0xffff6354>
   1d5ac:	003fa706 	br	1d44c <_gp+0xffff6344>
   1d5b0:	2005883a 	mov	r2,r4
   1d5b4:	2807883a 	mov	r3,r5
   1d5b8:	dfc00c17 	ldw	ra,48(sp)
   1d5bc:	df000b17 	ldw	fp,44(sp)
   1d5c0:	ddc00a17 	ldw	r23,40(sp)
   1d5c4:	dd800917 	ldw	r22,36(sp)
   1d5c8:	dd400817 	ldw	r21,32(sp)
   1d5cc:	dd000717 	ldw	r20,28(sp)
   1d5d0:	dcc00617 	ldw	r19,24(sp)
   1d5d4:	dc800517 	ldw	r18,20(sp)
   1d5d8:	dc400417 	ldw	r17,16(sp)
   1d5dc:	dc000317 	ldw	r16,12(sp)
   1d5e0:	dec00d04 	addi	sp,sp,52
   1d5e4:	f800283a 	ret
   1d5e8:	04c03fc4 	movi	r19,255
   1d5ec:	99c9803a 	cmpltu	r4,r19,r7
   1d5f0:	200890fa 	slli	r4,r4,3
   1d5f4:	003fa406 	br	1d488 <_gp+0xffff6380>
   1d5f8:	00803fc4 	movi	r2,255
   1d5fc:	14c5803a 	cmpltu	r2,r2,r19
   1d600:	100490fa 	slli	r2,r2,3
   1d604:	003fbc06 	br	1d4f8 <_gp+0xffff63f0>
   1d608:	00804034 	movhi	r2,256
   1d60c:	10bfffc4 	addi	r2,r2,-1
   1d610:	1180a636 	bltu	r2,r6,1d8ac <__umoddi3+0x57c>
   1d614:	01000404 	movi	r4,16
   1d618:	003f5c06 	br	1d38c <_gp+0xffff6284>
   1d61c:	3d0e983a 	sll	r7,r7,r20
   1d620:	34ead83a 	srl	r21,r6,r19
   1d624:	8cc6d83a 	srl	r3,r17,r19
   1d628:	8d10983a 	sll	r8,r17,r20
   1d62c:	3d6ab03a 	or	r21,r7,r21
   1d630:	a82cd43a 	srli	r22,r21,16
   1d634:	84e2d83a 	srl	r17,r16,r19
   1d638:	1809883a 	mov	r4,r3
   1d63c:	b00b883a 	mov	r5,r22
   1d640:	8a22b03a 	or	r17,r17,r8
   1d644:	3524983a 	sll	r18,r6,r20
   1d648:	dc400015 	stw	r17,0(sp)
   1d64c:	d8c00115 	stw	r3,4(sp)
   1d650:	0011d980 	call	11d98 <__umodsi3>
   1d654:	d8c00117 	ldw	r3,4(sp)
   1d658:	b00b883a 	mov	r5,r22
   1d65c:	1039883a 	mov	fp,r2
   1d660:	1809883a 	mov	r4,r3
   1d664:	0011d340 	call	11d34 <__udivsi3>
   1d668:	adffffcc 	andi	r23,r21,65535
   1d66c:	100b883a 	mov	r5,r2
   1d670:	b809883a 	mov	r4,r23
   1d674:	1023883a 	mov	r17,r2
   1d678:	00144f80 	call	144f8 <__mulsi3>
   1d67c:	d9400017 	ldw	r5,0(sp)
   1d680:	e008943a 	slli	r4,fp,16
   1d684:	8520983a 	sll	r16,r16,r20
   1d688:	2806d43a 	srli	r3,r5,16
   1d68c:	1906b03a 	or	r3,r3,r4
   1d690:	1880042e 	bgeu	r3,r2,1d6a4 <__umoddi3+0x374>
   1d694:	1d47883a 	add	r3,r3,r21
   1d698:	893fffc4 	addi	r4,r17,-1
   1d69c:	1d40892e 	bgeu	r3,r21,1d8c4 <__umoddi3+0x594>
   1d6a0:	2023883a 	mov	r17,r4
   1d6a4:	18b9c83a 	sub	fp,r3,r2
   1d6a8:	b00b883a 	mov	r5,r22
   1d6ac:	e009883a 	mov	r4,fp
   1d6b0:	0011d980 	call	11d98 <__umodsi3>
   1d6b4:	b00b883a 	mov	r5,r22
   1d6b8:	e009883a 	mov	r4,fp
   1d6bc:	d8800215 	stw	r2,8(sp)
   1d6c0:	0011d340 	call	11d34 <__udivsi3>
   1d6c4:	100b883a 	mov	r5,r2
   1d6c8:	b809883a 	mov	r4,r23
   1d6cc:	102d883a 	mov	r22,r2
   1d6d0:	00144f80 	call	144f8 <__mulsi3>
   1d6d4:	d9800217 	ldw	r6,8(sp)
   1d6d8:	d8c00017 	ldw	r3,0(sp)
   1d6dc:	300c943a 	slli	r6,r6,16
   1d6e0:	1a3fffcc 	andi	r8,r3,65535
   1d6e4:	4190b03a 	or	r8,r8,r6
   1d6e8:	4080042e 	bgeu	r8,r2,1d6fc <__umoddi3+0x3cc>
   1d6ec:	4551883a 	add	r8,r8,r21
   1d6f0:	b0ffffc4 	addi	r3,r22,-1
   1d6f4:	45406f2e 	bgeu	r8,r21,1d8b4 <__umoddi3+0x584>
   1d6f8:	182d883a 	mov	r22,r3
   1d6fc:	880e943a 	slli	r7,r17,16
   1d700:	9006d43a 	srli	r3,r18,16
   1d704:	91bfffcc 	andi	r6,r18,65535
   1d708:	3dacb03a 	or	r22,r7,r22
   1d70c:	b02ed43a 	srli	r23,r22,16
   1d710:	b5bfffcc 	andi	r22,r22,65535
   1d714:	300b883a 	mov	r5,r6
   1d718:	b009883a 	mov	r4,r22
   1d71c:	40a3c83a 	sub	r17,r8,r2
   1d720:	d8c00115 	stw	r3,4(sp)
   1d724:	d9800215 	stw	r6,8(sp)
   1d728:	00144f80 	call	144f8 <__mulsi3>
   1d72c:	d9800217 	ldw	r6,8(sp)
   1d730:	b809883a 	mov	r4,r23
   1d734:	1039883a 	mov	fp,r2
   1d738:	300b883a 	mov	r5,r6
   1d73c:	00144f80 	call	144f8 <__mulsi3>
   1d740:	d8c00117 	ldw	r3,4(sp)
   1d744:	b809883a 	mov	r4,r23
   1d748:	d8800215 	stw	r2,8(sp)
   1d74c:	180b883a 	mov	r5,r3
   1d750:	00144f80 	call	144f8 <__mulsi3>
   1d754:	d8c00117 	ldw	r3,4(sp)
   1d758:	b009883a 	mov	r4,r22
   1d75c:	102f883a 	mov	r23,r2
   1d760:	180b883a 	mov	r5,r3
   1d764:	00144f80 	call	144f8 <__mulsi3>
   1d768:	d9800217 	ldw	r6,8(sp)
   1d76c:	e006d43a 	srli	r3,fp,16
   1d770:	1185883a 	add	r2,r2,r6
   1d774:	1885883a 	add	r2,r3,r2
   1d778:	1180022e 	bgeu	r2,r6,1d784 <__umoddi3+0x454>
   1d77c:	00c00074 	movhi	r3,1
   1d780:	b8ef883a 	add	r23,r23,r3
   1d784:	1006d43a 	srli	r3,r2,16
   1d788:	1004943a 	slli	r2,r2,16
   1d78c:	e73fffcc 	andi	fp,fp,65535
   1d790:	1dc7883a 	add	r3,r3,r23
   1d794:	1739883a 	add	fp,r2,fp
   1d798:	88c03a36 	bltu	r17,r3,1d884 <__umoddi3+0x554>
   1d79c:	88c05126 	beq	r17,r3,1d8e4 <__umoddi3+0x5b4>
   1d7a0:	88c9c83a 	sub	r4,r17,r3
   1d7a4:	e00f883a 	mov	r7,fp
   1d7a8:	81cfc83a 	sub	r7,r16,r7
   1d7ac:	81c7803a 	cmpltu	r3,r16,r7
   1d7b0:	20c7c83a 	sub	r3,r4,r3
   1d7b4:	1cc4983a 	sll	r2,r3,r19
   1d7b8:	3d0ed83a 	srl	r7,r7,r20
   1d7bc:	1d06d83a 	srl	r3,r3,r20
   1d7c0:	11c4b03a 	or	r2,r2,r7
   1d7c4:	003f7c06 	br	1d5b8 <_gp+0xffff64b0>
   1d7c8:	9ca6983a 	sll	r19,r19,r18
   1d7cc:	88f8d83a 	srl	fp,r17,r3
   1d7d0:	80c4d83a 	srl	r2,r16,r3
   1d7d4:	982cd43a 	srli	r22,r19,16
   1d7d8:	8ca2983a 	sll	r17,r17,r18
   1d7dc:	e009883a 	mov	r4,fp
   1d7e0:	b00b883a 	mov	r5,r22
   1d7e4:	146ab03a 	or	r21,r2,r17
   1d7e8:	0011d980 	call	11d98 <__umodsi3>
   1d7ec:	b00b883a 	mov	r5,r22
   1d7f0:	e009883a 	mov	r4,fp
   1d7f4:	1029883a 	mov	r20,r2
   1d7f8:	9dffffcc 	andi	r23,r19,65535
   1d7fc:	0011d340 	call	11d34 <__udivsi3>
   1d800:	b809883a 	mov	r4,r23
   1d804:	100b883a 	mov	r5,r2
   1d808:	00144f80 	call	144f8 <__mulsi3>
   1d80c:	a008943a 	slli	r4,r20,16
   1d810:	a806d43a 	srli	r3,r21,16
   1d814:	84a8983a 	sll	r20,r16,r18
   1d818:	1906b03a 	or	r3,r3,r4
   1d81c:	1880042e 	bgeu	r3,r2,1d830 <__umoddi3+0x500>
   1d820:	1cc7883a 	add	r3,r3,r19
   1d824:	1cc00236 	bltu	r3,r19,1d830 <__umoddi3+0x500>
   1d828:	1880012e 	bgeu	r3,r2,1d830 <__umoddi3+0x500>
   1d82c:	1cc7883a 	add	r3,r3,r19
   1d830:	18a3c83a 	sub	r17,r3,r2
   1d834:	b00b883a 	mov	r5,r22
   1d838:	8809883a 	mov	r4,r17
   1d83c:	0011d980 	call	11d98 <__umodsi3>
   1d840:	b00b883a 	mov	r5,r22
   1d844:	8809883a 	mov	r4,r17
   1d848:	1021883a 	mov	r16,r2
   1d84c:	0011d340 	call	11d34 <__udivsi3>
   1d850:	100b883a 	mov	r5,r2
   1d854:	b809883a 	mov	r4,r23
   1d858:	8020943a 	slli	r16,r16,16
   1d85c:	00144f80 	call	144f8 <__mulsi3>
   1d860:	a8ffffcc 	andi	r3,r21,65535
   1d864:	1c06b03a 	or	r3,r3,r16
   1d868:	1880042e 	bgeu	r3,r2,1d87c <__umoddi3+0x54c>
   1d86c:	1cc7883a 	add	r3,r3,r19
   1d870:	1cc00236 	bltu	r3,r19,1d87c <__umoddi3+0x54c>
   1d874:	1880012e 	bgeu	r3,r2,1d87c <__umoddi3+0x54c>
   1d878:	1cc7883a 	add	r3,r3,r19
   1d87c:	18a3c83a 	sub	r17,r3,r2
   1d880:	003f2906 	br	1d528 <_gp+0xffff6420>
   1d884:	e48fc83a 	sub	r7,fp,r18
   1d888:	1d49c83a 	sub	r4,r3,r21
   1d88c:	e1f9803a 	cmpltu	fp,fp,r7
   1d890:	2739c83a 	sub	fp,r4,fp
   1d894:	8f09c83a 	sub	r4,r17,fp
   1d898:	003fc306 	br	1d7a8 <_gp+0xffff66a0>
   1d89c:	01000604 	movi	r4,24
   1d8a0:	003ef906 	br	1d488 <_gp+0xffff6380>
   1d8a4:	00800604 	movi	r2,24
   1d8a8:	003f1306 	br	1d4f8 <_gp+0xffff63f0>
   1d8ac:	01000604 	movi	r4,24
   1d8b0:	003eb606 	br	1d38c <_gp+0xffff6284>
   1d8b4:	40bf902e 	bgeu	r8,r2,1d6f8 <_gp+0xffff65f0>
   1d8b8:	b5bfff84 	addi	r22,r22,-2
   1d8bc:	4551883a 	add	r8,r8,r21
   1d8c0:	003f8e06 	br	1d6fc <_gp+0xffff65f4>
   1d8c4:	18bf762e 	bgeu	r3,r2,1d6a0 <_gp+0xffff6598>
   1d8c8:	8c7fff84 	addi	r17,r17,-2
   1d8cc:	1d47883a 	add	r3,r3,r21
   1d8d0:	003f7406 	br	1d6a4 <_gp+0xffff659c>
   1d8d4:	1cc7883a 	add	r3,r3,r19
   1d8d8:	003ecd06 	br	1d410 <_gp+0xffff6308>
   1d8dc:	8005883a 	mov	r2,r16
   1d8e0:	003ef806 	br	1d4c4 <_gp+0xffff63bc>
   1d8e4:	873fe736 	bltu	r16,fp,1d884 <_gp+0xffff677c>
   1d8e8:	e00f883a 	mov	r7,fp
   1d8ec:	0009883a 	mov	r4,zero
   1d8f0:	003fad06 	br	1d7a8 <_gp+0xffff66a0>

0001d8f4 <__ledf2>:
   1d8f4:	2804d53a 	srli	r2,r5,20
   1d8f8:	3810d53a 	srli	r8,r7,20
   1d8fc:	00c00434 	movhi	r3,16
   1d900:	18ffffc4 	addi	r3,r3,-1
   1d904:	1081ffcc 	andi	r2,r2,2047
   1d908:	0241ffc4 	movi	r9,2047
   1d90c:	28d4703a 	and	r10,r5,r3
   1d910:	4201ffcc 	andi	r8,r8,2047
   1d914:	38c6703a 	and	r3,r7,r3
   1d918:	280ad7fa 	srli	r5,r5,31
   1d91c:	380ed7fa 	srli	r7,r7,31
   1d920:	12401f26 	beq	r2,r9,1d9a0 <__ledf2+0xac>
   1d924:	0241ffc4 	movi	r9,2047
   1d928:	42401426 	beq	r8,r9,1d97c <__ledf2+0x88>
   1d92c:	1000091e 	bne	r2,zero,1d954 <__ledf2+0x60>
   1d930:	2296b03a 	or	r11,r4,r10
   1d934:	5813003a 	cmpeq	r9,r11,zero
   1d938:	29403fcc 	andi	r5,r5,255
   1d93c:	40000a1e 	bne	r8,zero,1d968 <__ledf2+0x74>
   1d940:	30d8b03a 	or	r12,r6,r3
   1d944:	6000081e 	bne	r12,zero,1d968 <__ledf2+0x74>
   1d948:	0005883a 	mov	r2,zero
   1d94c:	5800111e 	bne	r11,zero,1d994 <__ledf2+0xa0>
   1d950:	f800283a 	ret
   1d954:	29403fcc 	andi	r5,r5,255
   1d958:	40000c1e 	bne	r8,zero,1d98c <__ledf2+0x98>
   1d95c:	30d2b03a 	or	r9,r6,r3
   1d960:	48000c26 	beq	r9,zero,1d994 <__ledf2+0xa0>
   1d964:	0013883a 	mov	r9,zero
   1d968:	39c03fcc 	andi	r7,r7,255
   1d96c:	48000826 	beq	r9,zero,1d990 <__ledf2+0x9c>
   1d970:	38001126 	beq	r7,zero,1d9b8 <__ledf2+0xc4>
   1d974:	00800044 	movi	r2,1
   1d978:	f800283a 	ret
   1d97c:	30d2b03a 	or	r9,r6,r3
   1d980:	483fea26 	beq	r9,zero,1d92c <_gp+0xffff6824>
   1d984:	00800084 	movi	r2,2
   1d988:	f800283a 	ret
   1d98c:	39c03fcc 	andi	r7,r7,255
   1d990:	39400726 	beq	r7,r5,1d9b0 <__ledf2+0xbc>
   1d994:	2800081e 	bne	r5,zero,1d9b8 <__ledf2+0xc4>
   1d998:	00800044 	movi	r2,1
   1d99c:	f800283a 	ret
   1d9a0:	2292b03a 	or	r9,r4,r10
   1d9a4:	483fdf26 	beq	r9,zero,1d924 <_gp+0xffff681c>
   1d9a8:	00800084 	movi	r2,2
   1d9ac:	f800283a 	ret
   1d9b0:	4080030e 	bge	r8,r2,1d9c0 <__ledf2+0xcc>
   1d9b4:	383fef26 	beq	r7,zero,1d974 <_gp+0xffff686c>
   1d9b8:	00bfffc4 	movi	r2,-1
   1d9bc:	f800283a 	ret
   1d9c0:	123feb16 	blt	r2,r8,1d970 <_gp+0xffff6868>
   1d9c4:	1abff336 	bltu	r3,r10,1d994 <_gp+0xffff688c>
   1d9c8:	50c00326 	beq	r10,r3,1d9d8 <__ledf2+0xe4>
   1d9cc:	50c0042e 	bgeu	r10,r3,1d9e0 <__ledf2+0xec>
   1d9d0:	283fe81e 	bne	r5,zero,1d974 <_gp+0xffff686c>
   1d9d4:	003ff806 	br	1d9b8 <_gp+0xffff68b0>
   1d9d8:	313fee36 	bltu	r6,r4,1d994 <_gp+0xffff688c>
   1d9dc:	21bffc36 	bltu	r4,r6,1d9d0 <_gp+0xffff68c8>
   1d9e0:	0005883a 	mov	r2,zero
   1d9e4:	f800283a 	ret

0001d9e8 <__floatunsidf>:
   1d9e8:	defffe04 	addi	sp,sp,-8
   1d9ec:	dc000015 	stw	r16,0(sp)
   1d9f0:	dfc00115 	stw	ra,4(sp)
   1d9f4:	2021883a 	mov	r16,r4
   1d9f8:	20002226 	beq	r4,zero,1da84 <__floatunsidf+0x9c>
   1d9fc:	00144940 	call	14494 <__clzsi2>
   1da00:	01010784 	movi	r4,1054
   1da04:	2089c83a 	sub	r4,r4,r2
   1da08:	01810cc4 	movi	r6,1075
   1da0c:	310dc83a 	sub	r6,r6,r4
   1da10:	00c007c4 	movi	r3,31
   1da14:	1980120e 	bge	r3,r6,1da60 <__floatunsidf+0x78>
   1da18:	00c104c4 	movi	r3,1043
   1da1c:	1907c83a 	sub	r3,r3,r4
   1da20:	80ca983a 	sll	r5,r16,r3
   1da24:	00800434 	movhi	r2,16
   1da28:	10bfffc4 	addi	r2,r2,-1
   1da2c:	2101ffcc 	andi	r4,r4,2047
   1da30:	0021883a 	mov	r16,zero
   1da34:	288a703a 	and	r5,r5,r2
   1da38:	2008953a 	slli	r4,r4,20
   1da3c:	00c00434 	movhi	r3,16
   1da40:	18ffffc4 	addi	r3,r3,-1
   1da44:	28c6703a 	and	r3,r5,r3
   1da48:	8005883a 	mov	r2,r16
   1da4c:	1906b03a 	or	r3,r3,r4
   1da50:	dfc00117 	ldw	ra,4(sp)
   1da54:	dc000017 	ldw	r16,0(sp)
   1da58:	dec00204 	addi	sp,sp,8
   1da5c:	f800283a 	ret
   1da60:	00c002c4 	movi	r3,11
   1da64:	188bc83a 	sub	r5,r3,r2
   1da68:	814ad83a 	srl	r5,r16,r5
   1da6c:	00c00434 	movhi	r3,16
   1da70:	18ffffc4 	addi	r3,r3,-1
   1da74:	81a0983a 	sll	r16,r16,r6
   1da78:	2101ffcc 	andi	r4,r4,2047
   1da7c:	28ca703a 	and	r5,r5,r3
   1da80:	003fed06 	br	1da38 <_gp+0xffff6930>
   1da84:	0009883a 	mov	r4,zero
   1da88:	000b883a 	mov	r5,zero
   1da8c:	003fea06 	br	1da38 <_gp+0xffff6930>

0001da90 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1da90:	008000b4 	movhi	r2,2
   1da94:	10bc2c04 	addi	r2,r2,-3920
   1da98:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   1da9c:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1daa0:	010000b4 	movhi	r4,2
   1daa4:	01800044 	movi	r6,1
   1daa8:	d80b883a 	mov	r5,sp
   1daac:	213c4c04 	addi	r4,r4,-3792
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   1dab0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1dab4:	001df000 	call	1df00 <altera_avalon_jtag_uart_read>
   1dab8:	0080020e 	bge	zero,r2,1dac4 <alt_getchar+0x34>
        return -1;
    }
    return c;
   1dabc:	d8800007 	ldb	r2,0(sp)
   1dac0:	00000106 	br	1dac8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   1dac4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   1dac8:	dfc00117 	ldw	ra,4(sp)
   1dacc:	dec00204 	addi	sp,sp,8
   1dad0:	f800283a 	ret

0001dad4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1dad4:	008007c4 	movi	r2,31
   1dad8:	11002136 	bltu	r2,r4,1db60 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dadc:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dae0:	00ffff84 	movi	r3,-2
   1dae4:	38c4703a 	and	r2,r7,r3
   1dae8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   1daec:	200490fa 	slli	r2,r4,3
   1daf0:	020000b4 	movhi	r8,2
   1daf4:	423fa104 	addi	r8,r8,-380
   1daf8:	4085883a 	add	r2,r8,r2
   1dafc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   1db00:	11400115 	stw	r5,4(r2)
   1db04:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1db08:	30000726 	beq	r6,zero,1db28 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db0c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db10:	28c6703a 	and	r3,r5,r3
   1db14:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   1db18:	d0e28417 	ldw	r3,-30192(gp)
   1db1c:	1104983a 	sll	r2,r2,r4
   1db20:	10c4b03a 	or	r2,r2,r3
   1db24:	00000706 	br	1db44 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db28:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db2c:	28c6703a 	and	r3,r5,r3
   1db30:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   1db34:	1104983a 	sll	r2,r2,r4
   1db38:	d0e28417 	ldw	r3,-30192(gp)
   1db3c:	0084303a 	nor	r2,zero,r2
   1db40:	10c4703a 	and	r2,r2,r3
   1db44:	d0a28415 	stw	r2,-30192(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1db48:	d0a28417 	ldw	r2,-30192(gp)
   1db4c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db50:	2801703a 	wrctl	status,r5
   1db54:	3801703a 	wrctl	status,r7
   1db58:	0005883a 	mov	r2,zero
   1db5c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   1db60:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   1db64:	f800283a 	ret

0001db68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1db68:	deffff04 	addi	sp,sp,-4
   1db6c:	010000b4 	movhi	r4,2
   1db70:	014000b4 	movhi	r5,2
   1db74:	dfc00015 	stw	ra,0(sp)
   1db78:	2139f804 	addi	r4,r4,-6176
   1db7c:	297c5304 	addi	r5,r5,-3764

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1db80:	2140061e 	bne	r4,r5,1db9c <alt_load+0x34>
   1db84:	01000074 	movhi	r4,1
   1db88:	01400074 	movhi	r5,1
   1db8c:	21000804 	addi	r4,r4,32
   1db90:	29400804 	addi	r5,r5,32
   1db94:	2140121e 	bne	r4,r5,1dbe0 <alt_load+0x78>
   1db98:	00000b06 	br	1dbc8 <alt_load+0x60>
   1db9c:	00c000b4 	movhi	r3,2
   1dba0:	18fc5304 	addi	r3,r3,-3764
   1dba4:	1907c83a 	sub	r3,r3,r4
   1dba8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1dbac:	10fff526 	beq	r2,r3,1db84 <_gp+0xffff6a7c>
    {
      *to++ = *from++;
   1dbb0:	114f883a 	add	r7,r2,r5
   1dbb4:	39c00017 	ldw	r7,0(r7)
   1dbb8:	110d883a 	add	r6,r2,r4
   1dbbc:	10800104 	addi	r2,r2,4
   1dbc0:	31c00015 	stw	r7,0(r6)
   1dbc4:	003ff906 	br	1dbac <_gp+0xffff6aa4>
   1dbc8:	010000b4 	movhi	r4,2
   1dbcc:	014000b4 	movhi	r5,2
   1dbd0:	21389704 	addi	r4,r4,-7588
   1dbd4:	29789704 	addi	r5,r5,-7588

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1dbd8:	2140101e 	bne	r4,r5,1dc1c <alt_load+0xb4>
   1dbdc:	00000b06 	br	1dc0c <alt_load+0xa4>
   1dbe0:	00c00074 	movhi	r3,1
   1dbe4:	18c06004 	addi	r3,r3,384
   1dbe8:	1907c83a 	sub	r3,r3,r4
   1dbec:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1dbf0:	10fff526 	beq	r2,r3,1dbc8 <_gp+0xffff6ac0>
    {
      *to++ = *from++;
   1dbf4:	114f883a 	add	r7,r2,r5
   1dbf8:	39c00017 	ldw	r7,0(r7)
   1dbfc:	110d883a 	add	r6,r2,r4
   1dc00:	10800104 	addi	r2,r2,4
   1dc04:	31c00015 	stw	r7,0(r6)
   1dc08:	003ff906 	br	1dbf0 <_gp+0xffff6ae8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1dc0c:	001e0f00 	call	1e0f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1dc10:	dfc00017 	ldw	ra,0(sp)
   1dc14:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1dc18:	001e1dc1 	jmpi	1e1dc <alt_icache_flush_all>
   1dc1c:	00c000b4 	movhi	r3,2
   1dc20:	18f9f804 	addi	r3,r3,-6176
   1dc24:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1dc28:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1dc2c:	18bff726 	beq	r3,r2,1dc0c <_gp+0xffff6b04>
    {
      *to++ = *from++;
   1dc30:	114f883a 	add	r7,r2,r5
   1dc34:	39c00017 	ldw	r7,0(r7)
   1dc38:	110d883a 	add	r6,r2,r4
   1dc3c:	10800104 	addi	r2,r2,4
   1dc40:	31c00015 	stw	r7,0(r6)
   1dc44:	003ff906 	br	1dc2c <_gp+0xffff6b24>

0001dc48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1dc48:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1dc4c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1dc50:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1dc54:	001deb80 	call	1deb8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1dc58:	001ded80 	call	1ded8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1dc5c:	d1a28517 	ldw	r6,-30188(gp)
   1dc60:	d1628617 	ldw	r5,-30184(gp)
   1dc64:	d1228717 	ldw	r4,-30180(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   1dc68:	dfc00017 	ldw	ra,0(sp)
   1dc6c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1dc70:	0010fac1 	jmpi	10fac <main>

0001dc74 <__malloc_lock>:
   1dc74:	f800283a 	ret

0001dc78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1dc78:	f800283a 	ret

0001dc7c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1dc7c:	defff204 	addi	sp,sp,-56
   1dc80:	2005883a 	mov	r2,r4
   1dc84:	dfc00a15 	stw	ra,40(sp)
   1dc88:	df000915 	stw	fp,36(sp)
   1dc8c:	ddc00815 	stw	r23,32(sp)
   1dc90:	dd800715 	stw	r22,28(sp)
   1dc94:	dd400615 	stw	r21,24(sp)
   1dc98:	dd000515 	stw	r20,20(sp)
   1dc9c:	dcc00415 	stw	r19,16(sp)
   1dca0:	dc800315 	stw	r18,12(sp)
   1dca4:	dc400215 	stw	r17,8(sp)
   1dca8:	dc000115 	stw	r16,4(sp)
   1dcac:	d9400b15 	stw	r5,44(sp)
   1dcb0:	d9800c15 	stw	r6,48(sp)
   1dcb4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1dcb8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   1dcbc:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   1dcc0:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   1dcc4:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   1dcc8:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1dccc:	11000007 	ldb	r4,0(r2)
   1dcd0:	20003a26 	beq	r4,zero,1ddbc <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1dcd4:	24000226 	beq	r4,r16,1dce0 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1dcd8:	14400044 	addi	r17,r2,1
   1dcdc:	00001406 	br	1dd30 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1dce0:	14400084 	addi	r17,r2,2
   1dce4:	10800047 	ldb	r2,1(r2)
   1dce8:	10003426 	beq	r2,zero,1ddbc <alt_printf+0x140>
            {
                if (c == '%')
   1dcec:	1400021e 	bne	r2,r16,1dcf8 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   1dcf0:	8009883a 	mov	r4,r16
   1dcf4:	00000e06 	br	1dd30 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   1dcf8:	1480051e 	bne	r2,r18,1dd10 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   1dcfc:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   1dd00:	ad800104 	addi	r22,r21,4
   1dd04:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   1dd08:	001ddec0 	call	1ddec <alt_putchar>
   1dd0c:	00002906 	br	1ddb4 <alt_printf+0x138>
                }
                else if (c == 'x')
   1dd10:	14c0201e 	bne	r2,r19,1dd94 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1dd14:	adc00017 	ldw	r23,0(r21)
   1dd18:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   1dd1c:	b8000326 	beq	r23,zero,1dd2c <alt_printf+0xb0>
   1dd20:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1dd24:	00c003c4 	movi	r3,15
   1dd28:	00000306 	br	1dd38 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   1dd2c:	01000c04 	movi	r4,48
   1dd30:	001ddec0 	call	1ddec <alt_putchar>
                        continue;
   1dd34:	00001f06 	br	1ddb4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1dd38:	1d84983a 	sll	r2,r3,r22
   1dd3c:	15c4703a 	and	r2,r2,r23
   1dd40:	1000021e 	bne	r2,zero,1dd4c <alt_printf+0xd0>
                        digit_shift -= 4;
   1dd44:	b5bfff04 	addi	r22,r22,-4
   1dd48:	003ffb06 	br	1dd38 <_gp+0xffff6c30>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1dd4c:	070003c4 	movi	fp,15
                        if (digit <= 9)
   1dd50:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1dd54:	b0001716 	blt	r22,zero,1ddb4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1dd58:	e588983a 	sll	r4,fp,r22
   1dd5c:	25c8703a 	and	r4,r4,r23
   1dd60:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   1dd64:	19000236 	bltu	r3,r4,1dd70 <alt_printf+0xf4>
                            c = '0' + digit;
   1dd68:	21000c04 	addi	r4,r4,48
   1dd6c:	00000106 	br	1dd74 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   1dd70:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   1dd74:	21003fcc 	andi	r4,r4,255
   1dd78:	2100201c 	xori	r4,r4,128
   1dd7c:	213fe004 	addi	r4,r4,-128
   1dd80:	d8c00015 	stw	r3,0(sp)
   1dd84:	001ddec0 	call	1ddec <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1dd88:	b5bfff04 	addi	r22,r22,-4
   1dd8c:	d8c00017 	ldw	r3,0(sp)
   1dd90:	003ff006 	br	1dd54 <_gp+0xffff6c4c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   1dd94:	1500071e 	bne	r2,r20,1ddb4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1dd98:	ad800017 	ldw	r22,0(r21)
   1dd9c:	ad400104 	addi	r21,r21,4

                    while(*s)
   1dda0:	b1000007 	ldb	r4,0(r22)
   1dda4:	20000326 	beq	r4,zero,1ddb4 <alt_printf+0x138>
                      alt_putchar(*s++);
   1dda8:	b5800044 	addi	r22,r22,1
   1ddac:	001ddec0 	call	1ddec <alt_putchar>
   1ddb0:	003ffb06 	br	1dda0 <_gp+0xffff6c98>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   1ddb4:	8805883a 	mov	r2,r17
   1ddb8:	003fc406 	br	1dccc <_gp+0xffff6bc4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1ddbc:	dfc00a17 	ldw	ra,40(sp)
   1ddc0:	df000917 	ldw	fp,36(sp)
   1ddc4:	ddc00817 	ldw	r23,32(sp)
   1ddc8:	dd800717 	ldw	r22,28(sp)
   1ddcc:	dd400617 	ldw	r21,24(sp)
   1ddd0:	dd000517 	ldw	r20,20(sp)
   1ddd4:	dcc00417 	ldw	r19,16(sp)
   1ddd8:	dc800317 	ldw	r18,12(sp)
   1dddc:	dc400217 	ldw	r17,8(sp)
   1dde0:	dc000117 	ldw	r16,4(sp)
   1dde4:	dec00e04 	addi	sp,sp,56
   1dde8:	f800283a 	ret

0001ddec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1ddec:	defffd04 	addi	sp,sp,-12
   1ddf0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   1ddf4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1ddf8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1ddfc:	010000b4 	movhi	r4,2
   1de00:	000f883a 	mov	r7,zero
   1de04:	01800044 	movi	r6,1
   1de08:	d80b883a 	mov	r5,sp
   1de0c:	213c4c04 	addi	r4,r4,-3792
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1de10:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1de14:	001df5c0 	call	1df5c <altera_avalon_jtag_uart_write>
   1de18:	00ffffc4 	movi	r3,-1
   1de1c:	10c00126 	beq	r2,r3,1de24 <alt_putchar+0x38>
        return -1;
    }
    return c;
   1de20:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   1de24:	dfc00217 	ldw	ra,8(sp)
   1de28:	dc000117 	ldw	r16,4(sp)
   1de2c:	dec00304 	addi	sp,sp,12
   1de30:	f800283a 	ret

0001de34 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1de34:	defffe04 	addi	sp,sp,-8
   1de38:	dc000015 	stw	r16,0(sp)
   1de3c:	dfc00115 	stw	ra,4(sp)
   1de40:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1de44:	00152740 	call	15274 <strlen>
   1de48:	010000b4 	movhi	r4,2
   1de4c:	000f883a 	mov	r7,zero
   1de50:	100d883a 	mov	r6,r2
   1de54:	800b883a 	mov	r5,r16
   1de58:	213c4c04 	addi	r4,r4,-3792
#else
    return fputs(str, stdout);
#endif
#endif
}
   1de5c:	dfc00117 	ldw	ra,4(sp)
   1de60:	dc000017 	ldw	r16,0(sp)
   1de64:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1de68:	001df5c1 	jmpi	1df5c <altera_avalon_jtag_uart_write>

0001de6c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de6c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de70:	00bfff84 	movi	r2,-2
   1de74:	2884703a 	and	r2,r5,r2
   1de78:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1de7c:	d0a00917 	ldw	r2,-32732(gp)
   1de80:	00ffff04 	movi	r3,-4
   1de84:	108000c4 	addi	r2,r2,3
   1de88:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1de8c:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1de90:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1de94:	1109883a 	add	r4,r2,r4
   1de98:	18c00004 	addi	r3,r3,0
   1de9c:	1900032e 	bgeu	r3,r4,1deac <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dea0:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1dea4:	00bfffc4 	movi	r2,-1
   1dea8:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   1deac:	d1200915 	stw	r4,-32732(gp)
   1deb0:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   1deb4:	f800283a 	ret

0001deb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1deb8:	deffff04 	addi	sp,sp,-4
   1debc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1dec0:	001e1e00 	call	1e1e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1dec4:	00800044 	movi	r2,1
   1dec8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1decc:	dfc00017 	ldw	ra,0(sp)
   1ded0:	dec00104 	addi	sp,sp,4
   1ded4:	f800283a 	ret

0001ded8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1ded8:	008000b4 	movhi	r2,2
   1dedc:	10840004 	addi	r2,r2,4096
   1dee0:	d0a28915 	stw	r2,-30172(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1dee4:	010000b4 	movhi	r4,2
   1dee8:	0080bef4 	movhi	r2,763
   1deec:	10bc2004 	addi	r2,r2,-3968
   1def0:	d1600c04 	addi	r5,gp,-32720
   1def4:	213c2104 	addi	r4,r4,-3964
   1def8:	d0a28815 	stw	r2,-30176(gp)
   1defc:	001e0fc1 	jmpi	1e0fc <alt_dev_llist_insert>

0001df00 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   1df00:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   1df04:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   1df08:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   1df0c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   1df10:	11800b2e 	bgeu	r2,r6,1df40 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1df14:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   1df18:	1a60000c 	andi	r9,r3,32768
   1df1c:	48000326 	beq	r9,zero,1df2c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1df20:	10c00005 	stb	r3,0(r2)
   1df24:	10800044 	addi	r2,r2,1
   1df28:	003ff906 	br	1df10 <_gp+0xffff6e08>
    else if (ptr != buffer)
   1df2c:	11400226 	beq	r2,r5,1df38 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   1df30:	1145c83a 	sub	r2,r2,r5
   1df34:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   1df38:	403ff526 	beq	r8,zero,1df10 <_gp+0xffff6e08>
   1df3c:	00000106 	br	1df44 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   1df40:	117ffb1e 	bne	r2,r5,1df30 <_gp+0xffff6e28>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   1df44:	39d0000c 	andi	r7,r7,16384
   1df48:	3800021e 	bne	r7,zero,1df54 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   1df4c:	00bffec4 	movi	r2,-5
   1df50:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   1df54:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   1df58:	f800283a 	ret

0001df5c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1df5c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1df60:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1df64:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1df68:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1df6c:	2980072e 	bgeu	r5,r6,1df8c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1df70:	38c00037 	ldwio	r3,0(r7)
   1df74:	18ffffec 	andhi	r3,r3,65535
   1df78:	183ffc26 	beq	r3,zero,1df6c <_gp+0xffff6e64>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1df7c:	28c00007 	ldb	r3,0(r5)
   1df80:	20c00035 	stwio	r3,0(r4)
   1df84:	29400044 	addi	r5,r5,1
   1df88:	003ff806 	br	1df6c <_gp+0xffff6e64>

  return count;
}
   1df8c:	f800283a 	ret

0001df90 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   1df90:	d1600c04 	addi	r5,gp,-32720
   1df94:	001e1681 	jmpi	1e168 <alt_find_dev>

0001df98 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   1df98:	20800a17 	ldw	r2,40(r4)
   1df9c:	10800023 	ldbuio	r2,0(r2)
   1dfa0:	28800005 	stb	r2,0(r5)

	return 0;
}
   1dfa4:	0005883a 	mov	r2,zero
   1dfa8:	f800283a 	ret

0001dfac <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1dfac:	20800a17 	ldw	r2,40(r4)
   1dfb0:	29400fcc 	andi	r5,r5,63
   1dfb4:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1dfb8:	20800a17 	ldw	r2,40(r4)
   1dfbc:	10800063 	ldbuio	r2,1(r2)
   1dfc0:	30800005 	stb	r2,0(r6)

	return 0;
}
   1dfc4:	0005883a 	mov	r2,zero
   1dfc8:	f800283a 	ret

0001dfcc <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1dfcc:	20800a17 	ldw	r2,40(r4)
   1dfd0:	29400fcc 	andi	r5,r5,63
   1dfd4:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   1dfd8:	20800a17 	ldw	r2,40(r4)
   1dfdc:	11800065 	stbio	r6,1(r2)

	return 0;
}
   1dfe0:	0005883a 	mov	r2,zero
   1dfe4:	f800283a 	ret

0001dfe8 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1dfe8:	20800a17 	ldw	r2,40(r4)
   1dfec:	00c00c84 	movi	r3,50
   1dff0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1dff4:	20800a17 	ldw	r2,40(r4)
   1dff8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1dffc:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1e000:	10803fcc 	andi	r2,r2,255
   1e004:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e008:	20800a17 	ldw	r2,40(r4)
   1e00c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1e010:	20800a17 	ldw	r2,40(r4)
   1e014:	10800063 	ldbuio	r2,1(r2)
   1e018:	10803fcc 	andi	r2,r2,255
   1e01c:	1006923a 	slli	r3,r2,8
   1e020:	28800017 	ldw	r2,0(r5)
   1e024:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   1e028:	10e0000c 	andi	r3,r2,32768
   1e02c:	18000126 	beq	r3,zero,1e034 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   1e030:	10bffff4 	orhi	r2,r2,65535
   1e034:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1e038:	0005883a 	mov	r2,zero
   1e03c:	f800283a 	ret

0001e040 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e040:	20800a17 	ldw	r2,40(r4)
   1e044:	00c00d04 	movi	r3,52
   1e048:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1e04c:	20800a17 	ldw	r2,40(r4)
   1e050:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e054:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1e058:	10803fcc 	andi	r2,r2,255
   1e05c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e060:	20800a17 	ldw	r2,40(r4)
   1e064:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1e068:	20800a17 	ldw	r2,40(r4)
   1e06c:	10800063 	ldbuio	r2,1(r2)
   1e070:	10803fcc 	andi	r2,r2,255
   1e074:	1006923a 	slli	r3,r2,8
   1e078:	28800017 	ldw	r2,0(r5)
   1e07c:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   1e080:	10e0000c 	andi	r3,r2,32768
   1e084:	18000126 	beq	r3,zero,1e08c <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   1e088:	10bffff4 	orhi	r2,r2,65535
   1e08c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1e090:	0005883a 	mov	r2,zero
   1e094:	f800283a 	ret

0001e098 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e098:	20800a17 	ldw	r2,40(r4)
   1e09c:	00c00d84 	movi	r3,54
   1e0a0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1e0a4:	20800a17 	ldw	r2,40(r4)
   1e0a8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e0ac:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1e0b0:	10803fcc 	andi	r2,r2,255
   1e0b4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1e0b8:	20800a17 	ldw	r2,40(r4)
   1e0bc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1e0c0:	20800a17 	ldw	r2,40(r4)
   1e0c4:	10800063 	ldbuio	r2,1(r2)
   1e0c8:	10803fcc 	andi	r2,r2,255
   1e0cc:	1006923a 	slli	r3,r2,8
   1e0d0:	28800017 	ldw	r2,0(r5)
   1e0d4:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   1e0d8:	10e0000c 	andi	r3,r2,32768
   1e0dc:	18000126 	beq	r3,zero,1e0e4 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   1e0e0:	10bffff4 	orhi	r2,r2,65535
   1e0e4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1e0e8:	0005883a 	mov	r2,zero
   1e0ec:	f800283a 	ret

0001e0f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1e0f0:	f800283a 	ret

0001e0f4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   1e0f4:	3005883a 	mov	r2,r6
   1e0f8:	f800283a 	ret

0001e0fc <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1e0fc:	20000226 	beq	r4,zero,1e108 <alt_dev_llist_insert+0xc>
   1e100:	20800217 	ldw	r2,8(r4)
   1e104:	1000101e 	bne	r2,zero,1e148 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   1e108:	d0a01017 	ldw	r2,-32704(gp)
   1e10c:	10000926 	beq	r2,zero,1e134 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1e110:	deffff04 	addi	sp,sp,-4
   1e114:	dfc00015 	stw	ra,0(sp)
   1e118:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   1e11c:	00c00584 	movi	r3,22
   1e120:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1e124:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1e128:	dfc00017 	ldw	ra,0(sp)
   1e12c:	dec00104 	addi	sp,sp,4
   1e130:	f800283a 	ret
   1e134:	d0a28004 	addi	r2,gp,-30208
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   1e138:	00c00584 	movi	r3,22
   1e13c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1e140:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1e144:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   1e148:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e14c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   1e150:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   1e154:	28800017 	ldw	r2,0(r5)
   1e158:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   1e15c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   1e160:	0005883a 	mov	r2,zero
   1e164:	f800283a 	ret

0001e168 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1e168:	defffb04 	addi	sp,sp,-20
   1e16c:	dcc00315 	stw	r19,12(sp)
   1e170:	dc800215 	stw	r18,8(sp)
   1e174:	dc400115 	stw	r17,4(sp)
   1e178:	dc000015 	stw	r16,0(sp)
   1e17c:	dfc00415 	stw	ra,16(sp)
   1e180:	2027883a 	mov	r19,r4
   1e184:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   1e188:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   1e18c:	00152740 	call	15274 <strlen>
   1e190:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e194:	84400726 	beq	r16,r17,1e1b4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1e198:	81000217 	ldw	r4,8(r16)
   1e19c:	900d883a 	mov	r6,r18
   1e1a0:	980b883a 	mov	r5,r19
   1e1a4:	0019cd00 	call	19cd0 <memcmp>
   1e1a8:	10000426 	beq	r2,zero,1e1bc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   1e1ac:	84000017 	ldw	r16,0(r16)
   1e1b0:	003ff806 	br	1e194 <_gp+0xffff708c>
  }
  
  /* No match found */
  
  return NULL;
   1e1b4:	0005883a 	mov	r2,zero
   1e1b8:	00000106 	br	1e1c0 <alt_find_dev+0x58>
   1e1bc:	8005883a 	mov	r2,r16
}
   1e1c0:	dfc00417 	ldw	ra,16(sp)
   1e1c4:	dcc00317 	ldw	r19,12(sp)
   1e1c8:	dc800217 	ldw	r18,8(sp)
   1e1cc:	dc400117 	ldw	r17,4(sp)
   1e1d0:	dc000017 	ldw	r16,0(sp)
   1e1d4:	dec00504 	addi	sp,sp,20
   1e1d8:	f800283a 	ret

0001e1dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1e1dc:	f800283a 	ret

0001e1e0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1e1e0:	000170fa 	wrctl	ienable,zero
   1e1e4:	f800283a 	ret

0001e1e8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   1e1e8:	213ffe84 	addi	r4,r4,-6
   1e1ec:	008003c4 	movi	r2,15
   1e1f0:	11001636 	bltu	r2,r4,1e24c <alt_exception_cause_generated_bad_addr+0x64>
   1e1f4:	200890ba 	slli	r4,r4,2
   1e1f8:	008000b4 	movhi	r2,2
   1e1fc:	10b88304 	addi	r2,r2,-7668
   1e200:	2089883a 	add	r4,r4,r2
   1e204:	20800017 	ldw	r2,0(r4)
   1e208:	1000683a 	jmp	r2
   1e20c:	0001e254 	movui	zero,1929
   1e210:	0001e254 	movui	zero,1929
   1e214:	0001e24c 	andi	zero,zero,1929
   1e218:	0001e24c 	andi	zero,zero,1929
   1e21c:	0001e24c 	andi	zero,zero,1929
   1e220:	0001e254 	movui	zero,1929
   1e224:	0001e24c 	andi	zero,zero,1929
   1e228:	0001e24c 	andi	zero,zero,1929
   1e22c:	0001e254 	movui	zero,1929
   1e230:	0001e254 	movui	zero,1929
   1e234:	0001e24c 	andi	zero,zero,1929
   1e238:	0001e254 	movui	zero,1929
   1e23c:	0001e24c 	andi	zero,zero,1929
   1e240:	0001e24c 	andi	zero,zero,1929
   1e244:	0001e24c 	andi	zero,zero,1929
   1e248:	0001e254 	movui	zero,1929
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1e24c:	0005883a 	mov	r2,zero
   1e250:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1e254:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   1e258:	f800283a 	ret
